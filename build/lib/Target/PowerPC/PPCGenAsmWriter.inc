/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ '#', 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 9, 0,
  /* 16 */ 'b', 'd', 'z', 'l', 'a', '+', 32, 0,
  /* 24 */ 'b', 'd', 'n', 'z', 'l', 'a', '+', 32, 0,
  /* 33 */ 'b', 'd', 'z', 'a', '+', 32, 0,
  /* 40 */ 'b', 'd', 'n', 'z', 'a', '+', 32, 0,
  /* 48 */ 'b', 'd', 'z', 'l', '+', 32, 0,
  /* 55 */ 'b', 'd', 'n', 'z', 'l', '+', 32, 0,
  /* 63 */ 'b', 'd', 'z', '+', 32, 0,
  /* 69 */ 'b', 'd', 'n', 'z', '+', 32, 0,
  /* 76 */ 'b', 'c', 'l', 32, '2', '0', ',', 32, '3', '1', ',', 32, 0,
  /* 89 */ 'b', 'c', 't', 'r', 'l', 10, 9, 'l', 'd', 32, '2', ',', 32, 0,
  /* 103 */ 'b', 'c', 32, '1', '2', ',', 32, 0,
  /* 111 */ 'b', 'c', 'l', 32, '1', '2', ',', 32, 0,
  /* 120 */ 'b', 'c', 'l', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 131 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 143 */ 'b', 'c', 'l', 'r', 32, '1', '2', ',', 32, 0,
  /* 153 */ 'b', 'c', 'c', 't', 'r', 32, '1', '2', ',', 32, 0,
  /* 164 */ 'b', 'c', 32, '4', ',', 32, 0,
  /* 171 */ 'b', 'c', 'l', 32, '4', ',', 32, 0,
  /* 179 */ 'b', 'c', 'l', 'r', 'l', 32, '4', ',', 32, 0,
  /* 189 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '4', ',', 32, 0,
  /* 200 */ 'b', 'c', 'l', 'r', 32, '4', ',', 32, 0,
  /* 209 */ 'b', 'c', 'c', 't', 'r', 32, '4', ',', 32, 0,
  /* 219 */ 'm', 't', 's', 'p', 'r', 32, '2', '5', '6', ',', 32, 0,
  /* 231 */ 'b', 'd', 'z', 'l', 'a', '-', 32, 0,
  /* 239 */ 'b', 'd', 'n', 'z', 'l', 'a', '-', 32, 0,
  /* 248 */ 'b', 'd', 'z', 'a', '-', 32, 0,
  /* 255 */ 'b', 'd', 'n', 'z', 'a', '-', 32, 0,
  /* 263 */ 'b', 'd', 'z', 'l', '-', 32, 0,
  /* 270 */ 'b', 'd', 'n', 'z', 'l', '-', 32, 0,
  /* 278 */ 'b', 'd', 'z', '-', 32, 0,
  /* 284 */ 'b', 'd', 'n', 'z', '-', 32, 0,
  /* 291 */ 'v', 'c', 'm', 'p', 'n', 'e', 'b', '.', 32, 0,
  /* 301 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', '.', 32, 0,
  /* 312 */ 'e', 'x', 't', 's', 'b', '.', 32, 0,
  /* 320 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', '.', 32, 0,
  /* 331 */ 'f', 's', 'u', 'b', '.', 32, 0,
  /* 338 */ 'f', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 346 */ 'f', 'n', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 355 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', '.', 32, 0,
  /* 366 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'b', '.', 32, 0,
  /* 377 */ 'a', 'd', 'd', 'c', '.', 32, 0,
  /* 384 */ 'a', 'n', 'd', 'c', '.', 32, 0,
  /* 391 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', '.', 32, 0,
  /* 402 */ 's', 'u', 'b', 'f', 'c', '.', 32, 0,
  /* 410 */ 's', 'u', 'b', 'i', 'c', '.', 32, 0,
  /* 418 */ 'a', 'd', 'd', 'i', 'c', '.', 32, 0,
  /* 426 */ 'r', 'l', 'd', 'i', 'c', '.', 32, 0,
  /* 434 */ 'b', 'c', 'd', 't', 'r', 'u', 'n', 'c', '.', 32, 0,
  /* 445 */ 'b', 'c', 'd', 'u', 't', 'r', 'u', 'n', 'c', '.', 32, 0,
  /* 457 */ 'o', 'r', 'c', '.', 32, 0,
  /* 463 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', '.', 32, 0,
  /* 474 */ 's', 'r', 'a', 'd', '.', 32, 0,
  /* 481 */ 'f', 'a', 'd', 'd', '.', 32, 0,
  /* 488 */ 'f', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 496 */ 'f', 'n', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 505 */ 'm', 'u', 'l', 'h', 'd', '.', 32, 0,
  /* 513 */ 'f', 'c', 'f', 'i', 'd', '.', 32, 0,
  /* 521 */ 'f', 'c', 't', 'i', 'd', '.', 32, 0,
  /* 529 */ 'm', 'u', 'l', 'l', 'd', '.', 32, 0,
  /* 537 */ 's', 'l', 'd', '.', 32, 0,
  /* 543 */ 'n', 'a', 'n', 'd', '.', 32, 0,
  /* 550 */ 't', 'e', 'n', 'd', '.', 32, 0,
  /* 557 */ 's', 'r', 'd', '.', 32, 0,
  /* 563 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', '.', 32, 0,
  /* 574 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', '.', 32, 0,
  /* 585 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', '.', 32, 0,
  /* 596 */ 'd', 'i', 'v', 'd', '.', 32, 0,
  /* 603 */ 'c', 'n', 't', 'l', 'z', 'd', '.', 32, 0,
  /* 612 */ 'c', 'n', 't', 't', 'z', 'd', '.', 32, 0,
  /* 621 */ 'a', 'd', 'd', 'e', '.', 32, 0,
  /* 628 */ 'd', 'i', 'v', 'd', 'e', '.', 32, 0,
  /* 636 */ 's', 'l', 'b', 'f', 'e', 'e', '.', 32, 0,
  /* 645 */ 's', 'u', 'b', 'f', 'e', '.', 32, 0,
  /* 653 */ 'a', 'd', 'd', 'm', 'e', '.', 32, 0,
  /* 661 */ 's', 'u', 'b', 'f', 'm', 'e', '.', 32, 0,
  /* 670 */ 'f', 'r', 'e', '.', 32, 0,
  /* 676 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', 32, 0,
  /* 686 */ 'p', 'a', 's', 't', 'e', '.', 32, 0,
  /* 694 */ 'd', 'i', 'v', 'w', 'e', '.', 32, 0,
  /* 702 */ 'a', 'd', 'd', 'z', 'e', '.', 32, 0,
  /* 710 */ 's', 'u', 'b', 'f', 'z', 'e', '.', 32, 0,
  /* 719 */ 's', 'u', 'b', 'f', '.', 32, 0,
  /* 726 */ 'm', 't', 'f', 's', 'f', '.', 32, 0,
  /* 734 */ 'f', 'n', 'e', 'g', '.', 32, 0,
  /* 741 */ 'v', 'c', 'm', 'p', 'n', 'e', 'h', '.', 32, 0,
  /* 751 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', '.', 32, 0,
  /* 762 */ 'e', 'x', 't', 's', 'h', '.', 32, 0,
  /* 770 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', '.', 32, 0,
  /* 781 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', '.', 32, 0,
  /* 792 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'h', '.', 32, 0,
  /* 803 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', 'i', '.', 32, 0,
  /* 815 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', 'i', '.', 32, 0,
  /* 827 */ 's', 'r', 'a', 'd', 'i', '.', 32, 0,
  /* 835 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', '.', 32, 0,
  /* 846 */ 'e', 'x', 't', 'l', 'd', 'i', '.', 32, 0,
  /* 855 */ 'a', 'n', 'd', 'i', '.', 32, 0,
  /* 862 */ 'c', 'l', 'r', 'r', 'd', 'i', '.', 32, 0,
  /* 871 */ 'i', 'n', 's', 'r', 'd', 'i', '.', 32, 0,
  /* 880 */ 'r', 'o', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 889 */ 'e', 'x', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 898 */ 'm', 't', 'f', 's', 'f', 'i', '.', 32, 0,
  /* 907 */ 'e', 'x', 't', 's', 'w', 's', 'l', 'i', '.', 32, 0,
  /* 918 */ 'r', 'l', 'd', 'i', 'm', 'i', '.', 32, 0,
  /* 927 */ 'r', 'l', 'w', 'i', 'm', 'i', '.', 32, 0,
  /* 936 */ 's', 'r', 'a', 'w', 'i', '.', 32, 0,
  /* 944 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 955 */ 'i', 'n', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 964 */ 'e', 'x', 't', 'l', 'w', 'i', '.', 32, 0,
  /* 973 */ 'c', 'l', 'r', 'r', 'w', 'i', '.', 32, 0,
  /* 982 */ 'i', 'n', 's', 'r', 'w', 'i', '.', 32, 0,
  /* 991 */ 'r', 'o', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 1000 */ 'e', 'x', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 1009 */ 'r', 'l', 'd', 'c', 'l', '.', 32, 0,
  /* 1017 */ 'r', 'l', 'd', 'i', 'c', 'l', '.', 32, 0,
  /* 1026 */ 'f', 's', 'e', 'l', '.', 32, 0,
  /* 1033 */ 'f', 'm', 'u', 'l', '.', 32, 0,
  /* 1040 */ 't', 'r', 'e', 'c', 'l', 'a', 'i', 'm', '.', 32, 0,
  /* 1051 */ 'f', 'r', 'i', 'm', '.', 32, 0,
  /* 1058 */ 'r', 'l', 'w', 'i', 'n', 'm', '.', 32, 0,
  /* 1067 */ 'r', 'l', 'w', 'n', 'm', '.', 32, 0,
  /* 1075 */ 'b', 'c', 'd', 'c', 'f', 'n', '.', 32, 0,
  /* 1084 */ 'b', 'c', 'd', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 1095 */ 'f', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 1104 */ 'b', 'c', 'd', 's', 'e', 't', 's', 'g', 'n', '.', 32, 0,
  /* 1116 */ 't', 'b', 'e', 'g', 'i', 'n', '.', 32, 0,
  /* 1125 */ 'f', 'r', 'i', 'n', '.', 32, 0,
  /* 1132 */ 'b', 'c', 'd', 'c', 't', 'n', '.', 32, 0,
  /* 1141 */ 'a', 'd', 'd', 'c', 'o', '.', 32, 0,
  /* 1149 */ 's', 'u', 'b', 'f', 'c', 'o', '.', 32, 0,
  /* 1158 */ 'a', 'd', 'd', 'o', '.', 32, 0,
  /* 1165 */ 'm', 'u', 'l', 'l', 'd', 'o', '.', 32, 0,
  /* 1174 */ 'd', 'i', 'v', 'd', 'o', '.', 32, 0,
  /* 1182 */ 'a', 'd', 'd', 'e', 'o', '.', 32, 0,
  /* 1190 */ 'd', 'i', 'v', 'd', 'e', 'o', '.', 32, 0,
  /* 1199 */ 's', 'u', 'b', 'f', 'e', 'o', '.', 32, 0,
  /* 1208 */ 'a', 'd', 'd', 'm', 'e', 'o', '.', 32, 0,
  /* 1217 */ 's', 'u', 'b', 'f', 'm', 'e', 'o', '.', 32, 0,
  /* 1227 */ 'd', 'i', 'v', 'w', 'e', 'o', '.', 32, 0,
  /* 1236 */ 'a', 'd', 'd', 'z', 'e', 'o', '.', 32, 0,
  /* 1245 */ 's', 'u', 'b', 'f', 'z', 'e', 'o', '.', 32, 0,
  /* 1255 */ 's', 'u', 'b', 'f', 'o', '.', 32, 0,
  /* 1263 */ 'n', 'e', 'g', 'o', '.', 32, 0,
  /* 1270 */ 'd', 'i', 'v', 'd', 'u', 'o', '.', 32, 0,
  /* 1279 */ 'd', 'i', 'v', 'd', 'e', 'u', 'o', '.', 32, 0,
  /* 1289 */ 'd', 'i', 'v', 'w', 'e', 'u', 'o', '.', 32, 0,
  /* 1299 */ 'd', 'i', 'v', 'w', 'u', 'o', '.', 32, 0,
  /* 1308 */ 'm', 'u', 'l', 'l', 'w', 'o', '.', 32, 0,
  /* 1317 */ 'd', 'i', 'v', 'w', 'o', '.', 32, 0,
  /* 1325 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', '.', 32, 0,
  /* 1337 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', '.', 32, 0,
  /* 1349 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', '.', 32, 0,
  /* 1361 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', '.', 32, 0,
  /* 1371 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', '.', 32, 0,
  /* 1382 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', '.', 32, 0,
  /* 1393 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', '.', 32, 0,
  /* 1404 */ 'f', 'r', 'i', 'p', '.', 32, 0,
  /* 1411 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', '.', 32, 0,
  /* 1423 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', '.', 32, 0,
  /* 1435 */ 'f', 'r', 's', 'p', '.', 32, 0,
  /* 1442 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', '.', 32, 0,
  /* 1454 */ 'i', 'c', 'b', 'l', 'q', '.', 32, 0,
  /* 1462 */ 'b', 'c', 'd', 'c', 'f', 's', 'q', '.', 32, 0,
  /* 1472 */ 'b', 'c', 'd', 'c', 't', 's', 'q', '.', 32, 0,
  /* 1482 */ 'r', 'l', 'd', 'c', 'r', '.', 32, 0,
  /* 1490 */ 'r', 'l', 'd', 'i', 'c', 'r', '.', 32, 0,
  /* 1499 */ 'f', 'm', 'r', '.', 32, 0,
  /* 1505 */ 'n', 'o', 'r', '.', 32, 0,
  /* 1511 */ 'x', 'o', 'r', '.', 32, 0,
  /* 1517 */ 'b', 'c', 'd', 's', 'r', '.', 32, 0,
  /* 1525 */ 't', 's', 'r', '.', 32, 0,
  /* 1531 */ 'f', 'a', 'b', 's', '.', 32, 0,
  /* 1538 */ 'f', 'n', 'a', 'b', 's', '.', 32, 0,
  /* 1546 */ 'f', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1554 */ 'f', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1563 */ 'f', 'n', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1573 */ 'b', 'c', 'd', 's', '.', 32, 0,
  /* 1580 */ 'f', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1588 */ 'f', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1597 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1607 */ 'f', 'c', 'f', 'i', 'd', 's', '.', 32, 0,
  /* 1616 */ 'f', 'r', 'e', 's', '.', 32, 0,
  /* 1623 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 's', '.', 32, 0,
  /* 1634 */ 'm', 'f', 'f', 's', '.', 32, 0,
  /* 1641 */ 'a', 'n', 'd', 'i', 's', '.', 32, 0,
  /* 1649 */ 'f', 'm', 'u', 'l', 's', '.', 32, 0,
  /* 1657 */ 'f', 's', 'q', 'r', 't', 's', '.', 32, 0,
  /* 1666 */ 'b', 'c', 'd', 'u', 's', '.', 32, 0,
  /* 1674 */ 'f', 'c', 'f', 'i', 'd', 'u', 's', '.', 32, 0,
  /* 1684 */ 'f', 'd', 'i', 'v', 's', '.', 32, 0,
  /* 1692 */ 't', 'a', 'b', 'o', 'r', 't', '.', 32, 0,
  /* 1701 */ 'f', 's', 'q', 'r', 't', '.', 32, 0,
  /* 1709 */ 'm', 'u', 'l', 'h', 'd', 'u', '.', 32, 0,
  /* 1718 */ 'f', 'c', 'f', 'i', 'd', 'u', '.', 32, 0,
  /* 1727 */ 'f', 'c', 't', 'i', 'd', 'u', '.', 32, 0,
  /* 1736 */ 'd', 'i', 'v', 'd', 'u', '.', 32, 0,
  /* 1744 */ 'd', 'i', 'v', 'd', 'e', 'u', '.', 32, 0,
  /* 1753 */ 'd', 'i', 'v', 'w', 'e', 'u', '.', 32, 0,
  /* 1762 */ 'm', 'u', 'l', 'h', 'w', 'u', '.', 32, 0,
  /* 1771 */ 'f', 'c', 't', 'i', 'w', 'u', '.', 32, 0,
  /* 1780 */ 'd', 'i', 'v', 'w', 'u', '.', 32, 0,
  /* 1788 */ 'f', 'd', 'i', 'v', '.', 32, 0,
  /* 1795 */ 'e', 'q', 'v', '.', 32, 0,
  /* 1801 */ 's', 'r', 'a', 'w', '.', 32, 0,
  /* 1808 */ 'v', 'c', 'm', 'p', 'n', 'e', 'w', '.', 32, 0,
  /* 1818 */ 'm', 'u', 'l', 'h', 'w', '.', 32, 0,
  /* 1826 */ 'f', 'c', 't', 'i', 'w', '.', 32, 0,
  /* 1834 */ 'm', 'u', 'l', 'l', 'w', '.', 32, 0,
  /* 1842 */ 's', 'l', 'w', '.', 32, 0,
  /* 1848 */ 's', 'r', 'w', '.', 32, 0,
  /* 1854 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', '.', 32, 0,
  /* 1865 */ 'e', 'x', 't', 's', 'w', '.', 32, 0,
  /* 1873 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', '.', 32, 0,
  /* 1884 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', '.', 32, 0,
  /* 1895 */ 'd', 'i', 'v', 'w', '.', 32, 0,
  /* 1902 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'w', '.', 32, 0,
  /* 1913 */ 'c', 'n', 't', 'l', 'z', 'w', '.', 32, 0,
  /* 1922 */ 'c', 'n', 't', 't', 'z', 'w', '.', 32, 0,
  /* 1931 */ 's', 't', 'b', 'c', 'x', '.', 32, 0,
  /* 1939 */ 's', 't', 'd', 'c', 'x', '.', 32, 0,
  /* 1947 */ 's', 't', 'h', 'c', 'x', '.', 32, 0,
  /* 1955 */ 's', 't', 'w', 'c', 'x', '.', 32, 0,
  /* 1963 */ 't', 'l', 'b', 's', 'x', '.', 32, 0,
  /* 1971 */ 'f', 'c', 't', 'i', 'd', 'z', '.', 32, 0,
  /* 1980 */ 'b', 'c', 'd', 'c', 'f', 'z', '.', 32, 0,
  /* 1989 */ 'f', 'r', 'i', 'z', '.', 32, 0,
  /* 1996 */ 'b', 'c', 'd', 'c', 't', 'z', '.', 32, 0,
  /* 2005 */ 'f', 'c', 't', 'i', 'd', 'u', 'z', '.', 32, 0,
  /* 2015 */ 'f', 'c', 't', 'i', 'w', 'u', 'z', '.', 32, 0,
  /* 2025 */ 'f', 'c', 't', 'i', 'w', 'z', '.', 32, 0,
  /* 2034 */ 'm', 't', 'f', 's', 'b', '0', 32, 0,
  /* 2042 */ 'm', 't', 'f', 's', 'b', '1', 32, 0,
  /* 2050 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 32, 0,
  /* 2072 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 32, 0,
  /* 2094 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', '8', 32, 0,
  /* 2108 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', '8', 32, 0,
  /* 2122 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', '8', 32, 0,
  /* 2136 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 32, 0,
  /* 2151 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 2170 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 2187 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 32, 0,
  /* 2200 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2213 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2226 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2237 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'a', 32, 0,
  /* 2248 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2261 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2274 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2285 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2298 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2311 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2322 */ 'd', 'c', 'b', 'a', 32, 0,
  /* 2328 */ 'b', 'c', 'a', 32, 0,
  /* 2333 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 32, 0,
  /* 2344 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 'a', 32, 0,
  /* 2355 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 32, 0,
  /* 2366 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 32, 0,
  /* 2376 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 32, 0,
  /* 2387 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 'a', 32, 0,
  /* 2398 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 32, 0,
  /* 2409 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 32, 0,
  /* 2419 */ 'l', 'h', 'a', 32, 0,
  /* 2424 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 32, 0,
  /* 2435 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 'a', 32, 0,
  /* 2446 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 32, 0,
  /* 2457 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 32, 0,
  /* 2467 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 32, 0,
  /* 2478 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 'a', 32, 0,
  /* 2489 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 32, 0,
  /* 2500 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 32, 0,
  /* 2511 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 32, 0,
  /* 2521 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 'a', 32, 0,
  /* 2533 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 'a', 32, 0,
  /* 2544 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 'a', 32, 0,
  /* 2556 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 'a', 32, 0,
  /* 2567 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2580 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2592 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2605 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2617 */ 'b', 'l', 'a', 32, 0,
  /* 2622 */ 'b', 'c', 'l', 'a', 32, 0,
  /* 2628 */ 'b', 'd', 'z', 'l', 'a', 32, 0,
  /* 2635 */ 'b', 'd', 'n', 'z', 'l', 'a', 32, 0,
  /* 2643 */ 'e', 'v', 'm', 'r', 'a', 32, 0,
  /* 2650 */ 'l', 'w', 'a', 32, 0,
  /* 2655 */ 'm', 't', 'v', 's', 'r', 'w', 'a', 32, 0,
  /* 2664 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 'a', 32, 0,
  /* 2675 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2685 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2696 */ 'q', 'v', 'l', 'f', 'd', 'x', 'a', 32, 0,
  /* 2705 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'a', 32, 0,
  /* 2715 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2725 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2736 */ 'q', 'v', 'l', 'f', 's', 'x', 'a', 32, 0,
  /* 2745 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'a', 32, 0,
  /* 2755 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2766 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2778 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 2788 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 2799 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 2810 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 2822 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 2832 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 2843 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 'a', 32, 0,
  /* 2854 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 'a', 32, 0,
  /* 2865 */ 'b', 'd', 'z', 'a', 32, 0,
  /* 2871 */ 'b', 'd', 'n', 'z', 'a', 32, 0,
  /* 2878 */ 'v', 's', 'r', 'a', 'b', 32, 0,
  /* 2885 */ 'r', 'f', 'e', 'b', 'b', 32, 0,
  /* 2892 */ 'v', 'c', 'l', 'z', 'l', 's', 'b', 'b', 32, 0,
  /* 2902 */ 'v', 'c', 't', 'z', 'l', 's', 'b', 'b', 32, 0,
  /* 2912 */ 'v', 'c', 'm', 'p', 'n', 'e', 'b', 32, 0,
  /* 2921 */ 'v', 'm', 'r', 'g', 'h', 'b', 32, 0,
  /* 2929 */ 'x', 'x', 's', 'p', 'l', 't', 'i', 'b', 32, 0,
  /* 2939 */ 'v', 'm', 'r', 'g', 'l', 'b', 32, 0,
  /* 2947 */ 'v', 'r', 'l', 'b', 32, 0,
  /* 2953 */ 'v', 's', 'l', 'b', 32, 0,
  /* 2959 */ 'v', 'p', 'm', 's', 'u', 'm', 'b', 32, 0,
  /* 2968 */ 'c', 'm', 'p', 'b', 32, 0,
  /* 2974 */ 'c', 'm', 'p', 'e', 'q', 'b', 32, 0,
  /* 2982 */ 'c', 'm', 'p', 'r', 'b', 32, 0,
  /* 2989 */ 'v', 's', 'r', 'b', 32, 0,
  /* 2995 */ 'v', 'm', 'u', 'l', 'e', 's', 'b', 32, 0,
  /* 3004 */ 'v', 'a', 'v', 'g', 's', 'b', 32, 0,
  /* 3012 */ 'v', 'u', 'p', 'k', 'h', 's', 'b', 32, 0,
  /* 3021 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'b', 32, 0,
  /* 3031 */ 'v', 'u', 'p', 'k', 'l', 's', 'b', 32, 0,
  /* 3040 */ 'v', 'm', 'i', 'n', 's', 'b', 32, 0,
  /* 3048 */ 'v', 'm', 'u', 'l', 'o', 's', 'b', 32, 0,
  /* 3057 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', 32, 0,
  /* 3067 */ 'e', 'v', 'e', 'x', 't', 's', 'b', 32, 0,
  /* 3076 */ 'v', 'm', 'a', 'x', 's', 'b', 32, 0,
  /* 3084 */ 's', 'e', 't', 'b', 32, 0,
  /* 3090 */ 'm', 'f', 't', 'b', 32, 0,
  /* 3096 */ 'v', 's', 'p', 'l', 't', 'b', 32, 0,
  /* 3104 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'b', 32, 0,
  /* 3114 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'b', 32, 0,
  /* 3124 */ 's', 't', 'b', 32, 0,
  /* 3129 */ 'v', 'a', 'b', 's', 'd', 'u', 'b', 32, 0,
  /* 3138 */ 'v', 'm', 'u', 'l', 'e', 'u', 'b', 32, 0,
  /* 3147 */ 'v', 'a', 'v', 'g', 'u', 'b', 32, 0,
  /* 3155 */ 'v', 'm', 'i', 'n', 'u', 'b', 32, 0,
  /* 3163 */ 'v', 'm', 'u', 'l', 'o', 'u', 'b', 32, 0,
  /* 3172 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', 32, 0,
  /* 3182 */ 'e', 'f', 'd', 's', 'u', 'b', 32, 0,
  /* 3190 */ 'q', 'v', 'f', 's', 'u', 'b', 32, 0,
  /* 3198 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 32, 0,
  /* 3207 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 32, 0,
  /* 3217 */ 'e', 'f', 's', 's', 'u', 'b', 32, 0,
  /* 3225 */ 'e', 'v', 'f', 's', 's', 'u', 'b', 32, 0,
  /* 3234 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'b', 32, 0,
  /* 3246 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', 32, 0,
  /* 3256 */ 'v', 'm', 'a', 'x', 'u', 'b', 32, 0,
  /* 3264 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'b', 32, 0,
  /* 3274 */ 'v', 'c', 'l', 'z', 'b', 32, 0,
  /* 3281 */ 'v', 'c', 't', 'z', 'b', 32, 0,
  /* 3288 */ 'b', 'c', 32, 0,
  /* 3292 */ 'a', 'd', 'd', 'c', 32, 0,
  /* 3298 */ 'x', 'x', 'l', 'a', 'n', 'd', 'c', 32, 0,
  /* 3307 */ 'c', 'r', 'a', 'n', 'd', 'c', 32, 0,
  /* 3315 */ 'e', 'v', 'a', 'n', 'd', 'c', 32, 0,
  /* 3323 */ 's', 'u', 'b', 'f', 'c', 32, 0,
  /* 3330 */ 's', 'u', 'b', 'i', 'c', 32, 0,
  /* 3337 */ 'a', 'd', 'd', 'i', 'c', 32, 0,
  /* 3344 */ 'r', 'l', 'd', 'i', 'c', 32, 0,
  /* 3351 */ 's', 'u', 'b', 'f', 'i', 'c', 32, 0,
  /* 3359 */ 'x', 's', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 3368 */ 'x', 'v', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 3377 */ 'x', 'v', 'r', 's', 'p', 'i', 'c', 32, 0,
  /* 3386 */ 'i', 'c', 'b', 'l', 'c', 32, 0,
  /* 3393 */ 'b', 'r', 'i', 'n', 'c', 32, 0,
  /* 3400 */ 's', 'y', 'n', 'c', 32, 0,
  /* 3406 */ 'x', 'x', 'l', 'o', 'r', 'c', 32, 0,
  /* 3414 */ 'c', 'r', 'o', 'r', 'c', 32, 0,
  /* 3421 */ 'e', 'v', 'o', 'r', 'c', 32, 0,
  /* 3428 */ 's', 'c', 32, 0,
  /* 3432 */ 'v', 'e', 'x', 't', 's', 'b', '2', 'd', 32, 0,
  /* 3442 */ 'v', 'e', 'x', 't', 's', 'h', '2', 'd', 32, 0,
  /* 3452 */ 'v', 'e', 'x', 't', 's', 'w', '2', 'd', 32, 0,
  /* 3462 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 32, 0,
  /* 3475 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'd', 32, 0,
  /* 3487 */ 'v', 's', 'r', 'a', 'd', 32, 0,
  /* 3494 */ 'v', 'g', 'b', 'b', 'd', 32, 0,
  /* 3501 */ 'v', 'p', 'r', 't', 'y', 'b', 'd', 32, 0,
  /* 3510 */ 'e', 'f', 'd', 'a', 'd', 'd', 32, 0,
  /* 3518 */ 'q', 'v', 'f', 'a', 'd', 'd', 32, 0,
  /* 3526 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 32, 0,
  /* 3535 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 3545 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 3559 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 32, 0,
  /* 3572 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 3582 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 3593 */ 'e', 'f', 's', 'a', 'd', 'd', 32, 0,
  /* 3601 */ 'e', 'v', 'f', 's', 'a', 'd', 'd', 32, 0,
  /* 3610 */ 'e', 'v', 'l', 'd', 'd', 32, 0,
  /* 3617 */ 'm', 't', 'v', 's', 'r', 'd', 'd', 32, 0,
  /* 3626 */ 'e', 'v', 's', 't', 'd', 'd', 32, 0,
  /* 3634 */ 'e', 'f', 's', 'c', 'f', 'd', 32, 0,
  /* 3642 */ 'l', 'f', 'd', 32, 0,
  /* 3647 */ 's', 't', 'f', 'd', 32, 0,
  /* 3653 */ 'v', 'n', 'e', 'g', 'd', 32, 0,
  /* 3660 */ 'm', 'a', 'd', 'd', 'h', 'd', 32, 0,
  /* 3668 */ 'm', 'u', 'l', 'h', 'd', 32, 0,
  /* 3675 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 32, 0,
  /* 3684 */ 'e', 'f', 'd', 'c', 'f', 's', 'i', 'd', 32, 0,
  /* 3694 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 32, 0,
  /* 3703 */ 'e', 'f', 'd', 'c', 'f', 'u', 'i', 'd', 32, 0,
  /* 3713 */ 't', 'l', 'b', 'l', 'd', 32, 0,
  /* 3720 */ 'm', 'a', 'd', 'd', 'l', 'd', 32, 0,
  /* 3728 */ 'm', 'u', 'l', 'l', 'd', 32, 0,
  /* 3735 */ 'c', 'm', 'p', 'l', 'd', 32, 0,
  /* 3742 */ 'm', 'f', 'v', 's', 'r', 'l', 'd', 32, 0,
  /* 3751 */ 'v', 'r', 'l', 'd', 32, 0,
  /* 3757 */ 'v', 's', 'l', 'd', 32, 0,
  /* 3763 */ 'v', 'b', 'p', 'e', 'r', 'm', 'd', 32, 0,
  /* 3772 */ 'v', 'p', 'm', 's', 'u', 'm', 'd', 32, 0,
  /* 3781 */ 'x', 'x', 'l', 'a', 'n', 'd', 32, 0,
  /* 3789 */ 'x', 'x', 'l', 'n', 'a', 'n', 'd', 32, 0,
  /* 3798 */ 'c', 'r', 'n', 'a', 'n', 'd', 32, 0,
  /* 3806 */ 'e', 'v', 'n', 'a', 'n', 'd', 32, 0,
  /* 3814 */ 'c', 'r', 'a', 'n', 'd', 32, 0,
  /* 3821 */ 'e', 'v', 'a', 'n', 'd', 32, 0,
  /* 3828 */ 'c', 'm', 'p', 'd', 32, 0,
  /* 3834 */ 'x', 'x', 'b', 'r', 'd', 32, 0,
  /* 3841 */ 'm', 't', 'm', 's', 'r', 'd', 32, 0,
  /* 3849 */ 'm', 'f', 'v', 's', 'r', 'd', 32, 0,
  /* 3857 */ 'm', 't', 'v', 's', 'r', 'd', 32, 0,
  /* 3865 */ 'm', 'o', 'd', 's', 'd', 32, 0,
  /* 3872 */ 'v', 'm', 'i', 'n', 's', 'd', 32, 0,
  /* 3880 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', 32, 0,
  /* 3890 */ 'v', 'm', 'a', 'x', 's', 'd', 32, 0,
  /* 3898 */ 'l', 'x', 's', 'd', 32, 0,
  /* 3904 */ 's', 't', 'x', 's', 'd', 32, 0,
  /* 3911 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'd', 32, 0,
  /* 3922 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'd', 32, 0,
  /* 3932 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'd', 32, 0,
  /* 3942 */ 's', 't', 'd', 32, 0,
  /* 3947 */ 'm', 'o', 'd', 'u', 'd', 32, 0,
  /* 3954 */ 'v', 'm', 'i', 'n', 'u', 'd', 32, 0,
  /* 3962 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', 32, 0,
  /* 3972 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', 32, 0,
  /* 3982 */ 'v', 'm', 'a', 'x', 'u', 'd', 32, 0,
  /* 3990 */ 'd', 'i', 'v', 'd', 32, 0,
  /* 3996 */ 'v', 'c', 'l', 'z', 'd', 32, 0,
  /* 4003 */ 'c', 'n', 't', 'l', 'z', 'd', 32, 0,
  /* 4011 */ 'v', 'c', 't', 'z', 'd', 32, 0,
  /* 4018 */ 'c', 'n', 't', 't', 'z', 'd', 32, 0,
  /* 4026 */ 'm', 'f', 'b', 'h', 'r', 'b', 'e', 32, 0,
  /* 4035 */ 'm', 'f', 'f', 's', 'c', 'e', 32, 0,
  /* 4043 */ 'a', 'd', 'd', 'e', 32, 0,
  /* 4049 */ 'd', 'i', 'v', 'd', 'e', 32, 0,
  /* 4056 */ 's', 'l', 'b', 'm', 'f', 'e', 'e', 32, 0,
  /* 4065 */ 'w', 'r', 't', 'e', 'e', 32, 0,
  /* 4072 */ 's', 'u', 'b', 'f', 'e', 32, 0,
  /* 4079 */ 'e', 'v', 'l', 'w', 'h', 'e', 32, 0,
  /* 4087 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 32, 0,
  /* 4096 */ 's', 'l', 'b', 'i', 'e', 32, 0,
  /* 4103 */ 't', 'l', 'b', 'i', 'e', 32, 0,
  /* 4110 */ 'a', 'd', 'd', 'm', 'e', 32, 0,
  /* 4117 */ 's', 'u', 'b', 'f', 'm', 'e', 32, 0,
  /* 4125 */ 't', 'l', 'b', 'r', 'e', 32, 0,
  /* 4132 */ 'q', 'v', 'f', 'r', 'e', 32, 0,
  /* 4139 */ 's', 'l', 'b', 'm', 't', 'e', 32, 0,
  /* 4147 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 32, 0,
  /* 4158 */ 'p', 'a', 's', 't', 'e', 32, 0,
  /* 4165 */ 't', 'l', 'b', 'w', 'e', 32, 0,
  /* 4172 */ 'd', 'i', 'v', 'w', 'e', 32, 0,
  /* 4179 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 32, 0,
  /* 4188 */ 'a', 'd', 'd', 'z', 'e', 32, 0,
  /* 4195 */ 's', 'u', 'b', 'f', 'z', 'e', 32, 0,
  /* 4203 */ 'd', 'c', 'b', 'f', 32, 0,
  /* 4209 */ 's', 'u', 'b', 'f', 32, 0,
  /* 4215 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 32, 0,
  /* 4225 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 32, 0,
  /* 4235 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 32, 0,
  /* 4245 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 32, 0,
  /* 4254 */ 'm', 'c', 'r', 'f', 32, 0,
  /* 4260 */ 'm', 'f', 'o', 'c', 'r', 'f', 32, 0,
  /* 4268 */ 'm', 't', 'o', 'c', 'r', 'f', 32, 0,
  /* 4276 */ 'm', 't', 'c', 'r', 'f', 32, 0,
  /* 4283 */ 'e', 'f', 'd', 'c', 'f', 's', 'f', 32, 0,
  /* 4292 */ 'e', 'f', 's', 'c', 'f', 's', 'f', 32, 0,
  /* 4301 */ 'e', 'v', 'f', 's', 'c', 'f', 's', 'f', 32, 0,
  /* 4311 */ 'm', 't', 'f', 's', 'f', 32, 0,
  /* 4318 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 32, 0,
  /* 4328 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 32, 0,
  /* 4338 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 32, 0,
  /* 4348 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 32, 0,
  /* 4357 */ 'e', 'f', 'd', 'c', 't', 's', 'f', 32, 0,
  /* 4366 */ 'e', 'f', 's', 'c', 't', 's', 'f', 32, 0,
  /* 4375 */ 'e', 'v', 'f', 's', 'c', 't', 's', 'f', 32, 0,
  /* 4385 */ 'e', 'f', 'd', 'c', 'f', 'u', 'f', 32, 0,
  /* 4394 */ 'e', 'f', 's', 'c', 'f', 'u', 'f', 32, 0,
  /* 4403 */ 'e', 'v', 'f', 's', 'c', 'f', 'u', 'f', 32, 0,
  /* 4413 */ 'e', 'f', 'd', 'c', 't', 'u', 'f', 32, 0,
  /* 4422 */ 'e', 'f', 's', 'c', 't', 'u', 'f', 32, 0,
  /* 4431 */ 's', 'l', 'b', 'i', 'e', 'g', 32, 0,
  /* 4439 */ 'e', 'f', 'd', 'n', 'e', 'g', 32, 0,
  /* 4447 */ 'q', 'v', 'f', 'n', 'e', 'g', 32, 0,
  /* 4455 */ 'e', 'f', 's', 'n', 'e', 'g', 32, 0,
  /* 4463 */ 'e', 'v', 'f', 's', 'n', 'e', 'g', 32, 0,
  /* 4472 */ 'e', 'v', 'n', 'e', 'g', 32, 0,
  /* 4479 */ 'v', 's', 'r', 'a', 'h', 32, 0,
  /* 4486 */ 'e', 'v', 'l', 'd', 'h', 32, 0,
  /* 4493 */ 'e', 'v', 's', 't', 'd', 'h', 32, 0,
  /* 4501 */ 'v', 'c', 'm', 'p', 'n', 'e', 'h', 32, 0,
  /* 4510 */ 'v', 'm', 'r', 'g', 'h', 'h', 32, 0,
  /* 4518 */ 'v', 'm', 'r', 'g', 'l', 'h', 32, 0,
  /* 4526 */ 'v', 'r', 'l', 'h', 32, 0,
  /* 4532 */ 'v', 's', 'l', 'h', 32, 0,
  /* 4538 */ 'v', 'p', 'm', 's', 'u', 'm', 'h', 32, 0,
  /* 4547 */ 'x', 'x', 'b', 'r', 'h', 32, 0,
  /* 4554 */ 'v', 's', 'r', 'h', 32, 0,
  /* 4560 */ 'v', 'm', 'u', 'l', 'e', 's', 'h', 32, 0,
  /* 4569 */ 'v', 'a', 'v', 'g', 's', 'h', 32, 0,
  /* 4577 */ 'v', 'u', 'p', 'k', 'h', 's', 'h', 32, 0,
  /* 4586 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'h', 32, 0,
  /* 4596 */ 'v', 'u', 'p', 'k', 'l', 's', 'h', 32, 0,
  /* 4605 */ 'v', 'm', 'i', 'n', 's', 'h', 32, 0,
  /* 4613 */ 'v', 'm', 'u', 'l', 'o', 's', 'h', 32, 0,
  /* 4622 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', 32, 0,
  /* 4632 */ 'e', 'v', 'e', 'x', 't', 's', 'h', 32, 0,
  /* 4641 */ 'v', 'm', 'a', 'x', 's', 'h', 32, 0,
  /* 4649 */ 'v', 's', 'p', 'l', 't', 'h', 32, 0,
  /* 4657 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'h', 32, 0,
  /* 4667 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'h', 32, 0,
  /* 4677 */ 's', 't', 'h', 32, 0,
  /* 4682 */ 'v', 'a', 'b', 's', 'd', 'u', 'h', 32, 0,
  /* 4691 */ 'v', 'm', 'u', 'l', 'e', 'u', 'h', 32, 0,
  /* 4700 */ 'v', 'a', 'v', 'g', 'u', 'h', 32, 0,
  /* 4708 */ 'v', 'm', 'i', 'n', 'u', 'h', 32, 0,
  /* 4716 */ 'v', 'm', 'u', 'l', 'o', 'u', 'h', 32, 0,
  /* 4725 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', 32, 0,
  /* 4735 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'h', 32, 0,
  /* 4747 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', 32, 0,
  /* 4757 */ 'v', 'm', 'a', 'x', 'u', 'h', 32, 0,
  /* 4765 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'h', 32, 0,
  /* 4775 */ 'v', 'c', 'l', 'z', 'h', 32, 0,
  /* 4782 */ 'v', 'c', 't', 'z', 'h', 32, 0,
  /* 4789 */ 'd', 'c', 'b', 'i', 32, 0,
  /* 4795 */ 'i', 'c', 'b', 'i', 32, 0,
  /* 4801 */ 's', 'u', 'b', 'i', 32, 0,
  /* 4807 */ 'd', 'c', 'c', 'c', 'i', 32, 0,
  /* 4814 */ 'i', 'c', 'c', 'c', 'i', 32, 0,
  /* 4821 */ 'q', 'v', 'g', 'p', 'c', 'i', 32, 0,
  /* 4829 */ 's', 'r', 'a', 'd', 'i', 32, 0,
  /* 4836 */ 'a', 'd', 'd', 'i', 32, 0,
  /* 4842 */ 'c', 'm', 'p', 'l', 'd', 'i', 32, 0,
  /* 4850 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', 32, 0,
  /* 4860 */ 'e', 'x', 't', 'l', 'd', 'i', 32, 0,
  /* 4868 */ 'x', 'x', 'p', 'e', 'r', 'm', 'd', 'i', 32, 0,
  /* 4878 */ 'c', 'm', 'p', 'd', 'i', 32, 0,
  /* 4885 */ 'c', 'l', 'r', 'r', 'd', 'i', 32, 0,
  /* 4893 */ 'i', 'n', 's', 'r', 'd', 'i', 32, 0,
  /* 4901 */ 'r', 'o', 't', 'r', 'd', 'i', 32, 0,
  /* 4909 */ 'e', 'x', 't', 'r', 'd', 'i', 32, 0,
  /* 4917 */ 't', 'd', 'i', 32, 0,
  /* 4922 */ 'w', 'r', 't', 'e', 'e', 'i', 32, 0,
  /* 4930 */ 'm', 't', 'f', 's', 'f', 'i', 32, 0,
  /* 4938 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'f', 'i', 32, 0,
  /* 4949 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 32, 0,
  /* 4960 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 'h', 'i', 32, 0,
  /* 4973 */ 't', 'l', 'b', 'l', 'i', 32, 0,
  /* 4980 */ 'm', 'u', 'l', 'l', 'i', 32, 0,
  /* 4987 */ 'e', 'x', 't', 's', 'w', 's', 'l', 'i', 32, 0,
  /* 4997 */ 'v', 'r', 'l', 'd', 'm', 'i', 32, 0,
  /* 5005 */ 'r', 'l', 'd', 'i', 'm', 'i', 32, 0,
  /* 5013 */ 'r', 'l', 'w', 'i', 'm', 'i', 32, 0,
  /* 5021 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 32, 0,
  /* 5031 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 32, 0,
  /* 5041 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 32, 0,
  /* 5051 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 32, 0,
  /* 5060 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 32, 0,
  /* 5070 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 32, 0,
  /* 5080 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 32, 0,
  /* 5090 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 32, 0,
  /* 5100 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 32, 0,
  /* 5109 */ 'v', 'r', 'l', 'w', 'm', 'i', 32, 0,
  /* 5117 */ 'q', 'v', 'a', 'l', 'i', 'g', 'n', 'i', 32, 0,
  /* 5127 */ 'm', 'f', 'f', 's', 'c', 'r', 'n', 'i', 32, 0,
  /* 5137 */ 'm', 'f', 'f', 's', 'c', 'd', 'r', 'n', 'i', 32, 0,
  /* 5148 */ 'v', 's', 'l', 'd', 'o', 'i', 32, 0,
  /* 5156 */ 'x', 's', 'r', 'd', 'p', 'i', 32, 0,
  /* 5164 */ 'x', 'v', 'r', 'd', 'p', 'i', 32, 0,
  /* 5172 */ 'x', 's', 'r', 'q', 'p', 'i', 32, 0,
  /* 5180 */ 'x', 'v', 'r', 's', 'p', 'i', 32, 0,
  /* 5188 */ 'x', 'o', 'r', 'i', 32, 0,
  /* 5194 */ 'e', 'f', 'd', 'c', 'f', 's', 'i', 32, 0,
  /* 5203 */ 'e', 'f', 's', 'c', 'f', 's', 'i', 32, 0,
  /* 5212 */ 'e', 'v', 'f', 's', 'c', 'f', 's', 'i', 32, 0,
  /* 5222 */ 'e', 'f', 'd', 'c', 't', 's', 'i', 32, 0,
  /* 5231 */ 'e', 'f', 's', 'c', 't', 's', 'i', 32, 0,
  /* 5240 */ 'e', 'v', 'f', 's', 'c', 't', 's', 'i', 32, 0,
  /* 5250 */ 'q', 'v', 'e', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 5261 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 5271 */ 'e', 'f', 'd', 'c', 'f', 'u', 'i', 32, 0,
  /* 5280 */ 'e', 'f', 's', 'c', 'f', 'u', 'i', 32, 0,
  /* 5289 */ 'e', 'v', 'f', 's', 'c', 'f', 'u', 'i', 32, 0,
  /* 5299 */ 'e', 'f', 'd', 'c', 't', 'u', 'i', 32, 0,
  /* 5308 */ 'e', 'f', 's', 'c', 't', 'u', 'i', 32, 0,
  /* 5317 */ 'e', 'v', 'f', 's', 'c', 't', 'u', 'i', 32, 0,
  /* 5327 */ 's', 'r', 'a', 'w', 'i', 32, 0,
  /* 5334 */ 'x', 'x', 's', 'l', 'd', 'w', 'i', 32, 0,
  /* 5343 */ 'c', 'm', 'p', 'l', 'w', 'i', 32, 0,
  /* 5351 */ 'e', 'v', 'r', 'l', 'w', 'i', 32, 0,
  /* 5359 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', 32, 0,
  /* 5369 */ 'i', 'n', 's', 'l', 'w', 'i', 32, 0,
  /* 5377 */ 'e', 'v', 's', 'l', 'w', 'i', 32, 0,
  /* 5385 */ 'e', 'x', 't', 'l', 'w', 'i', 32, 0,
  /* 5393 */ 'c', 'm', 'p', 'w', 'i', 32, 0,
  /* 5400 */ 'c', 'l', 'r', 'r', 'w', 'i', 32, 0,
  /* 5408 */ 'i', 'n', 's', 'r', 'w', 'i', 32, 0,
  /* 5416 */ 'r', 'o', 't', 'r', 'w', 'i', 32, 0,
  /* 5424 */ 'e', 'x', 't', 'r', 'w', 'i', 32, 0,
  /* 5432 */ 'l', 's', 'w', 'i', 32, 0,
  /* 5438 */ 's', 't', 's', 'w', 'i', 32, 0,
  /* 5445 */ 't', 'w', 'i', 32, 0,
  /* 5450 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 32, 0,
  /* 5461 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 32, 0,
  /* 5471 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 32, 0,
  /* 5482 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 32, 0,
  /* 5492 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 32, 0,
  /* 5504 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 32, 0,
  /* 5515 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 32, 0,
  /* 5527 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 32, 0,
  /* 5538 */ 't', 'c', 'h', 'e', 'c', 'k', 32, 0,
  /* 5546 */ 'q', 'v', 'f', 'l', 'o', 'g', 'i', 'c', 'a', 'l', 32, 0,
  /* 5558 */ 'b', 'l', 32, 0,
  /* 5562 */ 'b', 'c', 'l', 32, 0,
  /* 5567 */ 'r', 'l', 'd', 'c', 'l', 32, 0,
  /* 5574 */ 'r', 'l', 'd', 'i', 'c', 'l', 32, 0,
  /* 5582 */ 't', 'l', 'b', 'i', 'e', 'l', 32, 0,
  /* 5590 */ 'q', 'v', 'f', 's', 'e', 'l', 32, 0,
  /* 5598 */ 'i', 's', 'e', 'l', 32, 0,
  /* 5604 */ 'v', 's', 'e', 'l', 32, 0,
  /* 5610 */ 'x', 'x', 's', 'e', 'l', 32, 0,
  /* 5617 */ 'd', 'c', 'b', 'f', 'l', 32, 0,
  /* 5624 */ 'l', 'x', 'v', 'l', 'l', 32, 0,
  /* 5631 */ 's', 't', 'x', 'v', 'l', 'l', 32, 0,
  /* 5639 */ 'b', 'c', 'l', 'r', 'l', 32, 0,
  /* 5646 */ 'b', 'c', 'c', 't', 'r', 'l', 32, 0,
  /* 5654 */ 'm', 'f', 'f', 's', 'l', 32, 0,
  /* 5661 */ 'l', 'v', 's', 'l', 32, 0,
  /* 5667 */ 'e', 'f', 'd', 'm', 'u', 'l', 32, 0,
  /* 5675 */ 'q', 'v', 'f', 'm', 'u', 'l', 32, 0,
  /* 5683 */ 'e', 'f', 's', 'm', 'u', 'l', 32, 0,
  /* 5691 */ 'e', 'v', 'f', 's', 'm', 'u', 'l', 32, 0,
  /* 5700 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 32, 0,
  /* 5709 */ 'l', 'x', 'v', 'l', 32, 0,
  /* 5715 */ 's', 't', 'x', 'v', 'l', 32, 0,
  /* 5722 */ 'l', 'v', 'x', 'l', 32, 0,
  /* 5728 */ 's', 't', 'v', 'x', 'l', 32, 0,
  /* 5735 */ 'd', 'c', 'b', 'z', 'l', 32, 0,
  /* 5742 */ 'b', 'd', 'z', 'l', 32, 0,
  /* 5748 */ 'b', 'd', 'n', 'z', 'l', 32, 0,
  /* 5755 */ 'v', 'm', 's', 'u', 'm', 'm', 'b', 'm', 32, 0,
  /* 5765 */ 'v', 's', 'u', 'b', 'u', 'b', 'm', 32, 0,
  /* 5774 */ 'v', 'a', 'd', 'd', 'u', 'b', 'm', 32, 0,
  /* 5783 */ 'v', 'm', 's', 'u', 'm', 'u', 'b', 'm', 32, 0,
  /* 5793 */ 'v', 's', 'u', 'b', 'u', 'd', 'm', 32, 0,
  /* 5802 */ 'v', 'a', 'd', 'd', 'u', 'd', 'm', 32, 0,
  /* 5811 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 'm', 32, 0,
  /* 5821 */ 'v', 's', 'u', 'b', 'u', 'h', 'm', 32, 0,
  /* 5830 */ 'v', 'm', 'l', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 5841 */ 'v', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 5850 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 'm', 32, 0,
  /* 5860 */ 'v', 'r', 'f', 'i', 'm', 32, 0,
  /* 5867 */ 'x', 's', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 5876 */ 'x', 'v', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 5885 */ 'x', 'v', 'r', 's', 'p', 'i', 'm', 32, 0,
  /* 5894 */ 'q', 'v', 'f', 'r', 'i', 'm', 32, 0,
  /* 5902 */ 'v', 'r', 'l', 'd', 'n', 'm', 32, 0,
  /* 5910 */ 'r', 'l', 'w', 'i', 'n', 'm', 32, 0,
  /* 5918 */ 'v', 'r', 'l', 'w', 'n', 'm', 32, 0,
  /* 5926 */ 'v', 's', 'u', 'b', 'u', 'q', 'm', 32, 0,
  /* 5935 */ 'v', 'a', 'd', 'd', 'u', 'q', 'm', 32, 0,
  /* 5944 */ 'v', 's', 'u', 'b', 'e', 'u', 'q', 'm', 32, 0,
  /* 5954 */ 'v', 'a', 'd', 'd', 'e', 'u', 'q', 'm', 32, 0,
  /* 5964 */ 'q', 'v', 'f', 'p', 'e', 'r', 'm', 32, 0,
  /* 5973 */ 'v', 'p', 'e', 'r', 'm', 32, 0,
  /* 5980 */ 'x', 'x', 'p', 'e', 'r', 'm', 32, 0,
  /* 5988 */ 'v', 'p', 'k', 'u', 'd', 'u', 'm', 32, 0,
  /* 5997 */ 'v', 'p', 'k', 'u', 'h', 'u', 'm', 32, 0,
  /* 6006 */ 'v', 'p', 'k', 'u', 'w', 'u', 'm', 32, 0,
  /* 6015 */ 'v', 's', 'u', 'b', 'u', 'w', 'm', 32, 0,
  /* 6024 */ 'v', 'a', 'd', 'd', 'u', 'w', 'm', 32, 0,
  /* 6033 */ 'v', 'm', 'u', 'l', 'u', 'w', 'm', 32, 0,
  /* 6042 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 6055 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 6068 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 6079 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'n', 32, 0,
  /* 6090 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 6103 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 6116 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 6127 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 6140 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 6153 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 6164 */ 'q', 'v', 'f', 't', 's', 't', 'n', 'a', 'n', 32, 0,
  /* 6175 */ 'q', 'v', 'f', 'c', 'p', 's', 'g', 'n', 32, 0,
  /* 6185 */ 'v', 'r', 'f', 'i', 'n', 32, 0,
  /* 6192 */ 'q', 'v', 'f', 'r', 'i', 'n', 32, 0,
  /* 6200 */ 'm', 'f', 's', 'r', 'i', 'n', 32, 0,
  /* 6208 */ 'm', 't', 's', 'r', 'i', 'n', 32, 0,
  /* 6216 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 'n', 32, 0,
  /* 6227 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 'n', 32, 0,
  /* 6238 */ 'd', 'a', 'r', 'n', 32, 0,
  /* 6244 */ 'm', 'f', 'f', 's', 'c', 'r', 'n', 32, 0,
  /* 6253 */ 'm', 'f', 'f', 's', 'c', 'd', 'r', 'n', 32, 0,
  /* 6263 */ 'a', 'd', 'd', 'c', 'o', 32, 0,
  /* 6270 */ 's', 'u', 'b', 'f', 'c', 'o', 32, 0,
  /* 6278 */ 'a', 'd', 'd', 'o', 32, 0,
  /* 6284 */ 'm', 'u', 'l', 'l', 'd', 'o', 32, 0,
  /* 6292 */ 'd', 'i', 'v', 'd', 'o', 32, 0,
  /* 6299 */ 'a', 'd', 'd', 'e', 'o', 32, 0,
  /* 6306 */ 'd', 'i', 'v', 'd', 'e', 'o', 32, 0,
  /* 6314 */ 's', 'u', 'b', 'f', 'e', 'o', 32, 0,
  /* 6322 */ 'a', 'd', 'd', 'm', 'e', 'o', 32, 0,
  /* 6330 */ 's', 'u', 'b', 'f', 'm', 'e', 'o', 32, 0,
  /* 6339 */ 'd', 'i', 'v', 'w', 'e', 'o', 32, 0,
  /* 6347 */ 'a', 'd', 'd', 'z', 'e', 'o', 32, 0,
  /* 6355 */ 's', 'u', 'b', 'f', 'z', 'e', 'o', 32, 0,
  /* 6364 */ 's', 'u', 'b', 'f', 'o', 32, 0,
  /* 6371 */ 'n', 'e', 'g', 'o', 32, 0,
  /* 6377 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 32, 0,
  /* 6386 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 32, 0,
  /* 6397 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 'l', 'o', 32, 0,
  /* 6410 */ 'v', 's', 'l', 'o', 32, 0,
  /* 6416 */ 'x', 's', 'c', 'v', 'q', 'p', 'd', 'p', 'o', 32, 0,
  /* 6427 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 6439 */ 'x', 's', 'm', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 6450 */ 'x', 's', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 6460 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 6472 */ 'x', 's', 'm', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 6483 */ 'x', 's', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 6493 */ 'x', 's', 'm', 'u', 'l', 'q', 'p', 'o', 32, 0,
  /* 6503 */ 'x', 's', 's', 'q', 'r', 't', 'q', 'p', 'o', 32, 0,
  /* 6514 */ 'x', 's', 'd', 'i', 'v', 'q', 'p', 'o', 32, 0,
  /* 6524 */ 'v', 's', 'r', 'o', 32, 0,
  /* 6530 */ 'd', 'i', 'v', 'd', 'u', 'o', 32, 0,
  /* 6538 */ 'd', 'i', 'v', 'd', 'e', 'u', 'o', 32, 0,
  /* 6547 */ 'd', 'i', 'v', 'w', 'e', 'u', 'o', 32, 0,
  /* 6556 */ 'd', 'i', 'v', 'w', 'u', 'o', 32, 0,
  /* 6564 */ 'm', 'u', 'l', 'l', 'w', 'o', 32, 0,
  /* 6572 */ 'd', 'i', 'v', 'w', 'o', 32, 0,
  /* 6579 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 32, 0,
  /* 6588 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 6600 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 6612 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 6623 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 6634 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 6646 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 6658 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 6669 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 6680 */ 'x', 's', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 6689 */ 'x', 'v', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 6698 */ 'x', 's', 't', 's', 't', 'd', 'c', 'd', 'p', 32, 0,
  /* 6709 */ 'x', 'v', 't', 's', 't', 'd', 'c', 'd', 'p', 32, 0,
  /* 6720 */ 'x', 's', 'm', 'i', 'n', 'c', 'd', 'p', 32, 0,
  /* 6730 */ 'x', 's', 'm', 'a', 'x', 'c', 'd', 'p', 32, 0,
  /* 6740 */ 'x', 's', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 6749 */ 'x', 'v', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 6758 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 6769 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 6780 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 6791 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 6802 */ 'x', 's', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 6813 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 6824 */ 'x', 's', 'r', 'e', 'd', 'p', 32, 0,
  /* 6832 */ 'x', 'v', 'r', 'e', 'd', 'p', 32, 0,
  /* 6840 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 6852 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 6864 */ 'x', 's', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 6873 */ 'x', 'v', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 6882 */ 'x', 's', 'x', 's', 'i', 'g', 'd', 'p', 32, 0,
  /* 6892 */ 'x', 'v', 'x', 's', 'i', 'g', 'd', 'p', 32, 0,
  /* 6902 */ 'x', 's', 'm', 'i', 'n', 'j', 'd', 'p', 32, 0,
  /* 6912 */ 'x', 's', 'm', 'a', 'x', 'j', 'd', 'p', 32, 0,
  /* 6922 */ 'x', 's', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 6931 */ 'x', 'v', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 6940 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6952 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6964 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6975 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6986 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6998 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 7010 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 7021 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 7032 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 7043 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 7054 */ 'x', 's', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 7063 */ 'x', 'v', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 7072 */ 'x', 's', 'c', 'm', 'p', 'o', 'd', 'p', 32, 0,
  /* 7082 */ 'x', 's', 'c', 'v', 'h', 'p', 'd', 'p', 32, 0,
  /* 7092 */ 'x', 's', 'c', 'v', 'q', 'p', 'd', 'p', 32, 0,
  /* 7102 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 7112 */ 'x', 'v', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 7122 */ 'x', 's', 'i', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 7132 */ 'x', 'v', 'i', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 7142 */ 'x', 's', 'c', 'm', 'p', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 7154 */ 'x', 's', 'x', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 7164 */ 'x', 'v', 'x', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 7174 */ 'x', 's', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 7185 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 7196 */ 'x', 's', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 7206 */ 'x', 'v', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 7216 */ 'x', 's', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 7225 */ 'x', 'v', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 7234 */ 'x', 's', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 7245 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 7256 */ 'x', 's', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 7266 */ 'x', 's', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 7277 */ 'x', 'v', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 7288 */ 'x', 'v', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 7298 */ 'x', 's', 'c', 'm', 'p', 'u', 'd', 'p', 32, 0,
  /* 7308 */ 'x', 's', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 7317 */ 'x', 's', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 7327 */ 'x', 'v', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 7337 */ 'x', 'v', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 7346 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 'd', 'p', 32, 0,
  /* 7357 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 'd', 'p', 32, 0,
  /* 7368 */ 'x', 's', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 7377 */ 'x', 'v', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 7386 */ 'd', 'c', 'b', 'f', 'e', 'p', 32, 0,
  /* 7394 */ 'i', 'c', 'b', 'i', 'e', 'p', 32, 0,
  /* 7402 */ 'd', 'c', 'b', 'z', 'l', 'e', 'p', 32, 0,
  /* 7411 */ 'd', 'c', 'b', 't', 'e', 'p', 32, 0,
  /* 7419 */ 'd', 'c', 'b', 's', 't', 'e', 'p', 32, 0,
  /* 7428 */ 'd', 'c', 'b', 't', 's', 't', 'e', 'p', 32, 0,
  /* 7438 */ 'd', 'c', 'b', 'z', 'e', 'p', 32, 0,
  /* 7446 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', 32, 0,
  /* 7455 */ 'v', 'n', 'm', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 7465 */ 'v', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 7473 */ 'v', 'm', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 7482 */ 'v', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 7490 */ 'v', 'l', 'o', 'g', 'e', 'f', 'p', 32, 0,
  /* 7499 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', 32, 0,
  /* 7509 */ 'v', 'r', 'e', 'f', 'p', 32, 0,
  /* 7516 */ 'v', 'e', 'x', 'p', 't', 'e', 'f', 'p', 32, 0,
  /* 7526 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 'f', 'p', 32, 0,
  /* 7537 */ 'v', 'm', 'i', 'n', 'f', 'p', 32, 0,
  /* 7545 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', 32, 0,
  /* 7555 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', 32, 0,
  /* 7565 */ 'v', 'm', 'a', 'x', 'f', 'p', 32, 0,
  /* 7573 */ 'x', 's', 'c', 'v', 'd', 'p', 'h', 'p', 32, 0,
  /* 7583 */ 'x', 'v', 'c', 'v', 's', 'p', 'h', 'p', 32, 0,
  /* 7593 */ 'v', 'r', 'f', 'i', 'p', 32, 0,
  /* 7600 */ 'x', 's', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 7609 */ 'x', 'v', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 7618 */ 'x', 'v', 'r', 's', 'p', 'i', 'p', 32, 0,
  /* 7627 */ 'q', 'v', 'f', 'r', 'i', 'p', 32, 0,
  /* 7635 */ 'd', 'c', 'b', 'f', 'l', 'p', 32, 0,
  /* 7643 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 7654 */ 'x', 's', 'm', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 7664 */ 'x', 's', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 7673 */ 'x', 's', 't', 's', 't', 'd', 'c', 'q', 'p', 32, 0,
  /* 7684 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 7695 */ 'x', 's', 'm', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 7705 */ 'x', 's', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 7714 */ 'x', 's', 'c', 'v', 's', 'd', 'q', 'p', 32, 0,
  /* 7724 */ 'x', 's', 'c', 'v', 'u', 'd', 'q', 'p', 32, 0,
  /* 7734 */ 'x', 's', 'n', 'e', 'g', 'q', 'p', 32, 0,
  /* 7743 */ 'x', 's', 'x', 's', 'i', 'g', 'q', 'p', 32, 0,
  /* 7753 */ 'x', 's', 'm', 'u', 'l', 'q', 'p', 32, 0,
  /* 7762 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'q', 'p', 32, 0,
  /* 7773 */ 'x', 's', 'c', 'm', 'p', 'o', 'q', 'p', 32, 0,
  /* 7783 */ 'x', 's', 'c', 'v', 'd', 'p', 'q', 'p', 32, 0,
  /* 7793 */ 'x', 's', 'i', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 7803 */ 'x', 's', 'c', 'm', 'p', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 7815 */ 'x', 's', 'x', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 7825 */ 'x', 's', 'n', 'a', 'b', 's', 'q', 'p', 32, 0,
  /* 7835 */ 'x', 's', 'a', 'b', 's', 'q', 'p', 32, 0,
  /* 7844 */ 'x', 's', 's', 'q', 'r', 't', 'q', 'p', 32, 0,
  /* 7854 */ 'x', 's', 'c', 'm', 'p', 'u', 'q', 'p', 32, 0,
  /* 7864 */ 'x', 's', 'd', 'i', 'v', 'q', 'p', 32, 0,
  /* 7873 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7885 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7897 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7908 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7919 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7931 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7943 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7954 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7965 */ 'x', 's', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 7974 */ 'x', 'v', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 7983 */ 'x', 's', 't', 's', 't', 'd', 'c', 's', 'p', 32, 0,
  /* 7994 */ 'x', 'v', 't', 's', 't', 'd', 'c', 's', 'p', 32, 0,
  /* 8005 */ 'x', 's', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 8014 */ 'x', 'v', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 8023 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 8034 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 8045 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 8056 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 8067 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', 32, 0,
  /* 8078 */ 'x', 's', 'r', 'e', 's', 'p', 32, 0,
  /* 8086 */ 'x', 'v', 'r', 'e', 's', 'p', 32, 0,
  /* 8094 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 8106 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 8118 */ 'x', 'v', 'n', 'e', 'g', 's', 'p', 32, 0,
  /* 8127 */ 'x', 'v', 'x', 's', 'i', 'g', 's', 'p', 32, 0,
  /* 8137 */ 'x', 's', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 8146 */ 'x', 'v', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 8155 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 8167 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 8179 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 8190 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 8201 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 8213 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 8225 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 8236 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 8247 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 's', 'p', 32, 0,
  /* 8258 */ 'x', 'v', 'm', 'i', 'n', 's', 'p', 32, 0,
  /* 8267 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 8277 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 8287 */ 'x', 'v', 'c', 'v', 'h', 'p', 's', 'p', 32, 0,
  /* 8297 */ 'x', 'v', 'i', 'e', 'x', 'p', 's', 'p', 32, 0,
  /* 8307 */ 'x', 'v', 'x', 'e', 'x', 'p', 's', 'p', 32, 0,
  /* 8317 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', 32, 0,
  /* 8328 */ 'q', 'v', 'f', 'r', 's', 'p', 32, 0,
  /* 8336 */ 'x', 's', 'r', 's', 'p', 32, 0,
  /* 8343 */ 'x', 'v', 'n', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 8353 */ 'x', 'v', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 8362 */ 'l', 'x', 's', 's', 'p', 32, 0,
  /* 8369 */ 's', 't', 'x', 's', 's', 'p', 32, 0,
  /* 8377 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', 32, 0,
  /* 8388 */ 'x', 's', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 8398 */ 'x', 'v', 't', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 8409 */ 'x', 'v', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 8419 */ 'x', 's', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 8428 */ 'x', 'v', 't', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 8438 */ 'x', 'v', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 8447 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 's', 'p', 32, 0,
  /* 8458 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 's', 'p', 32, 0,
  /* 8469 */ 'x', 'v', 'm', 'a', 'x', 's', 'p', 32, 0,
  /* 8478 */ 'x', 's', 'r', 'q', 'p', 'x', 'p', 32, 0,
  /* 8487 */ 'v', 'p', 'r', 't', 'y', 'b', 'q', 32, 0,
  /* 8496 */ 'e', 'f', 'd', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8506 */ 'q', 'v', 'f', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8516 */ 'e', 'f', 's', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8526 */ 'e', 'v', 'f', 's', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8537 */ 'e', 'v', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8546 */ 'e', 'f', 'd', 't', 's', 't', 'e', 'q', 32, 0,
  /* 8556 */ 'e', 'f', 's', 't', 's', 't', 'e', 'q', 32, 0,
  /* 8566 */ 'e', 'v', 'f', 's', 't', 's', 't', 'e', 'q', 32, 0,
  /* 8577 */ 'v', 'b', 'p', 'e', 'r', 'm', 'q', 32, 0,
  /* 8586 */ 'x', 'x', 'b', 'r', 'q', 32, 0,
  /* 8593 */ 'v', 'm', 'u', 'l', '1', '0', 'u', 'q', 32, 0,
  /* 8603 */ 'v', 'm', 'u', 'l', '1', '0', 'c', 'u', 'q', 32, 0,
  /* 8614 */ 'v', 's', 'u', 'b', 'c', 'u', 'q', 32, 0,
  /* 8623 */ 'v', 'a', 'd', 'd', 'c', 'u', 'q', 32, 0,
  /* 8632 */ 'v', 'm', 'u', 'l', '1', '0', 'e', 'c', 'u', 'q', 32, 0,
  /* 8644 */ 'v', 's', 'u', 'b', 'e', 'c', 'u', 'q', 32, 0,
  /* 8654 */ 'v', 'a', 'd', 'd', 'e', 'c', 'u', 'q', 32, 0,
  /* 8664 */ 'v', 'm', 'u', 'l', '1', '0', 'e', 'u', 'q', 32, 0,
  /* 8675 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 32, 0,
  /* 8688 */ 'm', 'b', 'a', 'r', 32, 0,
  /* 8694 */ 'm', 'f', 'd', 'c', 'r', 32, 0,
  /* 8701 */ 'r', 'l', 'd', 'c', 'r', 32, 0,
  /* 8708 */ 'm', 't', 'd', 'c', 'r', 32, 0,
  /* 8715 */ 'm', 'f', 'c', 'r', 32, 0,
  /* 8721 */ 'r', 'l', 'd', 'i', 'c', 'r', 32, 0,
  /* 8729 */ 'm', 'f', 'v', 's', 'c', 'r', 32, 0,
  /* 8737 */ 'm', 't', 'v', 's', 'c', 'r', 32, 0,
  /* 8745 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 8755 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 8764 */ 'b', 'c', 'l', 'r', 32, 0,
  /* 8770 */ 'm', 'f', 'l', 'r', 32, 0,
  /* 8776 */ 'm', 't', 'l', 'r', 32, 0,
  /* 8782 */ 'q', 'v', 'f', 'm', 'r', 32, 0,
  /* 8789 */ 'm', 'f', 'p', 'm', 'r', 32, 0,
  /* 8796 */ 'm', 't', 'p', 'm', 'r', 32, 0,
  /* 8803 */ 'v', 'p', 'e', 'r', 'm', 'r', 32, 0,
  /* 8811 */ 'x', 'x', 'p', 'e', 'r', 'm', 'r', 32, 0,
  /* 8820 */ 'x', 'x', 'l', 'o', 'r', 32, 0,
  /* 8827 */ 'x', 'x', 'l', 'n', 'o', 'r', 32, 0,
  /* 8835 */ 'c', 'r', 'n', 'o', 'r', 32, 0,
  /* 8842 */ 'e', 'v', 'n', 'o', 'r', 32, 0,
  /* 8849 */ 'c', 'r', 'o', 'r', 32, 0,
  /* 8855 */ 'e', 'v', 'o', 'r', 32, 0,
  /* 8861 */ 'x', 'x', 'l', 'x', 'o', 'r', 32, 0,
  /* 8869 */ 'v', 'p', 'e', 'r', 'm', 'x', 'o', 'r', 32, 0,
  /* 8879 */ 'c', 'r', 'x', 'o', 'r', 32, 0,
  /* 8886 */ 'e', 'v', 'x', 'o', 'r', 32, 0,
  /* 8893 */ 'm', 'f', 's', 'p', 'r', 32, 0,
  /* 8900 */ 'm', 't', 's', 'p', 'r', 32, 0,
  /* 8907 */ 'm', 'f', 's', 'r', 32, 0,
  /* 8913 */ 'm', 'f', 'm', 's', 'r', 32, 0,
  /* 8920 */ 'm', 't', 'm', 's', 'r', 32, 0,
  /* 8927 */ 'm', 't', 's', 'r', 32, 0,
  /* 8933 */ 'l', 'v', 's', 'r', 32, 0,
  /* 8939 */ 'b', 'c', 'c', 't', 'r', 32, 0,
  /* 8946 */ 'm', 'f', 'c', 't', 'r', 32, 0,
  /* 8953 */ 'm', 't', 'c', 't', 'r', 32, 0,
  /* 8960 */ 'e', 'f', 'd', 'a', 'b', 's', 32, 0,
  /* 8968 */ 'q', 'v', 'f', 'a', 'b', 's', 32, 0,
  /* 8976 */ 'e', 'f', 'd', 'n', 'a', 'b', 's', 32, 0,
  /* 8985 */ 'q', 'v', 'f', 'n', 'a', 'b', 's', 32, 0,
  /* 8994 */ 'e', 'f', 's', 'n', 'a', 'b', 's', 32, 0,
  /* 9003 */ 'e', 'v', 'f', 's', 'n', 'a', 'b', 's', 32, 0,
  /* 9013 */ 'e', 'f', 's', 'a', 'b', 's', 32, 0,
  /* 9021 */ 'e', 'v', 'f', 's', 'a', 'b', 's', 32, 0,
  /* 9030 */ 'e', 'v', 'a', 'b', 's', 32, 0,
  /* 9037 */ 'v', 's', 'u', 'm', '4', 's', 'b', 's', 32, 0,
  /* 9047 */ 'v', 's', 'u', 'b', 's', 'b', 's', 32, 0,
  /* 9056 */ 'v', 'a', 'd', 'd', 's', 'b', 's', 32, 0,
  /* 9065 */ 'v', 's', 'u', 'm', '4', 'u', 'b', 's', 32, 0,
  /* 9075 */ 'v', 's', 'u', 'b', 'u', 'b', 's', 32, 0,
  /* 9084 */ 'v', 'a', 'd', 'd', 'u', 'b', 's', 32, 0,
  /* 9093 */ 'q', 'v', 'f', 's', 'u', 'b', 's', 32, 0,
  /* 9102 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 9112 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 9123 */ 'q', 'v', 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 9132 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 9142 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 9153 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 9168 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 9182 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 9193 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 9205 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 's', 32, 0,
  /* 9215 */ 'd', 'c', 'b', 't', 'd', 's', 32, 0,
  /* 9223 */ 'd', 'c', 'b', 't', 's', 't', 'd', 's', 32, 0,
  /* 9233 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 9245 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 9257 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 9269 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 9281 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 9293 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 9305 */ 'q', 'v', 'f', 'r', 'e', 's', 32, 0,
  /* 9313 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 's', 32, 0,
  /* 9325 */ 'e', 'f', 'd', 'c', 'f', 's', 32, 0,
  /* 9333 */ 'm', 'f', 'f', 's', 32, 0,
  /* 9339 */ 'l', 'f', 's', 32, 0,
  /* 9344 */ 'm', 'c', 'r', 'f', 's', 32, 0,
  /* 9351 */ 's', 't', 'f', 's', 32, 0,
  /* 9357 */ 'v', 's', 'u', 'm', '4', 's', 'h', 's', 32, 0,
  /* 9367 */ 'v', 's', 'u', 'b', 's', 'h', 's', 32, 0,
  /* 9376 */ 'v', 'm', 'h', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 9387 */ 'v', 'm', 'h', 'r', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 9399 */ 'v', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 9408 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 's', 32, 0,
  /* 9418 */ 'v', 's', 'u', 'b', 'u', 'h', 's', 32, 0,
  /* 9427 */ 'v', 'a', 'd', 'd', 'u', 'h', 's', 32, 0,
  /* 9436 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 's', 32, 0,
  /* 9446 */ 's', 'u', 'b', 'i', 's', 32, 0,
  /* 9453 */ 's', 'u', 'b', 'p', 'c', 'i', 's', 32, 0,
  /* 9462 */ 'a', 'd', 'd', 'p', 'c', 'i', 's', 32, 0,
  /* 9471 */ 'a', 'd', 'd', 'i', 's', 32, 0,
  /* 9478 */ 'l', 'i', 's', 32, 0,
  /* 9483 */ 'x', 'o', 'r', 'i', 's', 32, 0,
  /* 9490 */ 'e', 'v', 's', 'r', 'w', 'i', 's', 32, 0,
  /* 9499 */ 'i', 'c', 'b', 't', 'l', 's', 32, 0,
  /* 9507 */ 'q', 'v', 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 9516 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 's', 32, 0,
  /* 9526 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 32, 0,
  /* 9535 */ 'v', 'p', 'k', 's', 'd', 's', 's', 32, 0,
  /* 9544 */ 'v', 'p', 'k', 's', 'h', 's', 's', 32, 0,
  /* 9553 */ 'v', 'p', 'k', 's', 'w', 's', 's', 32, 0,
  /* 9562 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 's', 32, 0,
  /* 9572 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 's', 32, 0,
  /* 9582 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 9590 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 's', 32, 0,
  /* 9601 */ 'v', 'p', 'k', 's', 'd', 'u', 's', 32, 0,
  /* 9610 */ 'v', 'p', 'k', 'u', 'd', 'u', 's', 32, 0,
  /* 9619 */ 'v', 'p', 'k', 's', 'h', 'u', 's', 32, 0,
  /* 9628 */ 'v', 'p', 'k', 'u', 'h', 'u', 's', 32, 0,
  /* 9637 */ 'v', 'p', 'k', 's', 'w', 'u', 's', 32, 0,
  /* 9646 */ 'v', 'p', 'k', 'u', 'w', 'u', 's', 32, 0,
  /* 9655 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 9662 */ 'e', 'v', 's', 'r', 'w', 's', 32, 0,
  /* 9670 */ 'm', 't', 'v', 's', 'r', 'w', 's', 32, 0,
  /* 9679 */ 'v', 's', 'u', 'm', '2', 's', 'w', 's', 32, 0,
  /* 9689 */ 'v', 's', 'u', 'b', 's', 'w', 's', 32, 0,
  /* 9698 */ 'v', 'a', 'd', 'd', 's', 'w', 's', 32, 0,
  /* 9707 */ 'v', 's', 'u', 'm', 's', 'w', 's', 32, 0,
  /* 9716 */ 'v', 's', 'u', 'b', 'u', 'w', 's', 32, 0,
  /* 9725 */ 'v', 'a', 'd', 'd', 'u', 'w', 's', 32, 0,
  /* 9734 */ 'e', 'v', 'd', 'i', 'v', 'w', 's', 32, 0,
  /* 9743 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 9755 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 9767 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 9779 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 9791 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 9803 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 9815 */ 'v', 'c', 't', 's', 'x', 's', 32, 0,
  /* 9823 */ 'v', 'c', 't', 'u', 'x', 's', 32, 0,
  /* 9831 */ 'l', 'd', 'a', 't', 32, 0,
  /* 9837 */ 's', 't', 'd', 'a', 't', 32, 0,
  /* 9844 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 9857 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 9869 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 9883 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 9897 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 9909 */ 'l', 'w', 'a', 't', 32, 0,
  /* 9915 */ 's', 't', 'w', 'a', 't', 32, 0,
  /* 9922 */ 'd', 'c', 'b', 't', 32, 0,
  /* 9928 */ 'i', 'c', 'b', 't', 32, 0,
  /* 9934 */ 'd', 'c', 'b', 't', 'c', 't', 32, 0,
  /* 9942 */ 'd', 'c', 'b', 't', 's', 't', 'c', 't', 32, 0,
  /* 9952 */ 'e', 'f', 'd', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 9962 */ 'q', 'v', 'f', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 9972 */ 'e', 'f', 's', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 9982 */ 'e', 'v', 'f', 's', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 9993 */ 'e', 'f', 'd', 't', 's', 't', 'g', 't', 32, 0,
  /* 10003 */ 'e', 'f', 's', 't', 's', 't', 'g', 't', 32, 0,
  /* 10013 */ 'e', 'v', 'f', 's', 't', 's', 't', 'g', 't', 32, 0,
  /* 10024 */ 'w', 'a', 'i', 't', 32, 0,
  /* 10030 */ 'e', 'f', 'd', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 10040 */ 'q', 'v', 'f', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 10050 */ 'e', 'f', 's', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 10060 */ 'e', 'v', 'f', 's', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 10071 */ 'e', 'f', 'd', 't', 's', 't', 'l', 't', 32, 0,
  /* 10081 */ 'e', 'f', 's', 't', 's', 't', 'l', 't', 32, 0,
  /* 10091 */ 'e', 'v', 'f', 's', 't', 's', 't', 'l', 't', 32, 0,
  /* 10102 */ 'f', 's', 'q', 'r', 't', 32, 0,
  /* 10109 */ 'f', 't', 's', 'q', 'r', 't', 32, 0,
  /* 10117 */ 'p', 'a', 's', 't', 'e', '_', 'l', 'a', 's', 't', 32, 0,
  /* 10129 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 10143 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 10156 */ 'd', 'c', 'b', 's', 't', 32, 0,
  /* 10163 */ 'd', 's', 't', 32, 0,
  /* 10168 */ 'c', 'o', 'p', 'y', '_', 'f', 'i', 'r', 's', 't', 32, 0,
  /* 10180 */ 'd', 'c', 'b', 't', 's', 't', 32, 0,
  /* 10188 */ 'd', 's', 't', 's', 't', 32, 0,
  /* 10195 */ 'd', 'c', 'b', 't', 't', 32, 0,
  /* 10202 */ 'd', 's', 't', 't', 32, 0,
  /* 10208 */ 'd', 'c', 'b', 't', 's', 't', 't', 32, 0,
  /* 10217 */ 'd', 's', 't', 's', 't', 't', 32, 0,
  /* 10225 */ 'l', 'h', 'a', 'u', 32, 0,
  /* 10231 */ 's', 't', 'b', 'u', 32, 0,
  /* 10237 */ 'l', 'f', 'd', 'u', 32, 0,
  /* 10243 */ 's', 't', 'f', 'd', 'u', 32, 0,
  /* 10250 */ 'm', 'a', 'd', 'd', 'h', 'd', 'u', 32, 0,
  /* 10259 */ 'm', 'u', 'l', 'h', 'd', 'u', 32, 0,
  /* 10267 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 32, 0,
  /* 10277 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 32, 0,
  /* 10287 */ 'l', 'd', 'u', 32, 0,
  /* 10292 */ 's', 't', 'd', 'u', 32, 0,
  /* 10298 */ 'd', 'i', 'v', 'd', 'u', 32, 0,
  /* 10305 */ 'd', 'i', 'v', 'd', 'e', 'u', 32, 0,
  /* 10313 */ 'd', 'i', 'v', 'w', 'e', 'u', 32, 0,
  /* 10321 */ 's', 't', 'h', 'u', 32, 0,
  /* 10327 */ 'e', 'v', 's', 'r', 'w', 'i', 'u', 32, 0,
  /* 10336 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 32, 0,
  /* 10345 */ 'f', 'c', 'm', 'p', 'u', 32, 0,
  /* 10352 */ 'l', 'f', 's', 'u', 32, 0,
  /* 10358 */ 's', 't', 'f', 's', 'u', 32, 0,
  /* 10365 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 'u', 32, 0,
  /* 10375 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 'u', 32, 0,
  /* 10385 */ 'm', 'u', 'l', 'h', 'w', 'u', 32, 0,
  /* 10393 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 32, 0,
  /* 10403 */ 'e', 'v', 's', 'r', 'w', 'u', 32, 0,
  /* 10411 */ 's', 't', 'w', 'u', 32, 0,
  /* 10417 */ 'e', 'v', 'd', 'i', 'v', 'w', 'u', 32, 0,
  /* 10426 */ 'l', 'b', 'z', 'u', 32, 0,
  /* 10432 */ 'l', 'h', 'z', 'u', 32, 0,
  /* 10438 */ 'l', 'w', 'z', 'u', 32, 0,
  /* 10444 */ 's', 'l', 'b', 'm', 'f', 'e', 'v', 32, 0,
  /* 10453 */ 'e', 'f', 'd', 'd', 'i', 'v', 32, 0,
  /* 10461 */ 'f', 'd', 'i', 'v', 32, 0,
  /* 10467 */ 'e', 'f', 's', 'd', 'i', 'v', 32, 0,
  /* 10475 */ 'e', 'v', 'f', 's', 'd', 'i', 'v', 32, 0,
  /* 10484 */ 'f', 't', 'd', 'i', 'v', 32, 0,
  /* 10491 */ 'v', 's', 'l', 'v', 32, 0,
  /* 10497 */ 'x', 'x', 'l', 'e', 'q', 'v', 32, 0,
  /* 10505 */ 'c', 'r', 'e', 'q', 'v', 32, 0,
  /* 10512 */ 'e', 'v', 'e', 'q', 'v', 32, 0,
  /* 10519 */ 'v', 's', 'r', 'v', 32, 0,
  /* 10525 */ 'l', 'x', 'v', 32, 0,
  /* 10530 */ 's', 't', 'x', 'v', 32, 0,
  /* 10536 */ 'v', 'e', 'x', 't', 's', 'b', '2', 'w', 32, 0,
  /* 10546 */ 'v', 'e', 'x', 't', 's', 'h', '2', 'w', 32, 0,
  /* 10556 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 10569 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 10582 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 10595 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 10608 */ 'e', 'v', 'a', 'd', 'd', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10621 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10634 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10648 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10661 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10674 */ 'e', 'v', 'a', 'd', 'd', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10687 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10700 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10714 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10727 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10740 */ 'e', 'v', 'a', 'd', 'd', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10753 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10766 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10780 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10793 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10806 */ 'e', 'v', 'a', 'd', 'd', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10819 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10832 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10846 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10859 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10872 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'w', 32, 0,
  /* 10884 */ 'v', 's', 'r', 'a', 'w', 32, 0,
  /* 10891 */ 'v', 'p', 'r', 't', 'y', 'b', 'w', 32, 0,
  /* 10900 */ 'e', 'v', 'a', 'd', 'd', 'w', 32, 0,
  /* 10908 */ 'e', 'v', 'l', 'd', 'w', 32, 0,
  /* 10915 */ 'e', 'v', 'r', 'n', 'd', 'w', 32, 0,
  /* 10923 */ 'e', 'v', 's', 't', 'd', 'w', 32, 0,
  /* 10931 */ 'v', 'm', 'r', 'g', 'e', 'w', 32, 0,
  /* 10939 */ 'v', 'c', 'm', 'p', 'n', 'e', 'w', 32, 0,
  /* 10948 */ 'e', 'v', 's', 'u', 'b', 'f', 'w', 32, 0,
  /* 10957 */ 'e', 'v', 's', 'u', 'b', 'i', 'f', 'w', 32, 0,
  /* 10967 */ 'v', 'n', 'e', 'g', 'w', 32, 0,
  /* 10974 */ 'v', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 10982 */ 'x', 'x', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 10991 */ 'm', 'u', 'l', 'h', 'w', 32, 0,
  /* 10998 */ 'e', 'v', 'a', 'd', 'd', 'i', 'w', 32, 0,
  /* 11007 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 32, 0,
  /* 11016 */ 'v', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 11024 */ 'x', 'x', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 11033 */ 'm', 'u', 'l', 'l', 'w', 32, 0,
  /* 11040 */ 'c', 'm', 'p', 'l', 'w', 32, 0,
  /* 11047 */ 'e', 'v', 'r', 'l', 'w', 32, 0,
  /* 11054 */ 'e', 'v', 's', 'l', 'w', 32, 0,
  /* 11061 */ 'l', 'm', 'w', 32, 0,
  /* 11066 */ 's', 't', 'm', 'w', 32, 0,
  /* 11072 */ 'v', 'p', 'm', 's', 'u', 'm', 'w', 32, 0,
  /* 11081 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 11094 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 11107 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 11120 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 11133 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 11146 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 11159 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 11172 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 11185 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 11198 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 11211 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 11224 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 11237 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 11250 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 11263 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 11276 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 11289 */ 'v', 'm', 'r', 'g', 'o', 'w', 32, 0,
  /* 11297 */ 'c', 'm', 'p', 'w', 32, 0,
  /* 11303 */ 'x', 'x', 'b', 'r', 'w', 32, 0,
  /* 11310 */ 'v', 's', 'r', 'w', 32, 0,
  /* 11316 */ 'm', 'o', 'd', 's', 'w', 32, 0,
  /* 11323 */ 'v', 'm', 'u', 'l', 'e', 's', 'w', 32, 0,
  /* 11332 */ 'v', 'a', 'v', 'g', 's', 'w', 32, 0,
  /* 11340 */ 'v', 'u', 'p', 'k', 'h', 's', 'w', 32, 0,
  /* 11349 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'w', 32, 0,
  /* 11359 */ 'v', 'u', 'p', 'k', 'l', 's', 'w', 32, 0,
  /* 11368 */ 'e', 'v', 'c', 'n', 't', 'l', 's', 'w', 32, 0,
  /* 11378 */ 'v', 'm', 'i', 'n', 's', 'w', 32, 0,
  /* 11386 */ 'v', 'm', 'u', 'l', 'o', 's', 'w', 32, 0,
  /* 11395 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', 32, 0,
  /* 11405 */ 'e', 'x', 't', 's', 'w', 32, 0,
  /* 11412 */ 'v', 'm', 'a', 'x', 's', 'w', 32, 0,
  /* 11420 */ 'v', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 11428 */ 'x', 'x', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 11437 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'w', 32, 0,
  /* 11447 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'w', 32, 0,
  /* 11457 */ 'x', 'x', 'i', 'n', 's', 'e', 'r', 't', 'w', 32, 0,
  /* 11468 */ 's', 't', 'w', 32, 0,
  /* 11473 */ 'v', 's', 'u', 'b', 'c', 'u', 'w', 32, 0,
  /* 11482 */ 'v', 'a', 'd', 'd', 'c', 'u', 'w', 32, 0,
  /* 11491 */ 'm', 'o', 'd', 'u', 'w', 32, 0,
  /* 11498 */ 'v', 'a', 'b', 's', 'd', 'u', 'w', 32, 0,
  /* 11507 */ 'v', 'm', 'u', 'l', 'e', 'u', 'w', 32, 0,
  /* 11516 */ 'v', 'a', 'v', 'g', 'u', 'w', 32, 0,
  /* 11524 */ 'v', 'm', 'i', 'n', 'u', 'w', 32, 0,
  /* 11532 */ 'v', 'm', 'u', 'l', 'o', 'u', 'w', 32, 0,
  /* 11541 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', 32, 0,
  /* 11551 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'w', 32, 0,
  /* 11563 */ 'x', 'x', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'w', 32, 0,
  /* 11576 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', 32, 0,
  /* 11586 */ 'v', 'm', 'a', 'x', 'u', 'w', 32, 0,
  /* 11594 */ 'd', 'i', 'v', 'w', 32, 0,
  /* 11600 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'w', 32, 0,
  /* 11610 */ 'v', 'c', 'l', 'z', 'w', 32, 0,
  /* 11617 */ 'e', 'v', 'c', 'n', 't', 'l', 'z', 'w', 32, 0,
  /* 11627 */ 'v', 'c', 't', 'z', 'w', 32, 0,
  /* 11634 */ 'c', 'n', 't', 't', 'z', 'w', 32, 0,
  /* 11642 */ 'l', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 11650 */ 's', 't', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 11659 */ 'l', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 11667 */ 's', 't', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 11676 */ 'l', 'x', 'v', 'b', '1', '6', 'x', 32, 0,
  /* 11685 */ 's', 't', 'x', 'v', 'b', '1', '6', 'x', 32, 0,
  /* 11695 */ 'l', 'x', 'v', 'h', '8', 'x', 32, 0,
  /* 11703 */ 's', 't', 'x', 'v', 'h', '8', 'x', 32, 0,
  /* 11712 */ 'l', 'h', 'a', 'x', 32, 0,
  /* 11718 */ 't', 'l', 'b', 'i', 'v', 'a', 'x', 32, 0,
  /* 11727 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 32, 0,
  /* 11737 */ 'l', 'x', 's', 'i', 'w', 'a', 'x', 32, 0,
  /* 11746 */ 'l', 'w', 'a', 'x', 32, 0,
  /* 11752 */ 'l', 'v', 'e', 'b', 'x', 32, 0,
  /* 11759 */ 's', 't', 'v', 'e', 'b', 'x', 32, 0,
  /* 11767 */ 's', 't', 'x', 's', 'i', 'b', 'x', 32, 0,
  /* 11776 */ 's', 't', 'b', 'x', 32, 0,
  /* 11782 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 32, 0,
  /* 11791 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 32, 0,
  /* 11801 */ 'e', 'v', 'l', 'd', 'd', 'x', 32, 0,
  /* 11809 */ 'e', 'v', 's', 't', 'd', 'd', 'x', 32, 0,
  /* 11818 */ 'q', 'v', 'l', 'f', 'd', 'x', 32, 0,
  /* 11826 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 32, 0,
  /* 11835 */ 'q', 'v', 'l', 'p', 'c', 'l', 'd', 'x', 32, 0,
  /* 11845 */ 'q', 'v', 'l', 'p', 'c', 'r', 'd', 'x', 32, 0,
  /* 11855 */ 'l', 'x', 's', 'd', 'x', 32, 0,
  /* 11862 */ 's', 't', 'x', 's', 'd', 'x', 32, 0,
  /* 11870 */ 's', 't', 'd', 'x', 32, 0,
  /* 11876 */ 'e', 'v', 'l', 'w', 'h', 'e', 'x', 32, 0,
  /* 11885 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 'x', 32, 0,
  /* 11895 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 'x', 32, 0,
  /* 11905 */ 'e', 'v', 'l', 'd', 'h', 'x', 32, 0,
  /* 11913 */ 'e', 'v', 's', 't', 'd', 'h', 'x', 32, 0,
  /* 11922 */ 'l', 'v', 'e', 'h', 'x', 32, 0,
  /* 11929 */ 's', 't', 'v', 'e', 'h', 'x', 32, 0,
  /* 11937 */ 's', 't', 'x', 's', 'i', 'h', 'x', 32, 0,
  /* 11946 */ 's', 't', 'h', 'x', 32, 0,
  /* 11952 */ 's', 't', 'b', 'c', 'i', 'x', 32, 0,
  /* 11960 */ 'l', 'd', 'c', 'i', 'x', 32, 0,
  /* 11967 */ 's', 't', 'd', 'c', 'i', 'x', 32, 0,
  /* 11975 */ 's', 't', 'h', 'c', 'i', 'x', 32, 0,
  /* 11983 */ 's', 't', 'w', 'c', 'i', 'x', 32, 0,
  /* 11991 */ 'l', 'b', 'z', 'c', 'i', 'x', 32, 0,
  /* 11999 */ 'l', 'h', 'z', 'c', 'i', 'x', 32, 0,
  /* 12007 */ 'l', 'w', 'z', 'c', 'i', 'x', 32, 0,
  /* 12015 */ 'x', 's', 'r', 'q', 'p', 'i', 'x', 32, 0,
  /* 12024 */ 'v', 'e', 'x', 't', 'u', 'b', 'l', 'x', 32, 0,
  /* 12034 */ 'v', 'e', 'x', 't', 'u', 'h', 'l', 'x', 32, 0,
  /* 12044 */ 'v', 'e', 'x', 't', 'u', 'w', 'l', 'x', 32, 0,
  /* 12054 */ 'l', 'd', 'm', 'x', 32, 0,
  /* 12060 */ 'v', 's', 'b', 'o', 'x', 32, 0,
  /* 12067 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 'x', 32, 0,
  /* 12077 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 'x', 32, 0,
  /* 12087 */ 'l', 'b', 'e', 'p', 'x', 32, 0,
  /* 12094 */ 's', 't', 'b', 'e', 'p', 'x', 32, 0,
  /* 12102 */ 'l', 'f', 'd', 'e', 'p', 'x', 32, 0,
  /* 12110 */ 's', 't', 'f', 'd', 'e', 'p', 'x', 32, 0,
  /* 12119 */ 'l', 'h', 'e', 'p', 'x', 32, 0,
  /* 12126 */ 's', 't', 'h', 'e', 'p', 'x', 32, 0,
  /* 12134 */ 'l', 'w', 'e', 'p', 'x', 32, 0,
  /* 12141 */ 's', 't', 'w', 'e', 'p', 'x', 32, 0,
  /* 12149 */ 'v', 'u', 'p', 'k', 'h', 'p', 'x', 32, 0,
  /* 12158 */ 'v', 'p', 'k', 'p', 'x', 32, 0,
  /* 12165 */ 'v', 'u', 'p', 'k', 'l', 'p', 'x', 32, 0,
  /* 12174 */ 'l', 'x', 's', 's', 'p', 'x', 32, 0,
  /* 12182 */ 's', 't', 'x', 's', 's', 'p', 'x', 32, 0,
  /* 12191 */ 'l', 'b', 'a', 'r', 'x', 32, 0,
  /* 12198 */ 'l', 'd', 'a', 'r', 'x', 32, 0,
  /* 12205 */ 'l', 'h', 'a', 'r', 'x', 32, 0,
  /* 12212 */ 'l', 'w', 'a', 'r', 'x', 32, 0,
  /* 12219 */ 'l', 'd', 'b', 'r', 'x', 32, 0,
  /* 12226 */ 's', 't', 'd', 'b', 'r', 'x', 32, 0,
  /* 12234 */ 'l', 'h', 'b', 'r', 'x', 32, 0,
  /* 12241 */ 's', 't', 'h', 'b', 'r', 'x', 32, 0,
  /* 12249 */ 'v', 'e', 'x', 't', 'u', 'b', 'r', 'x', 32, 0,
  /* 12259 */ 'l', 'w', 'b', 'r', 'x', 32, 0,
  /* 12266 */ 's', 't', 'w', 'b', 'r', 'x', 32, 0,
  /* 12274 */ 'v', 'e', 'x', 't', 'u', 'h', 'r', 'x', 32, 0,
  /* 12284 */ 'v', 'e', 'x', 't', 'u', 'w', 'r', 'x', 32, 0,
  /* 12294 */ 'm', 'c', 'r', 'x', 'r', 'x', 32, 0,
  /* 12302 */ 't', 'l', 'b', 's', 'x', 32, 0,
  /* 12309 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 32, 0,
  /* 12318 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 32, 0,
  /* 12328 */ 'l', 'x', 'v', 'd', 's', 'x', 32, 0,
  /* 12336 */ 'v', 'c', 'f', 's', 'x', 32, 0,
  /* 12343 */ 'q', 'v', 'l', 'f', 's', 'x', 32, 0,
  /* 12351 */ 'q', 'v', 's', 't', 'f', 's', 'x', 32, 0,
  /* 12360 */ 'q', 'v', 'l', 'p', 'c', 'l', 's', 'x', 32, 0,
  /* 12370 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 'x', 32, 0,
  /* 12380 */ 'q', 'v', 'l', 'p', 'c', 'r', 's', 'x', 32, 0,
  /* 12390 */ 'l', 'x', 'v', 'w', 's', 'x', 32, 0,
  /* 12398 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12412 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12425 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12440 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12455 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12468 */ 'l', 'h', 'a', 'u', 'x', 32, 0,
  /* 12475 */ 'l', 'w', 'a', 'u', 'x', 32, 0,
  /* 12482 */ 's', 't', 'b', 'u', 'x', 32, 0,
  /* 12489 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 12499 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 12510 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 32, 0,
  /* 12519 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 32, 0,
  /* 12529 */ 'l', 'd', 'u', 'x', 32, 0,
  /* 12535 */ 's', 't', 'd', 'u', 'x', 32, 0,
  /* 12542 */ 'v', 'c', 'f', 'u', 'x', 32, 0,
  /* 12549 */ 's', 't', 'h', 'u', 'x', 32, 0,
  /* 12556 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 'x', 32, 0,
  /* 12566 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 12576 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 12587 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 32, 0,
  /* 12596 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 32, 0,
  /* 12606 */ 's', 't', 'w', 'u', 'x', 32, 0,
  /* 12613 */ 'l', 'b', 'z', 'u', 'x', 32, 0,
  /* 12620 */ 'l', 'h', 'z', 'u', 'x', 32, 0,
  /* 12627 */ 'l', 'w', 'z', 'u', 'x', 32, 0,
  /* 12634 */ 'l', 'v', 'x', 32, 0,
  /* 12639 */ 's', 't', 'v', 'x', 32, 0,
  /* 12645 */ 'l', 'x', 'v', 'x', 32, 0,
  /* 12651 */ 's', 't', 'x', 'v', 'x', 32, 0,
  /* 12658 */ 'e', 'v', 'l', 'd', 'w', 'x', 32, 0,
  /* 12666 */ 'e', 'v', 's', 't', 'd', 'w', 'x', 32, 0,
  /* 12675 */ 'l', 'v', 'e', 'w', 'x', 32, 0,
  /* 12682 */ 's', 't', 'v', 'e', 'w', 'x', 32, 0,
  /* 12690 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 32, 0,
  /* 12700 */ 's', 't', 'x', 's', 'i', 'w', 'x', 32, 0,
  /* 12709 */ 's', 't', 'w', 'x', 32, 0,
  /* 12715 */ 'l', 'x', 's', 'i', 'b', 'z', 'x', 32, 0,
  /* 12724 */ 'l', 'b', 'z', 'x', 32, 0,
  /* 12730 */ 'l', 'x', 's', 'i', 'h', 'z', 'x', 32, 0,
  /* 12739 */ 'l', 'h', 'z', 'x', 32, 0,
  /* 12745 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 32, 0,
  /* 12755 */ 'l', 'x', 's', 'i', 'w', 'z', 'x', 32, 0,
  /* 12764 */ 'l', 'w', 'z', 'x', 32, 0,
  /* 12770 */ 'c', 'o', 'p', 'y', 32, 0,
  /* 12776 */ 'd', 'c', 'b', 'z', 32, 0,
  /* 12782 */ 'l', 'b', 'z', 32, 0,
  /* 12787 */ 'b', 'd', 'z', 32, 0,
  /* 12792 */ 'e', 'f', 'd', 'c', 't', 's', 'i', 'd', 'z', 32, 0,
  /* 12803 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'z', 32, 0,
  /* 12813 */ 'e', 'f', 'd', 'c', 't', 'u', 'i', 'd', 'z', 32, 0,
  /* 12824 */ 'x', 's', 'c', 'v', 'q', 'p', 's', 'd', 'z', 32, 0,
  /* 12835 */ 'x', 's', 'c', 'v', 'q', 'p', 'u', 'd', 'z', 32, 0,
  /* 12846 */ 'l', 'h', 'z', 32, 0,
  /* 12851 */ 'v', 'r', 'f', 'i', 'z', 32, 0,
  /* 12858 */ 'x', 's', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 12867 */ 'x', 'v', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 12876 */ 'x', 'v', 'r', 's', 'p', 'i', 'z', 32, 0,
  /* 12885 */ 'q', 'v', 'f', 'r', 'i', 'z', 32, 0,
  /* 12893 */ 'e', 'f', 'd', 'c', 't', 's', 'i', 'z', 32, 0,
  /* 12903 */ 'e', 'f', 's', 'c', 't', 's', 'i', 'z', 32, 0,
  /* 12913 */ 'e', 'v', 'f', 's', 'c', 't', 's', 'i', 'z', 32, 0,
  /* 12924 */ 'e', 'f', 'd', 'c', 't', 'u', 'i', 'z', 32, 0,
  /* 12934 */ 'e', 'f', 's', 'c', 't', 'u', 'i', 'z', 32, 0,
  /* 12944 */ 'b', 'd', 'n', 'z', 32, 0,
  /* 12950 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 'z', 32, 0,
  /* 12961 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 'z', 32, 0,
  /* 12972 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'z', 32, 0,
  /* 12982 */ 'l', 'w', 'z', 32, 0,
  /* 12987 */ 'm', 'f', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 12996 */ 'm', 't', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 13005 */ 'x', 's', 'c', 'v', 'q', 'p', 's', 'w', 'z', 32, 0,
  /* 13016 */ 'x', 's', 'c', 'v', 'q', 'p', 'u', 'w', 'z', 32, 0,
  /* 13027 */ 'b', 'd', 'z', 'l', 'r', 'l', '+', 0,
  /* 13035 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '+', 0,
  /* 13044 */ 'b', 'd', 'z', 'l', 'r', '+', 0,
  /* 13051 */ 'b', 'd', 'n', 'z', 'l', 'r', '+', 0,
  /* 13059 */ 'e', 'v', 's', 'e', 'l', 32, 'c', 'r', 'D', ',', 0,
  /* 13070 */ 'b', 'd', 'z', 'l', 'r', 'l', '-', 0,
  /* 13078 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '-', 0,
  /* 13087 */ 'b', 'd', 'z', 'l', 'r', '-', 0,
  /* 13094 */ 'b', 'd', 'n', 'z', 'l', 'r', '-', 0,
  /* 13102 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 13133 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'y', 'p', 'e', 'd', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 13157 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 13182 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 13205 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 13228 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 13250 */ 't', 'r', 'e', 'c', 'h', 'k', 'p', 't', '.', 0,
  /* 13260 */ 'o', 'r', 'i', 32, '1', ',', 32, '1', ',', 32, '0', 0,
  /* 13272 */ 'o', 'r', 'i', 32, '2', ',', 32, '2', ',', 32, '0', 0,
  /* 13284 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', '3', '2', 0,
  /* 13301 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 13322 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 13343 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 13365 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 13386 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 13408 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 13429 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 13446 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 13467 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 13487 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 13509 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 13530 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', '3', '2', 0,
  /* 13544 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', '3', '2', 0,
  /* 13558 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 13573 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 13588 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '3', '2', 0,
  /* 13607 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '3', '2', 0,
  /* 13625 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 13643 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 13661 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 13676 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 13689 */ '#', 'D', 'F', 'L', 'O', 'A', 'D', 'f', '3', '2', 0,
  /* 13700 */ '#', 'X', 'F', 'L', 'O', 'A', 'D', 'f', '3', '2', 0,
  /* 13711 */ '#', 'D', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '3', '2', 0,
  /* 13723 */ '#', 'X', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '3', '2', 0,
  /* 13735 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 13756 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 13777 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 13799 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '6', '4', 0,
  /* 13821 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '6', '4', 0,
  /* 13842 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 13859 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 13880 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 13901 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 13921 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '6', '4', 0,
  /* 13943 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '6', '4', 0,
  /* 13964 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '6', '4', 0,
  /* 13983 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '6', '4', 0,
  /* 14001 */ '#', 'D', 'F', 'L', 'O', 'A', 'D', 'f', '6', '4', 0,
  /* 14012 */ '#', 'X', 'F', 'L', 'O', 'A', 'D', 'f', '6', '4', 0,
  /* 14023 */ '#', 'D', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '6', '4', 0,
  /* 14035 */ '#', 'X', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '6', '4', 0,
  /* 14047 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'i', '6', '4', 0,
  /* 14068 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'S', 'P', 'E', '4', 0,
  /* 14084 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'S', 'P', 'E', '4', 0,
  /* 14097 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 14111 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '4', 0,
  /* 14122 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 14136 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '4', 0,
  /* 14147 */ 'c', 'r', 'x', 'o', 'r', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 14161 */ 'c', 'r', 'e', 'q', 'v', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 14175 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '1', '6', 0,
  /* 14190 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '1', '6', 0,
  /* 14202 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 14223 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 14244 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 14266 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 14287 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '1', '6', 0,
  /* 14309 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '1', '6', 0,
  /* 14330 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 14347 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 14368 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 14388 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '1', '6', 0,
  /* 14410 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '1', '6', 0,
  /* 14431 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 14442 */ '#', 'C', 'F', 'E', 'N', 'C', 'E', '8', 0,
  /* 14451 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 14465 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '8', 0,
  /* 14476 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 14496 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 14510 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 14530 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 14551 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 14571 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '8', 0,
  /* 14592 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '8', 0,
  /* 14612 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 14632 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 14651 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 14670 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '8', 0,
  /* 14681 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '8', 0,
  /* 14702 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '8', 0,
  /* 14722 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 14735 */ '#', 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', '8', 0,
  /* 14751 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', '8', 0,
  /* 14768 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', '8', 0,
  /* 14785 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'i', '8', 0,
  /* 14801 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 14813 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 14827 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 14841 */ '#', 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 14858 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 14873 */ '#', 'R', 'e', 'a', 'd', 'T', 'B', 0,
  /* 14881 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 14891 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'B', 'R', 'C', 0,
  /* 14907 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'B', 'R', 'C', 0,
  /* 14920 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'R', 'C', 0,
  /* 14936 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'F', 'R', 'C', 0,
  /* 14949 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 14966 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 14980 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 14996 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'R', 'R', 'C', 0,
  /* 15009 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'S', 'R', 'C', 0,
  /* 15025 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'S', 'R', 'C', 0,
  /* 15038 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 15055 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 15069 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'R', 'C', 0,
  /* 15085 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'R', 'C', 0,
  /* 15098 */ '#', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'L', 'D', 0,
  /* 15113 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 15126 */ '#', 'S', 'E', 'T', 'R', 'N', 'D', 0,
  /* 15134 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 15141 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'S', 'P', 'E', 0,
  /* 15156 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'S', 'P', 'E', 0,
  /* 15168 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 15178 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 15194 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 15208 */ '#', 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 15218 */ 'D', 'B', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 15228 */ '#', 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 15236 */ '#', 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 15246 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 15258 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 15270 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 15283 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 15296 */ '#', 'U', 'p', 'd', 'a', 't', 'e', 'G', 'B', 'R', 0,
  /* 15307 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 15319 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 15329 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 15345 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 15361 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 15375 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 15387 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 15399 */ '#', 'M', 'o', 'v', 'e', 'G', 'O', 'T', 't', 'o', 'L', 'R', 0,
  /* 15412 */ '#', 'T', 'C', 'H', 'E', 'C', 'K', '_', 'R', 'E', 'T', 0,
  /* 15424 */ '#', 'T', 'B', 'E', 'G', 'I', 'N', '_', 'R', 'E', 'T', 0,
  /* 15436 */ '#', 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', 0,
  /* 15451 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 15466 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 15479 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', 0,
  /* 15495 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', 0,
  /* 15511 */ '#', 'P', 'P', 'C', '3', '2', 'G', 'O', 'T', 0,
  /* 15521 */ '#', 'P', 'P', 'C', '3', '2', 'P', 'I', 'C', 'G', 'O', 'T', 0,
  /* 15534 */ '#', 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 15544 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 15559 */ '#', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'S', 'T', 0,
  /* 15574 */ '#', 'L', 'I', 'W', 'A', 'X', 0,
  /* 15581 */ '#', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'L', 'D', 'X', 0,
  /* 15597 */ '#', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'S', 'T', 'X', 0,
  /* 15613 */ '#', 'S', 'T', 'I', 'W', 'X', 0,
  /* 15620 */ '#', 'L', 'I', 'W', 'Z', 'X', 0,
  /* 15627 */ 'b', 'c', 'a', 0,
  /* 15631 */ 's', 'l', 'b', 'i', 'a', 0,
  /* 15637 */ 't', 'l', 'b', 'i', 'a', 0,
  /* 15643 */ 'b', 'c', 'l', 'a', 0,
  /* 15648 */ 'c', 'l', 'r', 'b', 'h', 'r', 'b', 0,
  /* 15656 */ 'b', 'c', 0,
  /* 15659 */ 's', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 15667 */ 't', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 15675 */ 'm', 's', 'g', 's', 'y', 'n', 'c', 0,
  /* 15683 */ 'i', 's', 'y', 'n', 'c', 0,
  /* 15689 */ 'm', 's', 'y', 'n', 'c', 0,
  /* 15695 */ '#', 'L', 'D', 't', 'o', 'c', 0,
  /* 15702 */ '#', 'L', 'W', 'Z', 't', 'o', 'c', 0,
  /* 15710 */ 'h', 'r', 'f', 'i', 'd', 0,
  /* 15716 */ 't', 'l', 'b', 'r', 'e', 0,
  /* 15722 */ 't', 'l', 'b', 'w', 'e', 0,
  /* 15728 */ '#', 'S', 'E', 'T', 'R', 'N', 'D', 'i', 0,
  /* 15737 */ 'r', 'f', 'c', 'i', 0,
  /* 15742 */ 'r', 'f', 'm', 'c', 'i', 0,
  /* 15748 */ 'r', 'f', 'd', 'i', 0,
  /* 15753 */ 'r', 'f', 'i', 0,
  /* 15757 */ 'b', 'c', 'l', 0,
  /* 15761 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 15775 */ 'd', 's', 's', 'a', 'l', 'l', 0,
  /* 15782 */ 'b', 'l', 'r', 'l', 0,
  /* 15787 */ 'b', 'd', 'z', 'l', 'r', 'l', 0,
  /* 15794 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', 0,
  /* 15802 */ 'b', 'c', 't', 'r', 'l', 0,
  /* 15808 */ 'a', 't', 't', 'n', 0,
  /* 15813 */ 'e', 'i', 'e', 'i', 'o', 0,
  /* 15819 */ 'n', 'a', 'p', 0,
  /* 15823 */ 't', 'r', 'a', 'p', 0,
  /* 15828 */ 'n', 'o', 'p', 0,
  /* 15832 */ 's', 't', 'o', 'p', 0,
  /* 15837 */ 'b', 'l', 'r', 0,
  /* 15841 */ 'b', 'd', 'z', 'l', 'r', 0,
  /* 15847 */ 'b', 'd', 'n', 'z', 'l', 'r', 0,
  /* 15854 */ 'b', 'c', 't', 'r', 0,
  /* 15859 */ 'c', 'p', '_', 'a', 'b', 'o', 'r', 't', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    15169U,	// DBG_VALUE
    15219U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    15135U,	// BUNDLE
    15545U,	// LIFETIME_START
    15114U,	// LIFETIME_END
    0U,	// STACKMAP
    15762U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    13183U,	// PATCHABLE_FUNCTION_ENTER
    13103U,	// PATCHABLE_RET
    13229U,	// PATCHABLE_FUNCTION_EXIT
    13206U,	// PATCHABLE_TAIL_CALL
    13158U,	// PATCHABLE_EVENT_CALL
    13134U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    14443U,	// CFENCE8
    21235U,	// CLRLSLDI
    17220U,	// CLRLSLDIo
    21744U,	// CLRLSLWI
    17329U,	// CLRLSLWIo
    21270U,	// CLRRDI
    17247U,	// CLRRDIo
    21785U,	// CLRRWI
    17358U,	// CLRRWIo
    536897465U,	// CP_COPY_FIRST
    536900067U,	// CP_COPYx
    536897414U,	// CP_PASTE_LAST
    536891455U,	// CP_PASTEx
    562674U,	// DCBFL
    564692U,	// DCBFLP
    561260U,	// DCBFx
    553690831U,	// DCBTCT
    553690112U,	// DCBTDS
    553690839U,	// DCBTSTCT
    553690120U,	// DCBTSTDS
    567265U,	// DCBTSTT
    567237U,	// DCBTSTx
    567252U,	// DCBTT
    566979U,	// DCBTx
    13690U,	// DFLOADf32
    14002U,	// DFLOADf64
    13712U,	// DFSTOREf32
    14024U,	// DFSTOREf64
    21245U,	// EXTLDI
    17231U,	// EXTLDIo
    21770U,	// EXTLWI
    17349U,	// EXTLWIo
    21294U,	// EXTRDI
    17274U,	// EXTRDIo
    21809U,	// EXTRWI
    17385U,	// EXTRWIo
    21754U,	// INSLWI
    17340U,	// INSLWIo
    21278U,	// INSRDI
    17256U,	// INSRDIo
    21793U,	// INSRWI
    17367U,	// INSRWIo
    33573435U,	// LAx
    15575U,	// LIWAX
    15621U,	// LIWZX
    21398U,	// RLWIMIbm
    17312U,	// RLWIMIobm
    22295U,	// RLWINMbm
    17443U,	// RLWINMobm
    22304U,	// RLWNMbm
    17452U,	// RLWNMobm
    21286U,	// ROTRDI
    17265U,	// ROTRDIo
    21801U,	// ROTRWI
    17376U,	// ROTRWIo
    21239U,	// SLDI
    17224U,	// SLDIo
    21748U,	// SLWI
    17333U,	// SLWIo
    15099U,	// SPILLTOVSR_LD
    15582U,	// SPILLTOVSR_LDX
    15560U,	// SPILLTOVSR_ST
    15598U,	// SPILLTOVSR_STX
    21280U,	// SRDI
    17258U,	// SRDIo
    21795U,	// SRWI
    17369U,	// SRWIo
    15614U,	// STIWX
    21186U,	// SUBI
    19715U,	// SUBIC
    16795U,	// SUBICo
    25831U,	// SUBIS
    50357486U,	// SUBPCIS
    13701U,	// XFLOADf32
    14013U,	// XFLOADf64
    13724U,	// XFSTOREf32
    14036U,	// XFSTOREf64
    19898U,	// ADD4
    22663U,	// ADD4O
    17543U,	// ADD4Oo
    19898U,	// ADD4TLS
    16867U,	// ADD4o
    19898U,	// ADD8
    22663U,	// ADD8O
    17543U,	// ADD8Oo
    19898U,	// ADD8TLS
    19898U,	// ADD8TLS_
    16867U,	// ADD8o
    19677U,	// ADDC
    19677U,	// ADDC8
    22648U,	// ADDC8O
    17526U,	// ADDC8Oo
    16762U,	// ADDC8o
    22648U,	// ADDCO
    17526U,	// ADDCOo
    16762U,	// ADDCo
    20428U,	// ADDE
    20428U,	// ADDE8
    22684U,	// ADDE8O
    17567U,	// ADDE8Oo
    17006U,	// ADDE8o
    22684U,	// ADDEO
    17567U,	// ADDEOo
    17006U,	// ADDEo
    21221U,	// ADDI
    21221U,	// ADDI8
    19722U,	// ADDIC
    19722U,	// ADDIC8
    16803U,	// ADDICo
    25856U,	// ADDIS
    25856U,	// ADDIS8
    14859U,	// ADDISdtprelHA
    13285U,	// ADDISdtprelHA32
    14842U,	// ADDISgotTprelHA
    14814U,	// ADDIStlsgdHA
    14828U,	// ADDIStlsldHA
    14802U,	// ADDIStocHA
    15284U,	// ADDIdtprelL
    13574U,	// ADDIdtprelL32
    15247U,	// ADDItlsgdL
    13531U,	// ADDItlsgdL32
    15330U,	// ADDItlsgdLADDR
    13626U,	// ADDItlsgdLADDR32
    15259U,	// ADDItlsldL
    13545U,	// ADDItlsldL32
    15346U,	// ADDItlsldLADDR
    13644U,	// ADDItlsldLADDR32
    15237U,	// ADDItocL
    536891407U,	// ADDME
    536891407U,	// ADDME8
    536893619U,	// ADDME8O
    536888505U,	// ADDME8Oo
    536887950U,	// ADDME8o
    536893619U,	// ADDMEO
    536888505U,	// ADDMEOo
    536887950U,	// ADDMEo
    536896759U,	// ADDPCIS
    536891485U,	// ADDZE
    536891485U,	// ADDZE8
    536893644U,	// ADDZE8O
    536888533U,	// ADDZE8Oo
    536887999U,	// ADDZE8o
    536893644U,	// ADDZEO
    536888533U,	// ADDZEOo
    536887999U,	// ADDZEo
    51304U,	// ADJCALLSTACKDOWN
    51323U,	// ADJCALLSTACKUP
    20169U,	// AND
    20169U,	// AND8
    16929U,	// AND8o
    19686U,	// ANDC
    19686U,	// ANDC8
    16769U,	// ANDC8o
    16769U,	// ANDCo
    18026U,	// ANDISo
    18026U,	// ANDISo8
    17240U,	// ANDIo
    17240U,	// ANDIo8
    15480U,	// ANDIo_1_EQ_BIT
    14752U,	// ANDIo_1_EQ_BIT8
    15496U,	// ANDIo_1_GT_BIT
    14769U,	// ANDIo_1_GT_BIT8
    16929U,	// ANDo
    1141917721U,	// ATOMIC_CMP_SWAP_I16
    1141917699U,	// ATOMIC_CMP_SWAP_I32
    13860U,	// ATOMIC_CMP_SWAP_I64
    14613U,	// ATOMIC_CMP_SWAP_I8
    14224U,	// ATOMIC_LOAD_ADD_I16
    13323U,	// ATOMIC_LOAD_ADD_I32
    13757U,	// ATOMIC_LOAD_ADD_I64
    14511U,	// ATOMIC_LOAD_ADD_I8
    14267U,	// ATOMIC_LOAD_AND_I16
    13366U,	// ATOMIC_LOAD_AND_I32
    14048U,	// ATOMIC_LOAD_AND_I64
    14552U,	// ATOMIC_LOAD_AND_I8
    14411U,	// ATOMIC_LOAD_MAX_I16
    13510U,	// ATOMIC_LOAD_MAX_I32
    13944U,	// ATOMIC_LOAD_MAX_I64
    14703U,	// ATOMIC_LOAD_MAX_I8
    14310U,	// ATOMIC_LOAD_MIN_I16
    13409U,	// ATOMIC_LOAD_MIN_I32
    13822U,	// ATOMIC_LOAD_MIN_I64
    14593U,	// ATOMIC_LOAD_MIN_I8
    14245U,	// ATOMIC_LOAD_NAND_I16
    13344U,	// ATOMIC_LOAD_NAND_I32
    13778U,	// ATOMIC_LOAD_NAND_I64
    14531U,	// ATOMIC_LOAD_NAND_I8
    14369U,	// ATOMIC_LOAD_OR_I16
    13468U,	// ATOMIC_LOAD_OR_I32
    13902U,	// ATOMIC_LOAD_OR_I64
    14652U,	// ATOMIC_LOAD_OR_I8
    14203U,	// ATOMIC_LOAD_SUB_I16
    13302U,	// ATOMIC_LOAD_SUB_I32
    13736U,	// ATOMIC_LOAD_SUB_I64
    14477U,	// ATOMIC_LOAD_SUB_I8
    14389U,	// ATOMIC_LOAD_UMAX_I16
    13488U,	// ATOMIC_LOAD_UMAX_I32
    13922U,	// ATOMIC_LOAD_UMAX_I64
    14682U,	// ATOMIC_LOAD_UMAX_I8
    14288U,	// ATOMIC_LOAD_UMIN_I16
    13387U,	// ATOMIC_LOAD_UMIN_I32
    13800U,	// ATOMIC_LOAD_UMIN_I64
    14572U,	// ATOMIC_LOAD_UMIN_I8
    14348U,	// ATOMIC_LOAD_XOR_I16
    13447U,	// ATOMIC_LOAD_XOR_I32
    13881U,	// ATOMIC_LOAD_XOR_I64
    14633U,	// ATOMIC_LOAD_XOR_I8
    14331U,	// ATOMIC_SWAP_I16
    13430U,	// ATOMIC_SWAP_I32
    13843U,	// ATOMIC_SWAP_I64
    14786U,	// ATOMIC_SWAP_I8
    15809U,	// ATTN
    592707U,	// B
    608533U,	// BA
    83902568U,	// BC
    1686823U,	// BCC
    2211111U,	// BCCA
    2735399U,	// BCCCTR
    2735399U,	// BCCCTR8
    3259687U,	// BCCCTRL
    3259687U,	// BCCCTRL8
    3783975U,	// BCCL
    4308263U,	// BCCLA
    4832551U,	// BCCLR
    5356839U,	// BCCLRL
    5783706U,	// BCCTR
    5783706U,	// BCCTR8
    5783762U,	// BCCTR8n
    5783684U,	// BCCTRL
    5783684U,	// BCCTRL8
    5783742U,	// BCCTRL8n
    5783742U,	// BCCTRLn
    5783762U,	// BCCTRn
    17460U,	// BCDCFNo
    17847U,	// BCDCFSQo
    18365U,	// BCDCFZo
    17469U,	// BCDCPSGNo
    536888429U,	// BCDCTNo
    536888769U,	// BCDCTSQo
    18381U,	// BCDCTZo
    17489U,	// BCDSETSGNo
    17902U,	// BCDSRo
    17958U,	// BCDSo
    16819U,	// BCDTRUNCo
    18051U,	// BCDUSo
    16830U,	// BCDUTRUNCo
    83902576U,	// BCL
    5783696U,	// BCLR
    5783673U,	// BCLRL
    5783732U,	// BCLRLn
    5783753U,	// BCLRn
    589901U,	// BCLalways
    83902636U,	// BCLn
    15855U,	// BCTR
    15855U,	// BCTR8
    15803U,	// BCTRL
    15803U,	// BCTRL8
    114778U,	// BCTRL8_LDinto_toc
    83902629U,	// BCn
    602769U,	// BDNZ
    602769U,	// BDNZ8
    609080U,	// BDNZA
    606464U,	// BDNZAm
    606249U,	// BDNZAp
    595573U,	// BDNZL
    608844U,	// BDNZLA
    606448U,	// BDNZLAm
    606233U,	// BDNZLAp
    15848U,	// BDNZLR
    15848U,	// BDNZLR8
    15795U,	// BDNZLRL
    13079U,	// BDNZLRLm
    13036U,	// BDNZLRLp
    13095U,	// BDNZLRm
    13052U,	// BDNZLRp
    590095U,	// BDNZLm
    589880U,	// BDNZLp
    590109U,	// BDNZm
    589894U,	// BDNZp
    602612U,	// BDZ
    602612U,	// BDZ8
    609074U,	// BDZA
    606457U,	// BDZAm
    606242U,	// BDZAp
    595567U,	// BDZL
    608837U,	// BDZLA
    606440U,	// BDZLAm
    606225U,	// BDZLAp
    15842U,	// BDZLR
    15842U,	// BDZLR8
    15788U,	// BDZLRL
    13071U,	// BDZLRLm
    13028U,	// BDZLRLp
    13088U,	// BDZLRm
    13045U,	// BDZLRp
    590088U,	// BDZLm
    589873U,	// BDZLp
    590103U,	// BDZm
    589888U,	// BDZp
    595383U,	// BL
    595383U,	// BL8
    6362551U,	// BL8_NOP
    6428087U,	// BL8_NOP_TLS
    660919U,	// BL8_TLS
    660919U,	// BL8_TLS_
    608826U,	// BLA
    608826U,	// BLA8
    6375994U,	// BLA8_NOP
    15838U,	// BLR
    15838U,	// BLR8
    15783U,	// BLRL
    6362551U,	// BL_NOP
    660919U,	// BL_TLS
    20149U,	// BPERMD
    19778U,	// BRINC
    15649U,	// CLRBHRB
    19353U,	// CMPB
    19353U,	// CMPB8
    20213U,	// CMPD
    21263U,	// CMPDI
    19359U,	// CMPEQB
    20120U,	// CMPLD
    21227U,	// CMPLDI
    27425U,	// CMPLW
    21728U,	// CMPLWI
    100682663U,	// CMPRB
    100682663U,	// CMPRB8
    27682U,	// CMPW
    21778U,	// CMPWI
    536891300U,	// CNTLZD
    536887900U,	// CNTLZDo
    536898916U,	// CNTLZW
    536898916U,	// CNTLZW8
    536889210U,	// CNTLZW8o
    536889210U,	// CNTLZWo
    536891315U,	// CNTTZD
    536887909U,	// CNTTZDo
    536898931U,	// CNTTZW
    536898931U,	// CNTTZW8
    536889219U,	// CNTTZW8o
    536889219U,	// CNTTZWo
    15860U,	// CP_ABORT
    29155U,	// CP_COPY
    29155U,	// CP_COPY8
    20543U,	// CP_PASTE
    20543U,	// CP_PASTE8
    17071U,	// CP_PASTE8o
    17071U,	// CP_PASTEo
    14162U,	// CR6SET
    14148U,	// CR6UNSET
    20199U,	// CRAND
    19692U,	// CRANDC
    26890U,	// CREQV
    20183U,	// CRNAND
    25220U,	// CRNOR
    25234U,	// CROR
    19799U,	// CRORC
    117467402U,	// CRSET
    117465776U,	// CRUNSET
    25264U,	// CRXOR
    1686823U,	// CTRL_DEP
    536893535U,	// DARN
    559379U,	// DCBA
    151660U,	// DCBF
    564443U,	// DCBFEP
    561846U,	// DCBI
    567213U,	// DCBST
    564476U,	// DCBSTEP
    157379U,	// DCBT
    171252U,	// DCBTEP
    157637U,	// DCBTST
    171269U,	// DCBTSTEP
    569833U,	// DCBZ
    564495U,	// DCBZEP
    562792U,	// DCBZL
    564459U,	// DCBZLEP
    536892104U,	// DCCCI
    20375U,	// DIVD
    20434U,	// DIVDE
    22691U,	// DIVDEO
    17575U,	// DIVDEOo
    26690U,	// DIVDEU
    22923U,	// DIVDEUO
    17664U,	// DIVDEUOo
    18129U,	// DIVDEUo
    17013U,	// DIVDEo
    22677U,	// DIVDO
    17559U,	// DIVDOo
    26683U,	// DIVDU
    22915U,	// DIVDUO
    17655U,	// DIVDUOo
    18121U,	// DIVDUo
    16981U,	// DIVDo
    27979U,	// DIVW
    20557U,	// DIVWE
    22724U,	// DIVWEO
    17612U,	// DIVWEOo
    26698U,	// DIVWEU
    22932U,	// DIVWEUO
    17674U,	// DIVWEUOo
    18138U,	// DIVWEUo
    17079U,	// DIVWEo
    22957U,	// DIVWO
    17702U,	// DIVWOo
    26804U,	// DIVWU
    22941U,	// DIVWUO
    17684U,	// DIVWUOo
    18165U,	// DIVWUo
    18280U,	// DIVWo
    714052U,	// DSS
    15776U,	// DSSALL
    1745037236U,	// DST
    1745037236U,	// DST64
    1745037261U,	// DSTST
    1745037261U,	// DSTST64
    1745037290U,	// DSTSTT
    1745037290U,	// DSTSTT64
    1745037275U,	// DSTT
    1745037275U,	// DSTT64
    14882U,	// DYNALLOC
    14432U,	// DYNALLOC8
    15437U,	// DYNAREAOFFSET
    14736U,	// DYNAREAOFFSET8
    536896257U,	// EFDABS
    19895U,	// EFDADD
    536896622U,	// EFDCFS
    536891580U,	// EFDCFSF
    536892491U,	// EFDCFSI
    536890981U,	// EFDCFSID
    536891682U,	// EFDCFUF
    536892568U,	// EFDCFUI
    536891000U,	// EFDCFUID
    24881U,	// EFDCMPEQ
    26337U,	// EFDCMPGT
    26415U,	// EFDCMPLT
    536891654U,	// EFDCTSF
    536892519U,	// EFDCTSI
    536900089U,	// EFDCTSIDZ
    536900190U,	// EFDCTSIZ
    536891710U,	// EFDCTUF
    536892596U,	// EFDCTUI
    536900110U,	// EFDCTUIDZ
    536900221U,	// EFDCTUIZ
    26838U,	// EFDDIV
    22052U,	// EFDMUL
    536896273U,	// EFDNABS
    536891736U,	// EFDNEG
    19567U,	// EFDSUB
    24931U,	// EFDTSTEQ
    26378U,	// EFDTSTGT
    26456U,	// EFDTSTLT
    536896310U,	// EFSABS
    19978U,	// EFSADD
    536890931U,	// EFSCFD
    536891589U,	// EFSCFSF
    536892500U,	// EFSCFSI
    536891691U,	// EFSCFUF
    536892577U,	// EFSCFUI
    24901U,	// EFSCMPEQ
    26357U,	// EFSCMPGT
    26435U,	// EFSCMPLT
    536891663U,	// EFSCTSF
    536892528U,	// EFSCTSI
    536900200U,	// EFSCTSIZ
    536891719U,	// EFSCTUF
    536892605U,	// EFSCTUI
    536900231U,	// EFSCTUIZ
    26852U,	// EFSDIV
    22068U,	// EFSMUL
    536896291U,	// EFSNABS
    536891752U,	// EFSNEG
    19602U,	// EFSSUB
    24941U,	// EFSTSTEQ
    26388U,	// EFSTSTGT
    26466U,	// EFSTSTLT
    13589U,	// EH_SjLj_LongJmp32
    13965U,	// EH_SjLj_LongJmp64
    13608U,	// EH_SjLj_SetJmp32
    13984U,	// EH_SjLj_SetJmp64
    589825U,	// EH_SjLj_Setup
    26885U,	// EQV
    26885U,	// EQV8
    18180U,	// EQV8o
    18180U,	// EQVo
    536896327U,	// EVABS
    16804599U,	// EVADDIW
    536897905U,	// EVADDSMIAAW
    536898037U,	// EVADDSSIAAW
    536897971U,	// EVADDUMIAAW
    536898103U,	// EVADDUSIAAW
    27285U,	// EVADDW
    20206U,	// EVAND
    19700U,	// EVANDC
    24922U,	// EVCMPEQ
    25947U,	// EVCMPGTS
    26750U,	// EVCMPGTU
    25957U,	// EVCMPLTS
    26760U,	// EVCMPLTU
    536898665U,	// EVCNTLSW
    536898914U,	// EVCNTLZW
    26119U,	// EVDIVWS
    26802U,	// EVDIVWU
    26897U,	// EVEQV
    536890364U,	// EVEXTSB
    536891929U,	// EVEXTSH
    536896318U,	// EVFSABS
    19986U,	// EVFSADD
    536891598U,	// EVFSCFSF
    536892509U,	// EVFSCFSI
    536891700U,	// EVFSCFUF
    536892586U,	// EVFSCFUI
    24911U,	// EVFSCMPEQ
    26367U,	// EVFSCMPGT
    26445U,	// EVFSCMPLT
    536891672U,	// EVFSCTSF
    536892537U,	// EVFSCTSI
    536900210U,	// EVFSCTSIZ
    536891672U,	// EVFSCTUF
    536892614U,	// EVFSCTUI
    536900210U,	// EVFSCTUIZ
    26860U,	// EVFSDIV
    22076U,	// EVFSMUL
    536896300U,	// EVFSNABS
    536891760U,	// EVFSNEG
    19610U,	// EVFSSUB
    24951U,	// EVFSTSTEQ
    26398U,	// EVFSTSTGT
    26476U,	// EVFSTSTLT
    33574427U,	// EVLDD
    604007962U,	// EVLDDX
    33575303U,	// EVLDH
    604008066U,	// EVLDHX
    33581725U,	// EVLDW
    604008819U,	// EVLDWX
    33580661U,	// EVLHHESPLAT
    604008559U,	// EVLHHESPLATX
    33580686U,	// EVLHHOSSPLAT
    604008586U,	// EVLHHOSSPLATX
    33580700U,	// EVLHHOUSPLAT
    604008601U,	// EVLHHOUSPLATX
    33574896U,	// EVLWHE
    604008037U,	// EVLWHEX
    33580343U,	// EVLWHOS
    604008531U,	// EVLWHOSX
    33581153U,	// EVLWHOU
    604008717U,	// EVLWHOUX
    33580674U,	// EVLWHSPLAT
    604008573U,	// EVLWHSPLATX
    33580714U,	// EVLWWSPLAT
    604008616U,	// EVLWWSPLATX
    21334U,	// EVMERGEHI
    22782U,	// EVMERGEHILO
    22771U,	// EVMERGELO
    21345U,	// EVMERGELOHI
    18585U,	// EVMHEGSMFAA
    22427U,	// EVMHEGSMFAN
    18633U,	// EVMHEGSMIAA
    22475U,	// EVMHEGSMIAN
    18670U,	// EVMHEGUMIAA
    22512U,	// EVMHEGUMIAN
    20600U,	// EVMHESMF
    18718U,	// EVMHESMFA
    26941U,	// EVMHESMFAAW
    27466U,	// EVMHESMFANW
    21406U,	// EVMHESMI
    18809U,	// EVMHESMIA
    27006U,	// EVMHESMIAAW
    27518U,	// EVMHESMIANW
    20703U,	// EVMHESSF
    18761U,	// EVMHESSFA
    26967U,	// EVMHESSFAAW
    27492U,	// EVMHESSFANW
    27138U,	// EVMHESSIAAW
    27596U,	// EVMHESSIANW
    21445U,	// EVMHEUMI
    18852U,	// EVMHEUMIA
    27072U,	// EVMHEUMIAAW
    27557U,	// EVMHEUMIANW
    27204U,	// EVMHEUSIAAW
    27635U,	// EVMHEUSIANW
    18598U,	// EVMHOGSMFAA
    22440U,	// EVMHOGSMFAN
    18646U,	// EVMHOGSMIAA
    22488U,	// EVMHOGSMIAN
    18683U,	// EVMHOGUMIAA
    22525U,	// EVMHOGUMIAN
    20620U,	// EVMHOSMF
    18740U,	// EVMHOSMFA
    26954U,	// EVMHOSMFAAW
    27479U,	// EVMHOSMFANW
    21426U,	// EVMHOSMI
    18831U,	// EVMHOSMIA
    27046U,	// EVMHOSMIAAW
    27544U,	// EVMHOSMIANW
    20723U,	// EVMHOSSF
    18783U,	// EVMHOSSFA
    26980U,	// EVMHOSSFAAW
    27505U,	// EVMHOSSFANW
    27178U,	// EVMHOSSIAAW
    27622U,	// EVMHOSSIANW
    21475U,	// EVMHOUMI
    18885U,	// EVMHOUMIA
    27112U,	// EVMHOUMIAAW
    27583U,	// EVMHOUMIANW
    27244U,	// EVMHOUSIAAW
    27661U,	// EVMHOUSIANW
    536889940U,	// EVMRA
    20610U,	// EVMWHSMF
    18729U,	// EVMWHSMFA
    21416U,	// EVMWHSMI
    18820U,	// EVMWHSMIA
    20713U,	// EVMWHSSF
    18772U,	// EVMWHSSFA
    21455U,	// EVMWHUMI
    18863U,	// EVMWHUMIA
    27033U,	// EVMWLSMIAAW
    27531U,	// EVMWLSMIANW
    27165U,	// EVMWLSSIAAW
    27609U,	// EVMWLSSIANW
    21465U,	// EVMWLUMI
    18874U,	// EVMWLUMIA
    27099U,	// EVMWLUMIAAW
    27570U,	// EVMWLUMIANW
    27231U,	// EVMWLUSIAAW
    27648U,	// EVMWLUSIANW
    20630U,	// EVMWSMF
    18751U,	// EVMWSMFA
    18611U,	// EVMWSMFAA
    22453U,	// EVMWSMFAN
    21436U,	// EVMWSMI
    18842U,	// EVMWSMIA
    18659U,	// EVMWSMIAA
    22501U,	// EVMWSMIAN
    20733U,	// EVMWSSF
    18794U,	// EVMWSSFA
    18622U,	// EVMWSSFAA
    22464U,	// EVMWSSFAN
    21485U,	// EVMWUMI
    18896U,	// EVMWUMIA
    18696U,	// EVMWUMIAA
    22538U,	// EVMWUMIAN
    20191U,	// EVNAND
    536891769U,	// EVNEG
    25227U,	// EVNOR
    25240U,	// EVOR
    19806U,	// EVORC
    27432U,	// EVRLW
    21736U,	// EVRLWI
    536898212U,	// EVRNDW
    2154328836U,	// EVSEL
    27439U,	// EVSLW
    21762U,	// EVSLWI
    151016267U,	// EVSPLATFI
    151016590U,	// EVSPLATI
    25875U,	// EVSRWIS
    26712U,	// EVSRWIU
    26047U,	// EVSRWS
    26788U,	// EVSRWU
    33574443U,	// EVSTDD
    604007970U,	// EVSTDDX
    33575310U,	// EVSTDH
    604008074U,	// EVSTDHX
    33581740U,	// EVSTDW
    604008827U,	// EVSTDWX
    33574904U,	// EVSTWHE
    604008046U,	// EVSTWHEX
    33577194U,	// EVSTWHO
    604008228U,	// EVSTWHOX
    33574996U,	// EVSTWWE
    604008056U,	// EVSTWWEX
    33577396U,	// EVSTWWO
    604008238U,	// EVSTWWOX
    536897931U,	// EVSUBFSMIAAW
    536898063U,	// EVSUBFSSIAAW
    536897997U,	// EVSUBFUMIAAW
    536898129U,	// EVSUBFUSIAAW
    27333U,	// EVSUBFW
    167799502U,	// EVSUBIFW
    25271U,	// EVXOR
    536890366U,	// EXTSB
    536890366U,	// EXTSB8
    536890366U,	// EXTSB8_32_64
    536887609U,	// EXTSB8o
    536887609U,	// EXTSBo
    536891931U,	// EXTSH
    536891931U,	// EXTSH8
    536891931U,	// EXTSH8_32_64
    536888059U,	// EXTSH8o
    536888059U,	// EXTSHo
    536898702U,	// EXTSW
    21372U,	// EXTSWSLI
    21372U,	// EXTSWSLI_32_64
    17292U,	// EXTSWSLI_32_64o
    17292U,	// EXTSWSLIo
    536898702U,	// EXTSW_32
    536898702U,	// EXTSW_32_64
    536889162U,	// EXTSW_32_64o
    536889162U,	// EXTSWo
    15814U,	// EnforceIEIO
    536896267U,	// FABSD
    536888828U,	// FABSDo
    536896267U,	// FABSS
    536888828U,	// FABSSo
    19905U,	// FADD
    25510U,	// FADDS
    17965U,	// FADDSo
    16866U,	// FADDo
    0U,	// FADDrtz
    536890974U,	// FCFID
    536896504U,	// FCFIDS
    536888904U,	// FCFIDSo
    536897566U,	// FCFIDU
    536896889U,	// FCFIDUS
    536888971U,	// FCFIDUSo
    536889015U,	// FCFIDUo
    536887810U,	// FCFIDo
    26730U,	// FCMPUD
    26730U,	// FCMPUS
    22562U,	// FCPSGND
    17480U,	// FCPSGNDo
    22562U,	// FCPSGNS
    17480U,	// FCPSGNSo
    536890993U,	// FCTID
    536897576U,	// FCTIDU
    536900249U,	// FCTIDUZ
    536889302U,	// FCTIDUZo
    536889024U,	// FCTIDUo
    536900102U,	// FCTIDZ
    536889268U,	// FCTIDZo
    536887818U,	// FCTIDo
    536898306U,	// FCTIW
    536897692U,	// FCTIWU
    536900260U,	// FCTIWUZ
    536889312U,	// FCTIWUZo
    536889068U,	// FCTIWUo
    536900271U,	// FCTIWZ
    536889322U,	// FCTIWZo
    536889123U,	// FCTIWo
    26846U,	// FDIV
    26040U,	// FDIVS
    18069U,	// FDIVSo
    18173U,	// FDIVo
    19913U,	// FMADD
    25519U,	// FMADDS
    17973U,	// FMADDSo
    16873U,	// FMADDo
    536896081U,	// FMR
    536888796U,	// FMRo
    19585U,	// FMSUB
    25489U,	// FMSUBS
    17939U,	// FMSUBSo
    16723U,	// FMSUBo
    22062U,	// FMUL
    25894U,	// FMULS
    18034U,	// FMULSo
    17418U,	// FMULo
    536896284U,	// FNABSD
    536888835U,	// FNABSDo
    536896284U,	// FNABSS
    536888835U,	// FNABSSo
    536891746U,	// FNEGD
    536888031U,	// FNEGDo
    536891746U,	// FNEGS
    536888031U,	// FNEGSo
    19922U,	// FNMADD
    25529U,	// FNMADDS
    17982U,	// FNMADDSo
    16881U,	// FNMADDo
    19594U,	// FNMSUB
    25499U,	// FNMSUBS
    17948U,	// FNMSUBSo
    16731U,	// FNMSUBo
    536891431U,	// FRE
    536896604U,	// FRES
    536888913U,	// FRESo
    536887967U,	// FREo
    536893193U,	// FRIMD
    536888348U,	// FRIMDo
    536893193U,	// FRIMS
    536888348U,	// FRIMSo
    536893491U,	// FRIND
    536888422U,	// FRINDo
    536893491U,	// FRINS
    536888422U,	// FRINSo
    536894926U,	// FRIPD
    536888701U,	// FRIPDo
    536894926U,	// FRIPS
    536888701U,	// FRIPSo
    536900184U,	// FRIZD
    536889286U,	// FRIZDo
    536900184U,	// FRIZS
    536889286U,	// FRIZSo
    536895627U,	// FRSP
    536888732U,	// FRSPo
    536891446U,	// FRSQRTE
    536896612U,	// FRSQRTES
    536888920U,	// FRSQRTESo
    536887973U,	// FRSQRTEo
    21977U,	// FSELD
    17411U,	// FSELDo
    21977U,	// FSELS
    17411U,	// FSELSo
    536897399U,	// FSQRT
    536896879U,	// FSQRTS
    536888954U,	// FSQRTSo
    536888998U,	// FSQRTo
    19577U,	// FSUB
    25480U,	// FSUBS
    17931U,	// FSUBSo
    16716U,	// FSUBo
    26869U,	// FTDIV
    536897406U,	// FTSQRT
    15376U,	// GETtlsADDR
    13677U,	// GETtlsADDR32
    15362U,	// GETtlsldADDR
    13662U,	// GETtlsldADDR32
    15711U,	// HRFID
    561852U,	// ICBI
    564451U,	// ICBIEP
    216379U,	// ICBLC
    214447U,	// ICBLQ
    222921U,	// ICBT
    222492U,	// ICBTLS
    536892111U,	// ICCCI
    21983U,	// ISEL
    21983U,	// ISEL8
    15684U,	// ISYNC
    184568379U,	// LA
    604008352U,	// LBARX
    2751492000U,	// LBARXL
    604008248U,	// LBEPX
    33583599U,	// LBZ
    33583599U,	// LBZ8
    28376U,	// LBZCIX
    201353403U,	// LBZU
    201353403U,	// LBZU8
    218132806U,	// LBZUX
    218132806U,	// LBZUX8
    604008885U,	// LBZX
    604008885U,	// LBZX8
    29109U,	// LBZXTLS
    29109U,	// LBZXTLS_
    29109U,	// LBZXTLS_32
    33574533U,	// LD
    604008359U,	// LDARX
    2751492007U,	// LDARXL
    26216U,	// LDAT
    604008380U,	// LDBRX
    28345U,	// LDCIX
    604008215U,	// LDMX
    201353264U,	// LDU
    218132722U,	// LDUX
    604008001U,	// LDX
    28225U,	// LDXTLS
    28225U,	// LDXTLS_
    15271U,	// LDgotTprelL
    13559U,	// LDgotTprelL32
    15696U,	// LDtoc
    15535U,	// LDtocBA
    15535U,	// LDtocCPT
    15209U,	// LDtocJTI
    15229U,	// LDtocL
    33574459U,	// LFD
    604008263U,	// LFDEPX
    201353214U,	// LFDU
    218132705U,	// LFDUX
    604007981U,	// LFDX
    604007890U,	// LFIWAX
    604008908U,	// LFIWZX
    33580156U,	// LFS
    201353329U,	// LFSU
    218132782U,	// LFSUX
    604008506U,	// LFSX
    33573236U,	// LHA
    33573236U,	// LHA8
    604008366U,	// LHARX
    2751492014U,	// LHARXL
    201353202U,	// LHAU
    201353202U,	// LHAU8
    218132661U,	// LHAUX
    218132661U,	// LHAUX8
    604007873U,	// LHAX
    604007873U,	// LHAX8
    604008395U,	// LHBRX
    604008395U,	// LHBRX8
    604008280U,	// LHEPX
    33583663U,	// LHZ
    33583663U,	// LHZ8
    28384U,	// LHZCIX
    201353409U,	// LHZU
    201353409U,	// LHZU8
    218132813U,	// LHZUX
    218132813U,	// LHZUX8
    604008900U,	// LHZX
    604008900U,	// LHZX8
    29124U,	// LHZXTLS
    29124U,	// LHZXTLS_
    29124U,	// LHZXTLS_32
    50353009U,	// LI
    50353009U,	// LI8
    50357511U,	// LIS
    50357511U,	// LIS8
    33581878U,	// LMW
    21817U,	// LSWI
    604007913U,	// LVEBX
    604008083U,	// LVEHX
    604008836U,	// LVEWX
    604001822U,	// LVSL
    604005094U,	// LVSR
    604008795U,	// LVX
    604001883U,	// LVXL
    33573467U,	// LWA
    604008373U,	// LWARX
    2751492021U,	// LWARXL
    26294U,	// LWAT
    218132668U,	// LWAUX
    604007907U,	// LWAX
    604007907U,	// LWAX_32
    33573467U,	// LWA_32
    604008420U,	// LWBRX
    604008420U,	// LWBRX8
    604008295U,	// LWEPX
    33583799U,	// LWZ
    33583799U,	// LWZ8
    28392U,	// LWZCIX
    201353415U,	// LWZU
    201353415U,	// LWZU8
    218132820U,	// LWZUX
    218132820U,	// LWZUX8
    604008925U,	// LWZX
    604008925U,	// LWZX8
    29149U,	// LWZXTLS
    29149U,	// LWZXTLS_
    29149U,	// LWZXTLS_32
    15703U,	// LWZtoc
    33574715U,	// LXSD
    604008016U,	// LXSDX
    604008876U,	// LXSIBZX
    604008891U,	// LXSIHZX
    604007898U,	// LXSIWAX
    604008916U,	// LXSIWZX
    33579179U,	// LXSSP
    604008335U,	// LXSSPX
    33581342U,	// LXV
    604007837U,	// LXVB16X
    604007803U,	// LXVD2X
    604008489U,	// LXVDSX
    604007856U,	// LXVH8X
    22094U,	// LXVL
    22009U,	// LXVLL
    604007820U,	// LXVW4X
    604008551U,	// LXVWSX
    604008806U,	// LXVX
    20045U,	// MADDHD
    26635U,	// MADDHDU
    20105U,	// MADDLD
    20105U,	// MADDLD8
    713201U,	// MBAR
    536891551U,	// MCRF
    536896641U,	// MCRFS
    552967U,	// MCRXRX
    234901435U,	// MFBHRBE
    549388U,	// MFCR
    549388U,	// MFCR8
    549619U,	// MFCTR
    549619U,	// MFCTR8
    536895991U,	// MFDCR
    550006U,	// MFFS
    536893550U,	// MFFSCDRN
    251679762U,	// MFFSCDRNI
    544708U,	// MFFSCE
    536893541U,	// MFFSCRN
    268456968U,	// MFFSCRNI
    546327U,	// MFFSL
    542307U,	// MFFSo
    549443U,	// MFLR
    549443U,	// MFLR8
    549586U,	// MFMSR
    285233317U,	// MFOCRF
    285233317U,	// MFOCRF8
    536896086U,	// MFPMR
    536896190U,	// MFSPR
    536896190U,	// MFSPR8
    302015180U,	// MFSR
    536893497U,	// MFSRIN
    536890387U,	// MFTB
    7365310U,	// MFTB8
    536891146U,	// MFVRD
    7889598U,	// MFVRSAVE
    7889598U,	// MFVRSAVEv
    549402U,	// MFVSCR
    536891146U,	// MFVSRD
    536891039U,	// MFVSRLD
    536900284U,	// MFVSRWZ
    20250U,	// MODSD
    27701U,	// MODSW
    20332U,	// MODUD
    27876U,	// MODUW
    15676U,	// MSGSYNC
    15690U,	// MSYNC
    536891573U,	// MTCRF
    536891573U,	// MTCRF8
    549626U,	// MTCTR
    549626U,	// MTCTR8
    549626U,	// MTCTR8loop
    549626U,	// MTCTRloop
    654516741U,	// MTDCR
    706547U,	// MTFSB0
    706555U,	// MTFSB1
    20696U,	// MTFSF
    21315U,	// MTFSFI
    17283U,	// MTFSFIo
    536891608U,	// MTFSFb
    17111U,	// MTFSFo
    549449U,	// MTLR
    549449U,	// MTLR8
    536896217U,	// MTMSR
    536891138U,	// MTMSRD
    233645U,	// MTOCRF
    233645U,	// MTOCRF8
    536896093U,	// MTPMR
    536896197U,	// MTSPR
    536896197U,	// MTSPR8
    254688U,	// MTSR
    536893505U,	// MTSRIN
    540892U,	// MTVRSAVE
    721116U,	// MTVRSAVEv
    549410U,	// MTVSCR
    536891154U,	// MTVSRD
    20002U,	// MTVSRDD
    536889952U,	// MTVSRWA
    536896967U,	// MTVSRWS
    536900293U,	// MTVSRWZ
    20053U,	// MULHD
    26644U,	// MULHDU
    18094U,	// MULHDUo
    16890U,	// MULHDo
    27376U,	// MULHW
    26770U,	// MULHWU
    18147U,	// MULHWUo
    18203U,	// MULHWo
    20113U,	// MULLD
    22669U,	// MULLDO
    17550U,	// MULLDOo
    16914U,	// MULLDo
    21365U,	// MULLI
    21365U,	// MULLI8
    27418U,	// MULLW
    22949U,	// MULLWO
    17693U,	// MULLWOo
    18219U,	// MULLWo
    15400U,	// MoveGOTtoLR
    15388U,	// MovePCtoLR
    14723U,	// MovePCtoLR8
    20177U,	// NAND
    20177U,	// NAND8
    16928U,	// NAND8o
    16928U,	// NANDo
    15820U,	// NAP
    536891739U,	// NEG
    536891739U,	// NEG8
    536893668U,	// NEG8O
    536888560U,	// NEG8Oo
    536888032U,	// NEG8o
    536893668U,	// NEGO
    536888560U,	// NEGOo
    536888032U,	// NEGo
    15829U,	// NOP
    13261U,	// NOP_GT_PWR6
    13273U,	// NOP_GT_PWR7
    25215U,	// NOR
    25215U,	// NOR8
    17890U,	// NOR8o
    17890U,	// NORo
    25208U,	// OR
    25208U,	// OR8
    17891U,	// OR8o
    19794U,	// ORC
    19794U,	// ORC8
    16842U,	// ORC8o
    16842U,	// ORCo
    21574U,	// ORI
    21574U,	// ORI8
    25869U,	// ORIS
    25869U,	// ORIS8
    17891U,	// ORo
    536890402U,	// POPCNTB
    536891220U,	// POPCNTD
    536898735U,	// POPCNTW
    15512U,	// PPC32GOT
    15522U,	// PPC32PICGOT
    21502U,	// QVALIGNI
    21502U,	// QVALIGNIb
    21502U,	// QVALIGNIs
    21635U,	// QVESPLATI
    21635U,	// QVESPLATIb
    21635U,	// QVESPLATIs
    536896265U,	// QVFABS
    536896265U,	// QVFABSs
    19903U,	// QVFADD
    25508U,	// QVFADDS
    25508U,	// QVFADDSs
    536890972U,	// QVFCFID
    536896502U,	// QVFCFIDS
    536897564U,	// QVFCFIDU
    536896887U,	// QVFCFIDUS
    536890972U,	// QVFCFIDb
    24891U,	// QVFCMPEQ
    24891U,	// QVFCMPEQb
    24891U,	// QVFCMPEQbs
    26347U,	// QVFCMPGT
    26347U,	// QVFCMPGTb
    26347U,	// QVFCMPGTbs
    26425U,	// QVFCMPLT
    26425U,	// QVFCMPLTb
    26425U,	// QVFCMPLTbs
    22560U,	// QVFCPSGN
    22560U,	// QVFCPSGNs
    536890991U,	// QVFCTID
    536897574U,	// QVFCTIDU
    536900247U,	// QVFCTIDUZ
    536900100U,	// QVFCTIDZ
    536890991U,	// QVFCTIDb
    536898304U,	// QVFCTIW
    536897690U,	// QVFCTIWU
    536900258U,	// QVFCTIWUZ
    536900269U,	// QVFCTIWZ
    21931U,	// QVFLOGICAL
    21931U,	// QVFLOGICALb
    21931U,	// QVFLOGICALs
    19911U,	// QVFMADD
    25517U,	// QVFMADDS
    25517U,	// QVFMADDSs
    536896079U,	// QVFMR
    536896079U,	// QVFMRb
    536896079U,	// QVFMRs
    19583U,	// QVFMSUB
    25487U,	// QVFMSUBS
    25487U,	// QVFMSUBSs
    22060U,	// QVFMUL
    25892U,	// QVFMULS
    25892U,	// QVFMULSs
    536896282U,	// QVFNABS
    536896282U,	// QVFNABSs
    536891744U,	// QVFNEG
    536891744U,	// QVFNEGs
    19920U,	// QVFNMADD
    25527U,	// QVFNMADDS
    25527U,	// QVFNMADDSs
    19592U,	// QVFNMSUB
    25497U,	// QVFNMSUBS
    25497U,	// QVFNMSUBSs
    22349U,	// QVFPERM
    22349U,	// QVFPERMs
    536891429U,	// QVFRE
    536896602U,	// QVFRES
    536896602U,	// QVFRESs
    536893191U,	// QVFRIM
    536893191U,	// QVFRIMs
    536893489U,	// QVFRIN
    536893489U,	// QVFRINs
    536894924U,	// QVFRIP
    536894924U,	// QVFRIPs
    536900182U,	// QVFRIZ
    536900182U,	// QVFRIZs
    536895625U,	// QVFRSP
    536895625U,	// QVFRSPs
    536891444U,	// QVFRSQRTE
    536896610U,	// QVFRSQRTES
    536896610U,	// QVFRSQRTESs
    21975U,	// QVFSEL
    21975U,	// QVFSELb
    21975U,	// QVFSELbb
    21975U,	// QVFSELbs
    19575U,	// QVFSUB
    25478U,	// QVFSUBS
    25478U,	// QVFSUBSs
    22549U,	// QVFTSTNAN
    22549U,	// QVFTSTNANb
    22549U,	// QVFTSTNANbs
    19957U,	// QVFXMADD
    25567U,	// QVFXMADDS
    22085U,	// QVFXMUL
    25901U,	// QVFXMULS
    19930U,	// QVFXXCPNMADD
    25538U,	// QVFXXCPNMADDS
    19967U,	// QVFXXMADD
    25578U,	// QVFXXMADDS
    19944U,	// QVFXXNPMADD
    25553U,	// QVFXXNPMADDS
    318788310U,	// QVGPCI
    604008650U,	// QVLFCDUX
    603998916U,	// QVLFCDUXA
    604007943U,	// QVLFCDX
    603998836U,	// QVLFCDXA
    604008727U,	// QVLFCSUX
    603998960U,	// QVLFCSUXA
    604008470U,	// QVLFCSX
    603998876U,	// QVLFCSXA
    604008470U,	// QVLFCSXs
    218132703U,	// QVLFDUX
    603998939U,	// QVLFDUXA
    604007979U,	// QVLFDX
    603998857U,	// QVLFDXA
    604007979U,	// QVLFDXb
    604007888U,	// QVLFIWAX
    603998825U,	// QVLFIWAXA
    604008906U,	// QVLFIWZX
    603999015U,	// QVLFIWZXA
    218132780U,	// QVLFSUX
    603998983U,	// QVLFSUXA
    604008504U,	// QVLFSX
    603998897U,	// QVLFSXA
    604008504U,	// QVLFSXb
    604008504U,	// QVLFSXs
    604007996U,	// QVLPCLDX
    604008521U,	// QVLPCLSX
    8417353U,	// QVLPCLSXint
    604008006U,	// QVLPCRDX
    604008541U,	// QVLPCRSX
    604008660U,	// QVSTFCDUX
    603998927U,	// QVSTFCDUXA
    604001653U,	// QVSTFCDUXI
    603998728U,	// QVSTFCDUXIA
    604007952U,	// QVSTFCDX
    603998846U,	// QVSTFCDXA
    604001611U,	// QVSTFCDXI
    603998682U,	// QVSTFCDXIA
    604008737U,	// QVSTFCSUX
    603998971U,	// QVSTFCSUXA
    604001676U,	// QVSTFCSUXI
    603998753U,	// QVSTFCSUXIA
    604008479U,	// QVSTFCSX
    603998886U,	// QVSTFCSXA
    604001632U,	// QVSTFCSXI
    603998705U,	// QVSTFCSXIA
    604008479U,	// QVSTFCSXs
    218312936U,	// QVSTFDUX
    603998949U,	// QVSTFDUXA
    604001665U,	// QVSTFDUXI
    603998741U,	// QVSTFDUXIA
    604007987U,	// QVSTFDX
    603998866U,	// QVSTFDXA
    604001622U,	// QVSTFDXI
    603998694U,	// QVSTFDXIA
    604007987U,	// QVSTFDXb
    604008851U,	// QVSTFIWX
    603999004U,	// QVSTFIWXA
    218313013U,	// QVSTFSUX
    603998993U,	// QVSTFSUXA
    604001688U,	// QVSTFSUXI
    603998766U,	// QVSTFSUXIA
    218313013U,	// QVSTFSUXs
    604008512U,	// QVSTFSX
    603998906U,	// QVSTFSXA
    604001643U,	// QVSTFSXI
    603998717U,	// QVSTFSXIA
    604008512U,	// QVSTFSXs
    15308U,	// RESTORE_CR
    15452U,	// RESTORE_CRBIT
    15179U,	// RESTORE_VRSAVE
    15738U,	// RFCI
    15749U,	// RFDI
    265030U,	// RFEBB
    15754U,	// RFI
    15712U,	// RFID
    15743U,	// RFMCI
    21952U,	// RLDCL
    17394U,	// RLDCLo
    25086U,	// RLDCR
    17867U,	// RLDCRo
    19729U,	// RLDIC
    21959U,	// RLDICL
    21959U,	// RLDICL_32
    21959U,	// RLDICL_32_64
    17402U,	// RLDICL_32o
    17402U,	// RLDICLo
    25106U,	// RLDICR
    25106U,	// RLDICR_32
    17875U,	// RLDICRo
    16811U,	// RLDICo
    3355464590U,	// RLDIMI
    3355460503U,	// RLDIMIo
    3892335510U,	// RLWIMI
    3892335510U,	// RLWIMI8
    3892331424U,	// RLWIMI8o
    3892331424U,	// RLWIMIo
    22295U,	// RLWINM
    22295U,	// RLWINM8
    17443U,	// RLWINM8o
    17443U,	// RLWINMo
    22304U,	// RLWNM
    22304U,	// RLWNM8
    17452U,	// RLWNM8o
    17452U,	// RLWNMo
    14874U,	// ReadTB
    544101U,	// SC
    14176U,	// SELECT_CC_F16
    14098U,	// SELECT_CC_F4
    14452U,	// SELECT_CC_F8
    14123U,	// SELECT_CC_I4
    14497U,	// SELECT_CC_I8
    14892U,	// SELECT_CC_QBRC
    14921U,	// SELECT_CC_QFRC
    15010U,	// SELECT_CC_QSRC
    15142U,	// SELECT_CC_SPE
    14069U,	// SELECT_CC_SPE4
    14981U,	// SELECT_CC_VRRC
    14950U,	// SELECT_CC_VSFRC
    15070U,	// SELECT_CC_VSRC
    15039U,	// SELECT_CC_VSSRC
    14191U,	// SELECT_F16
    14112U,	// SELECT_F4
    14466U,	// SELECT_F8
    14137U,	// SELECT_I4
    14671U,	// SELECT_I8
    14908U,	// SELECT_QBRC
    14937U,	// SELECT_QFRC
    15026U,	// SELECT_QSRC
    15157U,	// SELECT_SPE
    14085U,	// SELECT_SPE4
    14997U,	// SELECT_VRRC
    14967U,	// SELECT_VSFRC
    15086U,	// SELECT_VSRC
    15056U,	// SELECT_VSSRC
    536890381U,	// SETB
    536890381U,	// SETB8
    15127U,	// SETRND
    15729U,	// SETRNDi
    536887933U,	// SLBFEEo
    15632U,	// SLBIA
    544769U,	// SLBIE
    536891728U,	// SLBIEG
    536891353U,	// SLBMFEE
    536897741U,	// SLBMFEV
    536891436U,	// SLBMTE
    15660U,	// SLBSYNC
    20143U,	// SLD
    16922U,	// SLDo
    27441U,	// SLW
    27441U,	// SLW8
    18227U,	// SLW8o
    18227U,	// SLWo
    33583799U,	// SPELWZ
    604008925U,	// SPELWZX
    33582285U,	// SPESTW
    604008870U,	// SPESTWX
    15320U,	// SPILL_CR
    15467U,	// SPILL_CRBIT
    15195U,	// SPILL_VRSAVE
    19873U,	// SRAD
    21214U,	// SRADI
    21214U,	// SRADI_32
    17212U,	// SRADIo
    16859U,	// SRADo
    27270U,	// SRAW
    21712U,	// SRAWI
    17321U,	// SRAWIo
    18186U,	// SRAWo
    20229U,	// SRD
    16942U,	// SRDo
    27696U,	// SRW
    27696U,	// SRW8
    18233U,	// SRW8o
    18233U,	// SRWo
    33573941U,	// STB
    33573941U,	// STB8
    28337U,	// STBCIX
    603998092U,	// STBCX
    604008255U,	// STBEPX
    201533432U,	// STBU
    201533432U,	// STBU8
    218312899U,	// STBUX
    218312899U,	// STBUX8
    604007937U,	// STBX
    604007937U,	// STBX8
    28161U,	// STBXTLS
    28161U,	// STBXTLS_
    28161U,	// STBXTLS_32
    33574759U,	// STD
    26222U,	// STDAT
    604008387U,	// STDBRX
    28352U,	// STDCIX
    603998100U,	// STDCX
    201533493U,	// STDU
    218312952U,	// STDUX
    604008031U,	// STDX
    28255U,	// STDXTLS
    28255U,	// STDXTLS_
    33574464U,	// STFD
    604008271U,	// STFDEPX
    201533444U,	// STFDU
    218312938U,	// STFDUX
    604007989U,	// STFDX
    604008853U,	// STFIWX
    33580168U,	// STFS
    201533559U,	// STFSU
    218313015U,	// STFSUX
    604008514U,	// STFSX
    33575494U,	// STH
    33575494U,	// STH8
    604008402U,	// STHBRX
    28360U,	// STHCIX
    603998108U,	// STHCX
    604008287U,	// STHEPX
    201533522U,	// STHU
    201533522U,	// STHU8
    218312966U,	// STHUX
    218312966U,	// STHUX8
    604008107U,	// STHX
    604008107U,	// STHX8
    28331U,	// STHXTLS
    28331U,	// STHXTLS_
    28331U,	// STHXTLS_32
    33581883U,	// STMW
    15833U,	// STOP
    21823U,	// STSWI
    604007920U,	// STVEBX
    604008090U,	// STVEHX
    604008843U,	// STVEWX
    604008800U,	// STVX
    604001889U,	// STVXL
    33582285U,	// STW
    33582285U,	// STW8
    26300U,	// STWAT
    604008427U,	// STWBRX
    28368U,	// STWCIX
    603998116U,	// STWCX
    604008302U,	// STWEPX
    201533612U,	// STWU
    201533612U,	// STWU8
    218313023U,	// STWUX
    218313023U,	// STWUX8
    604008870U,	// STWX
    604008870U,	// STWX8
    29094U,	// STWXTLS
    29094U,	// STWXTLS_
    29094U,	// STWXTLS_32
    33574721U,	// STXSD
    604008023U,	// STXSDX
    604007928U,	// STXSIBX
    604007928U,	// STXSIBXv
    604008098U,	// STXSIHX
    604008098U,	// STXSIHXv
    604008861U,	// STXSIWX
    33579186U,	// STXSSP
    604008343U,	// STXSSPX
    33581347U,	// STXV
    604007846U,	// STXVB16X
    604007811U,	// STXVD2X
    604007864U,	// STXVH8X
    22100U,	// STXVL
    22016U,	// STXVLL
    604007828U,	// STXVW4X
    604008812U,	// STXVX
    20594U,	// SUBF
    20594U,	// SUBF8
    22749U,	// SUBF8O
    17640U,	// SUBF8Oo
    17104U,	// SUBF8o
    19708U,	// SUBFC
    19708U,	// SUBFC8
    22655U,	// SUBFC8O
    17534U,	// SUBFC8Oo
    16787U,	// SUBFC8o
    22655U,	// SUBFCO
    17534U,	// SUBFCOo
    16787U,	// SUBFCo
    20457U,	// SUBFE
    20457U,	// SUBFE8
    22699U,	// SUBFE8O
    17584U,	// SUBFE8Oo
    17030U,	// SUBFE8o
    22699U,	// SUBFEO
    17584U,	// SUBFEOo
    17030U,	// SUBFEo
    19736U,	// SUBFIC
    19736U,	// SUBFIC8
    536891414U,	// SUBFME
    536891414U,	// SUBFME8
    536893627U,	// SUBFME8O
    536888514U,	// SUBFME8Oo
    536887958U,	// SUBFME8o
    536893627U,	// SUBFMEO
    536888514U,	// SUBFMEOo
    536887958U,	// SUBFMEo
    22749U,	// SUBFO
    17640U,	// SUBFOo
    536891492U,	// SUBFZE
    536891492U,	// SUBFZE8
    536893652U,	// SUBFZE8O
    536888542U,	// SUBFZE8Oo
    536888007U,	// SUBFZE8o
    536893652U,	// SUBFZEO
    536888542U,	// SUBFZEOo
    536888007U,	// SUBFZEo
    17104U,	// SUBFo
    544073U,	// SYNC
    542365U,	// TABORT
    180616U,	// TABORTDC
    181028U,	// TABORTDCI
    180688U,	// TABORTWC
    181040U,	// TABORTWCI
    592707U,	// TAILB
    592707U,	// TAILB8
    608533U,	// TAILBA
    608533U,	// TAILBA8
    15855U,	// TAILBCTR
    15855U,	// TAILBCTR8
    263261U,	// TBEGIN
    15425U,	// TBEGIN_RET
    546211U,	// TCHECK
    15413U,	// TCHECK_RET
    538003596U,	// TCRETURNai
    538003503U,	// TCRETURNai8
    537988487U,	// TCRETURNdi
    537987133U,	// TCRETURNdi8
    537944548U,	// TCRETURNri
    537937995U,	// TCRETURNri8
    184143U,	// TD
    185142U,	// TDI
    262695U,	// TEND
    15638U,	// TLBIA
    661327880U,	// TLBIE
    546255U,	// TLBIEL
    536899015U,	// TLBIVAX
    544386U,	// TLBLD
    545646U,	// TLBLI
    15717U,	// TLBRE
    20510U,	// TLBRE2
    536899599U,	// TLBSX
    28687U,	// TLBSX2
    18348U,	// TLBSX2D
    15668U,	// TLBSYNC
    15723U,	// TLBWE
    20550U,	// TLBWE2
    15824U,	// TRAP
    13251U,	// TRECHKPT
    541713U,	// TRECLAIM
    263670U,	// TSR
    191649U,	// TW
    185670U,	// TWI
    536889433U,	// UPDATE_VRSAVE
    15297U,	// UpdateGBR
    19514U,	// VABSDUB
    21067U,	// VABSDUH
    27883U,	// VABSDUW
    25008U,	// VADDCUQ
    27867U,	// VADDCUW
    25039U,	// VADDECUQ
    22339U,	// VADDEUQM
    23867U,	// VADDFP
    25441U,	// VADDSBS
    25784U,	// VADDSHS
    26083U,	// VADDSWS
    22159U,	// VADDUBM
    25469U,	// VADDUBS
    22187U,	// VADDUDM
    22226U,	// VADDUHM
    25812U,	// VADDUHS
    22320U,	// VADDUQM
    22409U,	// VADDUWM
    26110U,	// VADDUWS
    20207U,	// VAND
    19701U,	// VANDC
    19389U,	// VAVGSB
    20954U,	// VAVGSH
    27717U,	// VAVGSW
    19532U,	// VAVGUB
    21085U,	// VAVGUH
    27901U,	// VAVGUW
    20148U,	// VBPERMD
    24962U,	// VBPERMQ
    134246449U,	// VCFSX
    536899633U,	// VCFSX_0
    134246655U,	// VCFUX
    536899839U,	// VCFUX_0
    25140U,	// VCIPHER
    26528U,	// VCIPHERLAST
    536890571U,	// VCLZB
    536891293U,	// VCLZD
    536892072U,	// VCLZH
    536890189U,	// VCLZLSBB
    536898907U,	// VCLZW
    23831U,	// VCMPBFP
    17746U,	// VCMPBFPo
    23930U,	// VCMPEQFP
    17767U,	// VCMPEQFPo
    19557U,	// VCMPEQUB
    16705U,	// VCMPEQUBo
    20347U,	// VCMPEQUD
    16959U,	// VCMPEQUDo
    21110U,	// VCMPEQUH
    17155U,	// VCMPEQUHo
    27926U,	// VCMPEQUW
    18258U,	// VCMPEQUWo
    23884U,	// VCMPGEFP
    17756U,	// VCMPGEFPo
    23940U,	// VCMPGTFP
    17778U,	// VCMPGTFPo
    19442U,	// VCMPGTSB
    16686U,	// VCMPGTSBo
    20265U,	// VCMPGTSD
    16948U,	// VCMPGTSDo
    21007U,	// VCMPGTSH
    17136U,	// VCMPGTSHo
    27780U,	// VCMPGTSW
    18239U,	// VCMPGTSWo
    19631U,	// VCMPGTUB
    16740U,	// VCMPGTUBo
    20357U,	// VCMPGTUD
    16970U,	// VCMPGTUDo
    21132U,	// VCMPGTUH
    17166U,	// VCMPGTUHo
    27961U,	// VCMPGTUW
    18269U,	// VCMPGTUWo
    19297U,	// VCMPNEB
    16676U,	// VCMPNEBo
    20886U,	// VCMPNEH
    17126U,	// VCMPNEHo
    27324U,	// VCMPNEW
    18193U,	// VCMPNEWo
    19649U,	// VCMPNEZB
    16751U,	// VCMPNEZBo
    21150U,	// VCMPNEZH
    17177U,	// VCMPNEZHo
    27985U,	// VCMPNEZW
    18287U,	// VCMPNEZWo
    134243928U,	// VCTSXS
    536897112U,	// VCTSXS_0
    134243936U,	// VCTUXS
    536897120U,	// VCTUXS_0
    536890578U,	// VCTZB
    536891308U,	// VCTZD
    536892079U,	// VCTZH
    536890199U,	// VCTZLSBB
    536898924U,	// VCTZW
    26898U,	// VEQV
    536894813U,	// VEXPTEFP
    1207979848U,	// VEXTRACTD
    1207979171U,	// VEXTRACTUB
    1207980672U,	// VEXTRACTUH
    1207987488U,	// VEXTRACTUW
    536890729U,	// VEXTSB2D
    536890729U,	// VEXTSB2Ds
    536897833U,	// VEXTSB2W
    536897833U,	// VEXTSB2Ws
    536890739U,	// VEXTSH2D
    536890739U,	// VEXTSH2Ds
    536897843U,	// VEXTSH2W
    536897843U,	// VEXTSH2Ws
    536890749U,	// VEXTSW2D
    536890749U,	// VEXTSW2Ds
    28409U,	// VEXTUBLX
    28634U,	// VEXTUBRX
    28419U,	// VEXTUHLX
    28659U,	// VEXTUHRX
    28429U,	// VEXTUWLX
    28669U,	// VEXTUWRX
    536890791U,	// VGBBD
    335563819U,	// VINSERTB
    1207979869U,	// VINSERTD
    335565372U,	// VINSERTH
    1207987384U,	// VINSERTW
    536894787U,	// VLOGEFP
    23858U,	// VMADDFP
    23950U,	// VMAXFP
    19461U,	// VMAXSB
    20275U,	// VMAXSD
    21026U,	// VMAXSH
    27797U,	// VMAXSW
    19641U,	// VMAXUB
    20367U,	// VMAXUD
    21142U,	// VMAXUH
    27971U,	// VMAXUW
    25761U,	// VMHADDSHS
    25772U,	// VMHRADDSHS
    23922U,	// VMINFP
    19425U,	// VMINSB
    20257U,	// VMINSD
    20990U,	// VMINSH
    27763U,	// VMINSW
    19540U,	// VMINUB
    20339U,	// VMINUD
    21093U,	// VMINUH
    27909U,	// VMINUW
    22215U,	// VMLADDUHM
    27316U,	// VMRGEW
    19306U,	// VMRGHB
    20895U,	// VMRGHH
    27359U,	// VMRGHW
    19324U,	// VMRGLB
    20903U,	// VMRGLH
    27401U,	// VMRGLW
    27674U,	// VMRGOW
    22140U,	// VMSUMMBM
    22196U,	// VMSUMSHM
    25793U,	// VMSUMSHS
    22168U,	// VMSUMUBM
    22235U,	// VMSUMUHM
    25821U,	// VMSUMUHS
    536895900U,	// VMUL10CUQ
    25017U,	// VMUL10ECUQ
    25049U,	// VMUL10EUQ
    536895890U,	// VMUL10UQ
    19380U,	// VMULESB
    20945U,	// VMULESH
    27708U,	// VMULESW
    19523U,	// VMULEUB
    21076U,	// VMULEUH
    27892U,	// VMULEUW
    19433U,	// VMULOSB
    20998U,	// VMULOSH
    27771U,	// VMULOSW
    19548U,	// VMULOUB
    21101U,	// VMULOUH
    27917U,	// VMULOUW
    22418U,	// VMULUWM
    20192U,	// VNAND
    25130U,	// VNCIPHER
    26514U,	// VNCIPHERLAST
    536890950U,	// VNEGD
    536898264U,	// VNEGW
    23840U,	// VNMSUBFP
    25228U,	// VNOR
    25241U,	// VOR
    19807U,	// VORC
    22358U,	// VPERM
    25188U,	// VPERMR
    25254U,	// VPERMXOR
    28543U,	// VPKPX
    25920U,	// VPKSDSS
    25986U,	// VPKSDUS
    25929U,	// VPKSHSS
    26004U,	// VPKSHUS
    25938U,	// VPKSWSS
    26022U,	// VPKSWUS
    22373U,	// VPKUDUM
    25995U,	// VPKUDUS
    22382U,	// VPKUHUM
    26013U,	// VPKUHUS
    22391U,	// VPKUWUM
    26031U,	// VPKUWUS
    19344U,	// VPMSUMB
    20157U,	// VPMSUMD
    20923U,	// VPMSUMH
    27457U,	// VPMSUMW
    536890401U,	// VPOPCNTB
    536891219U,	// VPOPCNTD
    536891954U,	// VPOPCNTH
    536898734U,	// VPOPCNTW
    536890798U,	// VPRTYBD
    536895784U,	// VPRTYBQ
    536898188U,	// VPRTYBW
    536894806U,	// VREFP
    536893157U,	// VRFIM
    536893482U,	// VRFIN
    536894890U,	// VRFIP
    536900148U,	// VRFIZ
    19332U,	// VRLB
    20136U,	// VRLD
    21382U,	// VRLDMI
    22287U,	// VRLDNM
    20911U,	// VRLH
    27433U,	// VRLW
    21494U,	// VRLWMI
    22303U,	// VRLWNM
    536894823U,	// VRSQRTEFP
    536899357U,	// VSBOX
    21989U,	// VSEL
    19860U,	// VSHASIGMAD
    27257U,	// VSHASIGMAW
    22047U,	// VSL
    19338U,	// VSLB
    20142U,	// VSLD
    21533U,	// VSLDOI
    20917U,	// VSLH
    22795U,	// VSLO
    26876U,	// VSLV
    27440U,	// VSLW
    134237209U,	// VSPLTB
    134237209U,	// VSPLTBs
    134238762U,	// VSPLTH
    134238762U,	// VSPLTHs
    151014350U,	// VSPLTISB
    151015915U,	// VSPLTISH
    151022678U,	// VSPLTISW
    134245533U,	// VSPLTW
    25319U,	// VSR
    19263U,	// VSRAB
    19872U,	// VSRAD
    20864U,	// VSRAH
    27269U,	// VSRAW
    19374U,	// VSRB
    20236U,	// VSRD
    20939U,	// VSRH
    22909U,	// VSRO
    26904U,	// VSRV
    27695U,	// VSRW
    24999U,	// VSUBCUQ
    27858U,	// VSUBCUW
    25029U,	// VSUBECUQ
    22329U,	// VSUBEUQM
    23850U,	// VSUBFP
    25432U,	// VSUBSBS
    25752U,	// VSUBSHS
    26074U,	// VSUBSWS
    22150U,	// VSUBUBM
    25460U,	// VSUBUBS
    22178U,	// VSUBUDM
    22206U,	// VSUBUHM
    25803U,	// VSUBUHS
    22311U,	// VSUBUQM
    22400U,	// VSUBUWM
    26101U,	// VSUBUWS
    26064U,	// VSUM2SWS
    25422U,	// VSUM4SBS
    25742U,	// VSUM4SHS
    25450U,	// VSUM4UBS
    26092U,	// VSUMSWS
    536899446U,	// VUPKHPX
    536890309U,	// VUPKHSB
    536891874U,	// VUPKHSH
    536898637U,	// VUPKHSW
    536899462U,	// VUPKLPX
    536890328U,	// VUPKLSB
    536891893U,	// VUPKLSH
    536898656U,	// VUPKLSW
    25272U,	// VXOR
    117465784U,	// V_SET0
    117465784U,	// V_SET0B
    117465784U,	// V_SET0H
    8940630U,	// V_SETALLONES
    8940630U,	// V_SETALLONESB
    8940630U,	// V_SETALLONESH
    550697U,	// WAIT
    544738U,	// WRTEE
    545595U,	// WRTEEI
    25249U,	// XOR
    25249U,	// XOR8
    17896U,	// XOR8o
    21573U,	// XORI
    21573U,	// XORI8
    25868U,	// XORIS
    25868U,	// XORIS8
    17896U,	// XORo
    536894513U,	// XSABSDP
    536895132U,	// XSABSQP
    23125U,	// XSADDDP
    24090U,	// XSADDQP
    22868U,	// XSADDQPO
    24390U,	// XSADDSP
    23559U,	// XSCMPEQDP
    23527U,	// XSCMPEXPDP
    24188U,	// XSCMPEXPQP
    23187U,	// XSCMPGEDP
    23619U,	// XSCMPGTDP
    23457U,	// XSCMPODP
    24158U,	// XSCMPOQP
    23683U,	// XSCMPUDP
    24239U,	// XSCMPUQP
    23417U,	// XSCPSGNDP
    24147U,	// XSCPSGNQP
    536894870U,	// XSCVDPHP
    536895080U,	// XSCVDPQP
    536895564U,	// XSCVDPSP
    536893524U,	// XSCVDPSPN
    536896530U,	// XSCVDPSXDS
    536896530U,	// XSCVDPSXDSs
    536897040U,	// XSCVDPSXWS
    536897040U,	// XSCVDPSXWSs
    536896566U,	// XSCVDPUXDS
    536896566U,	// XSCVDPUXDSs
    536897076U,	// XSCVDPUXWS
    536897076U,	// XSCVDPUXWSs
    536894379U,	// XSCVHPDP
    536894389U,	// XSCVQPDP
    536893713U,	// XSCVQPDPO
    536900121U,	// XSCVQPSDZ
    536900302U,	// XSCVQPSWZ
    536900132U,	// XSCVQPUDZ
    536900313U,	// XSCVQPUWZ
    536895011U,	// XSCVSDQP
    536894399U,	// XSCVSPDP
    536893513U,	// XSCVSPDPN
    536894055U,	// XSCVSXDDP
    536895320U,	// XSCVSXDSP
    536895021U,	// XSCVUDQP
    536894077U,	// XSCVUXDDP
    536895342U,	// XSCVUXDSP
    23693U,	// XSDIVDP
    24249U,	// XSDIVQP
    22899U,	// XSDIVQPO
    24804U,	// XSDIVSP
    23507U,	// XSIEXPDP
    24178U,	// XSIEXPQP
    1744853507U,	// XSMADDADP
    1744854792U,	// XSMADDASP
    1744853859U,	// XSMADDMDP
    1744855074U,	// XSMADDMSP
    1744854544U,	// XSMADDQP
    1744853321U,	// XSMADDQPO
    23115U,	// XSMAXCDP
    23753U,	// XSMAXDP
    23297U,	// XSMAXJDP
    23105U,	// XSMINCDP
    23439U,	// XSMINDP
    23287U,	// XSMINJDP
    1744853461U,	// XSMSUBADP
    1744854746U,	// XSMSUBASP
    1744853813U,	// XSMSUBMDP
    1744855028U,	// XSMSUBMSP
    1744854503U,	// XSMSUBQP
    1744853288U,	// XSMSUBQPO
    23307U,	// XSMULDP
    24138U,	// XSMULQP
    22878U,	// XSMULQPO
    24522U,	// XSMULSP
    536894493U,	// XSNABSDP
    536895122U,	// XSNABSQP
    536894161U,	// XSNEGDP
    536895031U,	// XSNEGQP
    1744853483U,	// XSNMADDADP
    1744854768U,	// XSNMADDASP
    1744853835U,	// XSNMADDMDP
    1744855050U,	// XSNMADDMSP
    1744854533U,	// XSNMADDQP
    1744853309U,	// XSNMADDQPO
    1744853437U,	// XSNMSUBADP
    1744854722U,	// XSNMSUBASP
    1744853789U,	// XSNMSUBMDP
    1744855004U,	// XSNMSUBMSP
    1744854492U,	// XSNMSUBQP
    1744853276U,	// XSNMSUBQPO
    536892453U,	// XSRDPI
    536890656U,	// XSRDPIC
    536893164U,	// XSRDPIM
    536894897U,	// XSRDPIP
    536900155U,	// XSRDPIZ
    536894121U,	// XSREDP
    536895375U,	// XSRESP
    283701U,	// XSRQPI
    290544U,	// XSRQPIX
    287007U,	// XSRQPXP
    536895633U,	// XSRSP
    536894137U,	// XSRSQRTEDP
    536895391U,	// XSRSQRTESP
    536894553U,	// XSSQRTDP
    536895141U,	// XSSQRTQP
    536893800U,	// XSSQRTQPO
    536895685U,	// XSSQRTSP
    23065U,	// XSSUBDP
    24049U,	// XSSUBQP
    22835U,	// XSSUBQPO
    24350U,	// XSSUBSP
    23702U,	// XSTDIVDP
    536894563U,	// XSTSQRTDP
    2281724459U,	// XSTSTDCDP
    2281725434U,	// XSTSTDCQP
    2281725744U,	// XSTSTDCSP
    536894451U,	// XSXEXPDP
    536895112U,	// XSXEXPQP
    536894179U,	// XSXSIGDP
    536895040U,	// XSXSIGQP
    536894522U,	// XVABSDP
    536895650U,	// XVABSSP
    23134U,	// XVADDDP
    24399U,	// XVADDSP
    23570U,	// XVCMPEQDP
    17722U,	// XVCMPEQDPo
    24702U,	// XVCMPEQSP
    17808U,	// XVCMPEQSPo
    23198U,	// XVCMPGEDP
    17710U,	// XVCMPGEDPo
    24452U,	// XVCMPGESP
    17796U,	// XVCMPGESPo
    23630U,	// XVCMPGTDP
    17734U,	// XVCMPGTDPo
    24762U,	// XVCMPGTSP
    17827U,	// XVCMPGTSPo
    23428U,	// XVCPSGNDP
    24632U,	// XVCPSGNSP
    536895574U,	// XVCVDPSP
    536896542U,	// XVCVDPSXDS
    536897052U,	// XVCVDPSXWS
    536896578U,	// XVCVDPUXDS
    536897088U,	// XVCVDPUXWS
    536895584U,	// XVCVHPSP
    536894409U,	// XVCVSPDP
    536894880U,	// XVCVSPHP
    536896554U,	// XVCVSPSXDS
    536897064U,	// XVCVSPSXWS
    536896590U,	// XVCVSPUXDS
    536897100U,	// XVCVSPUXWS
    536894066U,	// XVCVSXDDP
    536895331U,	// XVCVSXDSP
    536894643U,	// XVCVSXWDP
    536895744U,	// XVCVSXWSP
    536894088U,	// XVCVUXDDP
    536895353U,	// XVCVUXDSP
    536894654U,	// XVCVUXWDP
    536895755U,	// XVCVUXWSP
    23722U,	// XVDIVDP
    24823U,	// XVDIVSP
    23517U,	// XVIEXPDP
    24682U,	// XVIEXPSP
    1744853518U,	// XVMADDADP
    1744854803U,	// XVMADDASP
    1744853870U,	// XVMADDMDP
    1744855085U,	// XVMADDMSP
    23762U,	// XVMAXDP
    24854U,	// XVMAXSP
    23448U,	// XVMINDP
    24643U,	// XVMINSP
    1744853472U,	// XVMSUBADP
    1744854757U,	// XVMSUBASP
    1744853824U,	// XVMSUBMDP
    1744855039U,	// XVMSUBMSP
    23316U,	// XVMULDP
    24531U,	// XVMULSP
    536894503U,	// XVNABSDP
    536895640U,	// XVNABSSP
    536894170U,	// XVNEGDP
    536895415U,	// XVNEGSP
    1744853495U,	// XVNMADDADP
    1744854780U,	// XVNMADDASP
    1744853847U,	// XVNMADDMDP
    1744855062U,	// XVNMADDMSP
    1744853449U,	// XVNMSUBADP
    1744854734U,	// XVNMSUBASP
    1744853801U,	// XVNMSUBMDP
    1744855016U,	// XVNMSUBMSP
    536892461U,	// XVRDPI
    536890665U,	// XVRDPIC
    536893173U,	// XVRDPIM
    536894906U,	// XVRDPIP
    536900164U,	// XVRDPIZ
    536894129U,	// XVREDP
    536895383U,	// XVRESP
    536892477U,	// XVRSPI
    536890674U,	// XVRSPIC
    536893182U,	// XVRSPIM
    536894915U,	// XVRSPIP
    536900173U,	// XVRSPIZ
    536894149U,	// XVRSQRTEDP
    536895403U,	// XVRSQRTESP
    536894585U,	// XVSQRTDP
    536895706U,	// XVSQRTSP
    23074U,	// XVSUBDP
    24359U,	// XVSUBSP
    23712U,	// XVTDIVDP
    24813U,	// XVTDIVSP
    536894574U,	// XVTSQRTDP
    536895695U,	// XVTSQRTSP
    2281724470U,	// XVTSTDCDP
    2281725755U,	// XVTSTDCSP
    536894461U,	// XVXEXPDP
    536895604U,	// XVXEXPSP
    536894189U,	// XVXSIGDP
    536895424U,	// XVXSIGSP
    536891131U,	// XXBRD
    536891844U,	// XXBRH
    536895883U,	// XXBRQ
    536898600U,	// XXBRW
    27948U,	// XXEXTRACTUW
    2818600130U,	// XXINSERTW
    20166U,	// XXLAND
    19683U,	// XXLANDC
    26882U,	// XXLEQV
    20174U,	// XXLNAND
    25212U,	// XXLNOR
    25205U,	// XXLOR
    19791U,	// XXLORC
    25205U,	// XXLORf
    25246U,	// XXLXOR
    117465758U,	// XXLXORdpz
    117465758U,	// XXLXORspz
    117465758U,	// XXLXORz
    27367U,	// XXMRGHW
    27409U,	// XXMRGLW
    22365U,	// XXPERM
    21253U,	// XXPERMDI
    21253U,	// XXPERMDIs
    25196U,	// XXPERMR
    21995U,	// XXSEL
    21719U,	// XXSLDWI
    21719U,	// XXSLDWIs
    352340850U,	// XXSPLTIB
    27813U,	// XXSPLTW
    27813U,	// XXSPLTWs
    183513U,	// gBC
    182553U,	// gBCA
    9747724U,	// gBCAat
    189164U,	// gBCCTR
    185871U,	// gBCCTRL
    185787U,	// gBCL
    182847U,	// gBCLA
    9747740U,	// gBCLAat
    188989U,	// gBCLR
    185864U,	// gBCLRL
    10272142U,	// gBCLat
    10272041U,	// gBCat
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// CFENCE8
    0U,	// CLRLSLDI
    0U,	// CLRLSLDIo
    66U,	// CLRLSLWI
    66U,	// CLRLSLWIo
    32U,	// CLRRDI
    32U,	// CLRRDIo
    34U,	// CLRRWI
    34U,	// CLRRWIo
    0U,	// CP_COPY_FIRST
    0U,	// CP_COPYx
    0U,	// CP_PASTE_LAST
    0U,	// CP_PASTEx
    0U,	// DCBFL
    0U,	// DCBFLP
    0U,	// DCBFx
    0U,	// DCBTCT
    0U,	// DCBTDS
    0U,	// DCBTSTCT
    0U,	// DCBTSTDS
    0U,	// DCBTSTT
    0U,	// DCBTSTx
    0U,	// DCBTT
    0U,	// DCBTx
    0U,	// DFLOADf32
    0U,	// DFLOADf64
    0U,	// DFSTOREf32
    0U,	// DFSTOREf64
    0U,	// EXTLDI
    0U,	// EXTLDIo
    66U,	// EXTLWI
    66U,	// EXTLWIo
    0U,	// EXTRDI
    0U,	// EXTRDIo
    66U,	// EXTRWI
    66U,	// EXTRWIo
    66U,	// INSLWI
    66U,	// INSLWIo
    0U,	// INSRDI
    0U,	// INSRDIo
    66U,	// INSRWI
    66U,	// INSRWIo
    0U,	// LAx
    0U,	// LIWAX
    0U,	// LIWZX
    130U,	// RLWIMIbm
    130U,	// RLWIMIobm
    130U,	// RLWINMbm
    130U,	// RLWINMobm
    130U,	// RLWNMbm
    130U,	// RLWNMobm
    32U,	// ROTRDI
    32U,	// ROTRDIo
    34U,	// ROTRWI
    34U,	// ROTRWIo
    32U,	// SLDI
    32U,	// SLDIo
    34U,	// SLWI
    34U,	// SLWIo
    0U,	// SPILLTOVSR_LD
    0U,	// SPILLTOVSR_LDX
    0U,	// SPILLTOVSR_ST
    0U,	// SPILLTOVSR_STX
    32U,	// SRDI
    32U,	// SRDIo
    34U,	// SRWI
    34U,	// SRWIo
    0U,	// STIWX
    4U,	// SUBI
    4U,	// SUBIC
    4U,	// SUBICo
    4U,	// SUBIS
    0U,	// SUBPCIS
    0U,	// XFLOADf32
    0U,	// XFLOADf64
    0U,	// XFSTOREf32
    0U,	// XFSTOREf64
    38U,	// ADD4
    38U,	// ADD4O
    38U,	// ADD4Oo
    38U,	// ADD4TLS
    38U,	// ADD4o
    38U,	// ADD8
    38U,	// ADD8O
    38U,	// ADD8Oo
    38U,	// ADD8TLS
    38U,	// ADD8TLS_
    38U,	// ADD8o
    38U,	// ADDC
    38U,	// ADDC8
    38U,	// ADDC8O
    38U,	// ADDC8Oo
    38U,	// ADDC8o
    38U,	// ADDCO
    38U,	// ADDCOo
    38U,	// ADDCo
    38U,	// ADDE
    38U,	// ADDE8
    38U,	// ADDE8O
    38U,	// ADDE8Oo
    38U,	// ADDE8o
    38U,	// ADDEO
    38U,	// ADDEOo
    38U,	// ADDEo
    4U,	// ADDI
    4U,	// ADDI8
    4U,	// ADDIC
    4U,	// ADDIC8
    4U,	// ADDICo
    4U,	// ADDIS
    4U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISdtprelHA32
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIdtprelL
    0U,	// ADDIdtprelL32
    0U,	// ADDItlsgdL
    0U,	// ADDItlsgdL32
    0U,	// ADDItlsgdLADDR
    0U,	// ADDItlsgdLADDR32
    0U,	// ADDItlsldL
    0U,	// ADDItlsldL32
    0U,	// ADDItlsldLADDR
    0U,	// ADDItlsldLADDR32
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8O
    0U,	// ADDME8Oo
    0U,	// ADDME8o
    0U,	// ADDMEO
    0U,	// ADDMEOo
    0U,	// ADDMEo
    0U,	// ADDPCIS
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8O
    0U,	// ADDZE8Oo
    0U,	// ADDZE8o
    0U,	// ADDZEO
    0U,	// ADDZEOo
    0U,	// ADDZEo
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    38U,	// AND
    38U,	// AND8
    38U,	// AND8o
    38U,	// ANDC
    38U,	// ANDC8
    38U,	// ANDC8o
    38U,	// ANDCo
    8U,	// ANDISo
    8U,	// ANDISo8
    8U,	// ANDIo
    8U,	// ANDIo8
    0U,	// ANDIo_1_EQ_BIT
    0U,	// ANDIo_1_EQ_BIT8
    0U,	// ANDIo_1_GT_BIT
    0U,	// ANDIo_1_GT_BIT8
    38U,	// ANDo
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATTN
    0U,	// B
    0U,	// BA
    0U,	// BC
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCCTR
    0U,	// BCCCTR8
    0U,	// BCCCTRL
    0U,	// BCCCTRL8
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCLR
    0U,	// BCCLRL
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTR8n
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCCTRL8n
    0U,	// BCCTRLn
    0U,	// BCCTRn
    42U,	// BCDCFNo
    42U,	// BCDCFSQo
    42U,	// BCDCFZo
    38U,	// BCDCPSGNo
    0U,	// BCDCTNo
    0U,	// BCDCTSQo
    42U,	// BCDCTZo
    42U,	// BCDSETSGNo
    198U,	// BCDSRo
    198U,	// BCDSo
    198U,	// BCDTRUNCo
    38U,	// BCDUSo
    38U,	// BCDUTRUNCo
    0U,	// BCL
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLRLn
    0U,	// BCLRn
    0U,	// BCLalways
    0U,	// BCLn
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BCTRL8_LDinto_toc
    0U,	// BCn
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_TLS
    0U,	// BL8_TLS
    0U,	// BL8_TLS_
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLR
    0U,	// BLR8
    0U,	// BLRL
    0U,	// BL_NOP
    0U,	// BL_TLS
    38U,	// BPERMD
    38U,	// BRINC
    0U,	// CLRBHRB
    38U,	// CMPB
    38U,	// CMPB8
    38U,	// CMPD
    4U,	// CMPDI
    38U,	// CMPEQB
    38U,	// CMPLD
    8U,	// CMPLDI
    38U,	// CMPLW
    8U,	// CMPLWI
    0U,	// CMPRB
    0U,	// CMPRB8
    38U,	// CMPW
    4U,	// CMPWI
    0U,	// CNTLZD
    0U,	// CNTLZDo
    0U,	// CNTLZW
    0U,	// CNTLZW8
    0U,	// CNTLZW8o
    0U,	// CNTLZWo
    0U,	// CNTTZD
    0U,	// CNTTZDo
    0U,	// CNTTZW
    0U,	// CNTTZW8
    0U,	// CNTTZW8o
    0U,	// CNTTZWo
    0U,	// CP_ABORT
    42U,	// CP_COPY
    42U,	// CP_COPY8
    42U,	// CP_PASTE
    42U,	// CP_PASTE8
    42U,	// CP_PASTE8o
    42U,	// CP_PASTEo
    0U,	// CR6SET
    0U,	// CR6UNSET
    38U,	// CRAND
    38U,	// CRANDC
    38U,	// CREQV
    38U,	// CRNAND
    38U,	// CRNOR
    38U,	// CROR
    38U,	// CRORC
    12U,	// CRSET
    12U,	// CRUNSET
    38U,	// CRXOR
    0U,	// CTRL_DEP
    0U,	// DARN
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBFEP
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBSTEP
    0U,	// DCBT
    0U,	// DCBTEP
    0U,	// DCBTST
    0U,	// DCBTSTEP
    0U,	// DCBZ
    0U,	// DCBZEP
    0U,	// DCBZL
    0U,	// DCBZLEP
    0U,	// DCCCI
    38U,	// DIVD
    38U,	// DIVDE
    38U,	// DIVDEO
    38U,	// DIVDEOo
    38U,	// DIVDEU
    38U,	// DIVDEUO
    38U,	// DIVDEUOo
    38U,	// DIVDEUo
    38U,	// DIVDEo
    38U,	// DIVDO
    38U,	// DIVDOo
    38U,	// DIVDU
    38U,	// DIVDUO
    38U,	// DIVDUOo
    38U,	// DIVDUo
    38U,	// DIVDo
    38U,	// DIVW
    38U,	// DIVWE
    38U,	// DIVWEO
    38U,	// DIVWEOo
    38U,	// DIVWEU
    38U,	// DIVWEUO
    38U,	// DIVWEUOo
    38U,	// DIVWEUo
    38U,	// DIVWEo
    38U,	// DIVWO
    38U,	// DIVWOo
    38U,	// DIVWU
    38U,	// DIVWUO
    38U,	// DIVWUOo
    38U,	// DIVWUo
    38U,	// DIVWo
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// DYNAREAOFFSET
    0U,	// DYNAREAOFFSET8
    0U,	// EFDABS
    38U,	// EFDADD
    0U,	// EFDCFS
    0U,	// EFDCFSF
    0U,	// EFDCFSI
    0U,	// EFDCFSID
    0U,	// EFDCFUF
    0U,	// EFDCFUI
    0U,	// EFDCFUID
    38U,	// EFDCMPEQ
    38U,	// EFDCMPGT
    38U,	// EFDCMPLT
    0U,	// EFDCTSF
    0U,	// EFDCTSI
    0U,	// EFDCTSIDZ
    0U,	// EFDCTSIZ
    0U,	// EFDCTUF
    0U,	// EFDCTUI
    0U,	// EFDCTUIDZ
    0U,	// EFDCTUIZ
    38U,	// EFDDIV
    38U,	// EFDMUL
    0U,	// EFDNABS
    0U,	// EFDNEG
    38U,	// EFDSUB
    38U,	// EFDTSTEQ
    38U,	// EFDTSTGT
    38U,	// EFDTSTLT
    0U,	// EFSABS
    38U,	// EFSADD
    0U,	// EFSCFD
    0U,	// EFSCFSF
    0U,	// EFSCFSI
    0U,	// EFSCFUF
    0U,	// EFSCFUI
    38U,	// EFSCMPEQ
    38U,	// EFSCMPGT
    38U,	// EFSCMPLT
    0U,	// EFSCTSF
    0U,	// EFSCTSI
    0U,	// EFSCTSIZ
    0U,	// EFSCTUF
    0U,	// EFSCTUI
    0U,	// EFSCTUIZ
    38U,	// EFSDIV
    38U,	// EFSMUL
    0U,	// EFSNABS
    0U,	// EFSNEG
    38U,	// EFSSUB
    38U,	// EFSTSTEQ
    38U,	// EFSTSTGT
    38U,	// EFSTSTLT
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    38U,	// EQV
    38U,	// EQV8
    38U,	// EQV8o
    38U,	// EQVo
    0U,	// EVABS
    46U,	// EVADDIW
    0U,	// EVADDSMIAAW
    0U,	// EVADDSSIAAW
    0U,	// EVADDUMIAAW
    0U,	// EVADDUSIAAW
    38U,	// EVADDW
    38U,	// EVAND
    38U,	// EVANDC
    38U,	// EVCMPEQ
    38U,	// EVCMPGTS
    38U,	// EVCMPGTU
    38U,	// EVCMPLTS
    38U,	// EVCMPLTU
    0U,	// EVCNTLSW
    0U,	// EVCNTLZW
    38U,	// EVDIVWS
    38U,	// EVDIVWU
    38U,	// EVEQV
    0U,	// EVEXTSB
    0U,	// EVEXTSH
    0U,	// EVFSABS
    38U,	// EVFSADD
    0U,	// EVFSCFSF
    0U,	// EVFSCFSI
    0U,	// EVFSCFUF
    0U,	// EVFSCFUI
    38U,	// EVFSCMPEQ
    38U,	// EVFSCMPGT
    38U,	// EVFSCMPLT
    0U,	// EVFSCTSF
    0U,	// EVFSCTSI
    0U,	// EVFSCTSIZ
    0U,	// EVFSCTUF
    0U,	// EVFSCTUI
    0U,	// EVFSCTUIZ
    38U,	// EVFSDIV
    38U,	// EVFSMUL
    0U,	// EVFSNABS
    0U,	// EVFSNEG
    38U,	// EVFSSUB
    38U,	// EVFSTSTEQ
    38U,	// EVFSTSTGT
    38U,	// EVFSTSTLT
    0U,	// EVLDD
    0U,	// EVLDDX
    0U,	// EVLDH
    0U,	// EVLDHX
    0U,	// EVLDW
    0U,	// EVLDWX
    0U,	// EVLHHESPLAT
    0U,	// EVLHHESPLATX
    0U,	// EVLHHOSSPLAT
    0U,	// EVLHHOSSPLATX
    0U,	// EVLHHOUSPLAT
    0U,	// EVLHHOUSPLATX
    0U,	// EVLWHE
    0U,	// EVLWHEX
    0U,	// EVLWHOS
    0U,	// EVLWHOSX
    0U,	// EVLWHOU
    0U,	// EVLWHOUX
    0U,	// EVLWHSPLAT
    0U,	// EVLWHSPLATX
    0U,	// EVLWWSPLAT
    0U,	// EVLWWSPLATX
    38U,	// EVMERGEHI
    38U,	// EVMERGEHILO
    38U,	// EVMERGELO
    38U,	// EVMERGELOHI
    38U,	// EVMHEGSMFAA
    38U,	// EVMHEGSMFAN
    38U,	// EVMHEGSMIAA
    38U,	// EVMHEGSMIAN
    38U,	// EVMHEGUMIAA
    38U,	// EVMHEGUMIAN
    38U,	// EVMHESMF
    38U,	// EVMHESMFA
    38U,	// EVMHESMFAAW
    38U,	// EVMHESMFANW
    38U,	// EVMHESMI
    38U,	// EVMHESMIA
    38U,	// EVMHESMIAAW
    38U,	// EVMHESMIANW
    38U,	// EVMHESSF
    38U,	// EVMHESSFA
    38U,	// EVMHESSFAAW
    38U,	// EVMHESSFANW
    38U,	// EVMHESSIAAW
    38U,	// EVMHESSIANW
    38U,	// EVMHEUMI
    38U,	// EVMHEUMIA
    38U,	// EVMHEUMIAAW
    38U,	// EVMHEUMIANW
    38U,	// EVMHEUSIAAW
    38U,	// EVMHEUSIANW
    38U,	// EVMHOGSMFAA
    38U,	// EVMHOGSMFAN
    38U,	// EVMHOGSMIAA
    38U,	// EVMHOGSMIAN
    38U,	// EVMHOGUMIAA
    38U,	// EVMHOGUMIAN
    38U,	// EVMHOSMF
    38U,	// EVMHOSMFA
    38U,	// EVMHOSMFAAW
    38U,	// EVMHOSMFANW
    38U,	// EVMHOSMI
    38U,	// EVMHOSMIA
    38U,	// EVMHOSMIAAW
    38U,	// EVMHOSMIANW
    38U,	// EVMHOSSF
    38U,	// EVMHOSSFA
    38U,	// EVMHOSSFAAW
    38U,	// EVMHOSSFANW
    38U,	// EVMHOSSIAAW
    38U,	// EVMHOSSIANW
    38U,	// EVMHOUMI
    38U,	// EVMHOUMIA
    38U,	// EVMHOUMIAAW
    38U,	// EVMHOUMIANW
    38U,	// EVMHOUSIAAW
    38U,	// EVMHOUSIANW
    0U,	// EVMRA
    38U,	// EVMWHSMF
    38U,	// EVMWHSMFA
    38U,	// EVMWHSMI
    38U,	// EVMWHSMIA
    38U,	// EVMWHSSF
    38U,	// EVMWHSSFA
    38U,	// EVMWHUMI
    38U,	// EVMWHUMIA
    38U,	// EVMWLSMIAAW
    38U,	// EVMWLSMIANW
    38U,	// EVMWLSSIAAW
    38U,	// EVMWLSSIANW
    38U,	// EVMWLUMI
    38U,	// EVMWLUMIA
    38U,	// EVMWLUMIAAW
    38U,	// EVMWLUMIANW
    38U,	// EVMWLUSIAAW
    38U,	// EVMWLUSIANW
    38U,	// EVMWSMF
    38U,	// EVMWSMFA
    38U,	// EVMWSMFAA
    38U,	// EVMWSMFAN
    38U,	// EVMWSMI
    38U,	// EVMWSMIA
    38U,	// EVMWSMIAA
    38U,	// EVMWSMIAN
    38U,	// EVMWSSF
    38U,	// EVMWSSFA
    38U,	// EVMWSSFAA
    38U,	// EVMWSSFAN
    38U,	// EVMWUMI
    38U,	// EVMWUMIA
    38U,	// EVMWUMIAA
    38U,	// EVMWUMIAN
    38U,	// EVNAND
    0U,	// EVNEG
    38U,	// EVNOR
    38U,	// EVOR
    38U,	// EVORC
    38U,	// EVRLW
    34U,	// EVRLWI
    0U,	// EVRNDW
    0U,	// EVSEL
    38U,	// EVSLW
    34U,	// EVSLWI
    0U,	// EVSPLATFI
    0U,	// EVSPLATI
    34U,	// EVSRWIS
    34U,	// EVSRWIU
    38U,	// EVSRWS
    38U,	// EVSRWU
    0U,	// EVSTDD
    0U,	// EVSTDDX
    0U,	// EVSTDH
    0U,	// EVSTDHX
    0U,	// EVSTDW
    0U,	// EVSTDWX
    0U,	// EVSTWHE
    0U,	// EVSTWHEX
    0U,	// EVSTWHO
    0U,	// EVSTWHOX
    0U,	// EVSTWWE
    0U,	// EVSTWWEX
    0U,	// EVSTWWO
    0U,	// EVSTWWOX
    0U,	// EVSUBFSMIAAW
    0U,	// EVSUBFSSIAAW
    0U,	// EVSUBFUMIAAW
    0U,	// EVSUBFUSIAAW
    38U,	// EVSUBFW
    0U,	// EVSUBIFW
    38U,	// EVXOR
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8_32_64
    0U,	// EXTSB8o
    0U,	// EXTSBo
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8_32_64
    0U,	// EXTSH8o
    0U,	// EXTSHo
    0U,	// EXTSW
    32U,	// EXTSWSLI
    32U,	// EXTSWSLI_32_64
    32U,	// EXTSWSLI_32_64o
    32U,	// EXTSWSLIo
    0U,	// EXTSW_32
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64o
    0U,	// EXTSWo
    0U,	// EnforceIEIO
    0U,	// FABSD
    0U,	// FABSDo
    0U,	// FABSS
    0U,	// FABSSo
    38U,	// FADD
    38U,	// FADDS
    38U,	// FADDSo
    38U,	// FADDo
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDSo
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUSo
    0U,	// FCFIDUo
    0U,	// FCFIDo
    38U,	// FCMPUD
    38U,	// FCMPUS
    38U,	// FCPSGND
    38U,	// FCPSGNDo
    38U,	// FCPSGNS
    38U,	// FCPSGNSo
    0U,	// FCTID
    0U,	// FCTIDU
    0U,	// FCTIDUZ
    0U,	// FCTIDUZo
    0U,	// FCTIDUo
    0U,	// FCTIDZ
    0U,	// FCTIDZo
    0U,	// FCTIDo
    0U,	// FCTIW
    0U,	// FCTIWU
    0U,	// FCTIWUZ
    0U,	// FCTIWUZo
    0U,	// FCTIWUo
    0U,	// FCTIWZ
    0U,	// FCTIWZo
    0U,	// FCTIWo
    38U,	// FDIV
    38U,	// FDIVS
    38U,	// FDIVSo
    38U,	// FDIVo
    134U,	// FMADD
    134U,	// FMADDS
    134U,	// FMADDSo
    134U,	// FMADDo
    0U,	// FMR
    0U,	// FMRo
    134U,	// FMSUB
    134U,	// FMSUBS
    134U,	// FMSUBSo
    134U,	// FMSUBo
    38U,	// FMUL
    38U,	// FMULS
    38U,	// FMULSo
    38U,	// FMULo
    0U,	// FNABSD
    0U,	// FNABSDo
    0U,	// FNABSS
    0U,	// FNABSSo
    0U,	// FNEGD
    0U,	// FNEGDo
    0U,	// FNEGS
    0U,	// FNEGSo
    134U,	// FNMADD
    134U,	// FNMADDS
    134U,	// FNMADDSo
    134U,	// FNMADDo
    134U,	// FNMSUB
    134U,	// FNMSUBS
    134U,	// FNMSUBSo
    134U,	// FNMSUBo
    0U,	// FRE
    0U,	// FRES
    0U,	// FRESo
    0U,	// FREo
    0U,	// FRIMD
    0U,	// FRIMDo
    0U,	// FRIMS
    0U,	// FRIMSo
    0U,	// FRIND
    0U,	// FRINDo
    0U,	// FRINS
    0U,	// FRINSo
    0U,	// FRIPD
    0U,	// FRIPDo
    0U,	// FRIPS
    0U,	// FRIPSo
    0U,	// FRIZD
    0U,	// FRIZDo
    0U,	// FRIZS
    0U,	// FRIZSo
    0U,	// FRSP
    0U,	// FRSPo
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTESo
    0U,	// FRSQRTEo
    134U,	// FSELD
    134U,	// FSELDo
    134U,	// FSELS
    134U,	// FSELSo
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTSo
    0U,	// FSQRTo
    38U,	// FSUB
    38U,	// FSUBS
    38U,	// FSUBSo
    38U,	// FSUBo
    38U,	// FTDIV
    0U,	// FTSQRT
    0U,	// GETtlsADDR
    0U,	// GETtlsADDR32
    0U,	// GETtlsldADDR
    0U,	// GETtlsldADDR32
    0U,	// HRFID
    0U,	// ICBI
    0U,	// ICBIEP
    0U,	// ICBLC
    0U,	// ICBLQ
    0U,	// ICBT
    0U,	// ICBTLS
    0U,	// ICCCI
    134U,	// ISEL
    134U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LBARX
    0U,	// LBARXL
    0U,	// LBEPX
    0U,	// LBZ
    0U,	// LBZ8
    38U,	// LBZCIX
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    38U,	// LBZXTLS
    38U,	// LBZXTLS_
    38U,	// LBZXTLS_32
    0U,	// LD
    0U,	// LDARX
    0U,	// LDARXL
    34U,	// LDAT
    0U,	// LDBRX
    38U,	// LDCIX
    0U,	// LDMX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    38U,	// LDXTLS
    38U,	// LDXTLS_
    0U,	// LDgotTprelL
    0U,	// LDgotTprelL32
    0U,	// LDtoc
    0U,	// LDtocBA
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LFD
    0U,	// LFDEPX
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHARX
    0U,	// LHARXL
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHBRX8
    0U,	// LHEPX
    0U,	// LHZ
    0U,	// LHZ8
    38U,	// LHZCIX
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    38U,	// LHZXTLS
    38U,	// LHZXTLS_
    38U,	// LHZXTLS_32
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    34U,	// LSWI
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    0U,	// LWARXL
    34U,	// LWAT
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWAX_32
    0U,	// LWA_32
    0U,	// LWBRX
    0U,	// LWBRX8
    0U,	// LWEPX
    0U,	// LWZ
    0U,	// LWZ8
    38U,	// LWZCIX
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    38U,	// LWZXTLS
    38U,	// LWZXTLS_
    38U,	// LWZXTLS_32
    0U,	// LWZtoc
    0U,	// LXSD
    0U,	// LXSDX
    0U,	// LXSIBZX
    0U,	// LXSIHZX
    0U,	// LXSIWAX
    0U,	// LXSIWZX
    0U,	// LXSSP
    0U,	// LXSSPX
    0U,	// LXV
    0U,	// LXVB16X
    0U,	// LXVD2X
    0U,	// LXVDSX
    0U,	// LXVH8X
    38U,	// LXVL
    38U,	// LXVLL
    0U,	// LXVW4X
    0U,	// LXVWSX
    0U,	// LXVX
    134U,	// MADDHD
    134U,	// MADDHDU
    134U,	// MADDLD
    134U,	// MADDLD8
    0U,	// MBAR
    0U,	// MCRF
    0U,	// MCRFS
    0U,	// MCRXRX
    0U,	// MFBHRBE
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFDCR
    0U,	// MFFS
    0U,	// MFFSCDRN
    0U,	// MFFSCDRNI
    0U,	// MFFSCE
    0U,	// MFFSCRN
    0U,	// MFFSCRNI
    0U,	// MFFSL
    0U,	// MFFSo
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFMSR
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFPMR
    0U,	// MFSPR
    0U,	// MFSPR8
    0U,	// MFSR
    0U,	// MFSRIN
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRD
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVSCR
    0U,	// MFVSRD
    0U,	// MFVSRLD
    0U,	// MFVSRWZ
    38U,	// MODSD
    38U,	// MODSW
    38U,	// MODUD
    38U,	// MODUW
    0U,	// MSGSYNC
    0U,	// MSYNC
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTDCR
    0U,	// MTFSB0
    0U,	// MTFSB1
    134U,	// MTFSF
    38U,	// MTFSFI
    38U,	// MTFSFIo
    0U,	// MTFSFb
    134U,	// MTFSFo
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTMSR
    0U,	// MTMSRD
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTPMR
    0U,	// MTSPR
    0U,	// MTSPR8
    0U,	// MTSR
    0U,	// MTSRIN
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVSCR
    0U,	// MTVSRD
    38U,	// MTVSRDD
    0U,	// MTVSRWA
    0U,	// MTVSRWS
    0U,	// MTVSRWZ
    38U,	// MULHD
    38U,	// MULHDU
    38U,	// MULHDUo
    38U,	// MULHDo
    38U,	// MULHW
    38U,	// MULHWU
    38U,	// MULHWUo
    38U,	// MULHWo
    38U,	// MULLD
    38U,	// MULLDO
    38U,	// MULLDOo
    38U,	// MULLDo
    4U,	// MULLI
    4U,	// MULLI8
    38U,	// MULLW
    38U,	// MULLWO
    38U,	// MULLWOo
    38U,	// MULLWo
    0U,	// MoveGOTtoLR
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    38U,	// NAND
    38U,	// NAND8
    38U,	// NAND8o
    38U,	// NANDo
    0U,	// NAP
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8O
    0U,	// NEG8Oo
    0U,	// NEG8o
    0U,	// NEGO
    0U,	// NEGOo
    0U,	// NEGo
    0U,	// NOP
    0U,	// NOP_GT_PWR6
    0U,	// NOP_GT_PWR7
    38U,	// NOR
    38U,	// NOR8
    38U,	// NOR8o
    38U,	// NORo
    38U,	// OR
    38U,	// OR8
    38U,	// OR8o
    38U,	// ORC
    38U,	// ORC8
    38U,	// ORC8o
    38U,	// ORCo
    8U,	// ORI
    8U,	// ORI8
    8U,	// ORIS
    8U,	// ORIS8
    38U,	// ORo
    0U,	// POPCNTB
    0U,	// POPCNTD
    0U,	// POPCNTW
    0U,	// PPC32GOT
    0U,	// PPC32PICGOT
    262U,	// QVALIGNI
    262U,	// QVALIGNIb
    262U,	// QVALIGNIs
    16U,	// QVESPLATI
    16U,	// QVESPLATIb
    16U,	// QVESPLATIs
    0U,	// QVFABS
    0U,	// QVFABSs
    38U,	// QVFADD
    38U,	// QVFADDS
    38U,	// QVFADDSs
    0U,	// QVFCFID
    0U,	// QVFCFIDS
    0U,	// QVFCFIDU
    0U,	// QVFCFIDUS
    0U,	// QVFCFIDb
    38U,	// QVFCMPEQ
    38U,	// QVFCMPEQb
    38U,	// QVFCMPEQbs
    38U,	// QVFCMPGT
    38U,	// QVFCMPGTb
    38U,	// QVFCMPGTbs
    38U,	// QVFCMPLT
    38U,	// QVFCMPLTb
    38U,	// QVFCMPLTbs
    38U,	// QVFCPSGN
    38U,	// QVFCPSGNs
    0U,	// QVFCTID
    0U,	// QVFCTIDU
    0U,	// QVFCTIDUZ
    0U,	// QVFCTIDZ
    0U,	// QVFCTIDb
    0U,	// QVFCTIW
    0U,	// QVFCTIWU
    0U,	// QVFCTIWUZ
    0U,	// QVFCTIWZ
    326U,	// QVFLOGICAL
    326U,	// QVFLOGICALb
    326U,	// QVFLOGICALs
    18U,	// QVFMADD
    18U,	// QVFMADDS
    18U,	// QVFMADDSs
    0U,	// QVFMR
    0U,	// QVFMRb
    0U,	// QVFMRs
    18U,	// QVFMSUB
    18U,	// QVFMSUBS
    18U,	// QVFMSUBSs
    38U,	// QVFMUL
    38U,	// QVFMULS
    38U,	// QVFMULSs
    0U,	// QVFNABS
    0U,	// QVFNABSs
    0U,	// QVFNEG
    0U,	// QVFNEGs
    18U,	// QVFNMADD
    18U,	// QVFNMADDS
    18U,	// QVFNMADDSs
    18U,	// QVFNMSUB
    18U,	// QVFNMSUBS
    18U,	// QVFNMSUBSs
    134U,	// QVFPERM
    134U,	// QVFPERMs
    0U,	// QVFRE
    0U,	// QVFRES
    0U,	// QVFRESs
    0U,	// QVFRIM
    0U,	// QVFRIMs
    0U,	// QVFRIN
    0U,	// QVFRINs
    0U,	// QVFRIP
    0U,	// QVFRIPs
    0U,	// QVFRIZ
    0U,	// QVFRIZs
    0U,	// QVFRSP
    0U,	// QVFRSPs
    0U,	// QVFRSQRTE
    0U,	// QVFRSQRTES
    0U,	// QVFRSQRTESs
    18U,	// QVFSEL
    18U,	// QVFSELb
    18U,	// QVFSELbb
    18U,	// QVFSELbs
    38U,	// QVFSUB
    38U,	// QVFSUBS
    38U,	// QVFSUBSs
    38U,	// QVFTSTNAN
    38U,	// QVFTSTNANb
    38U,	// QVFTSTNANbs
    18U,	// QVFXMADD
    18U,	// QVFXMADDS
    38U,	// QVFXMUL
    38U,	// QVFXMULS
    18U,	// QVFXXCPNMADD
    18U,	// QVFXXCPNMADDS
    18U,	// QVFXXMADD
    18U,	// QVFXXMADDS
    18U,	// QVFXXNPMADD
    18U,	// QVFXXNPMADDS
    0U,	// QVGPCI
    0U,	// QVLFCDUX
    0U,	// QVLFCDUXA
    0U,	// QVLFCDX
    0U,	// QVLFCDXA
    0U,	// QVLFCSUX
    0U,	// QVLFCSUXA
    0U,	// QVLFCSX
    0U,	// QVLFCSXA
    0U,	// QVLFCSXs
    0U,	// QVLFDUX
    0U,	// QVLFDUXA
    0U,	// QVLFDX
    0U,	// QVLFDXA
    0U,	// QVLFDXb
    0U,	// QVLFIWAX
    0U,	// QVLFIWAXA
    0U,	// QVLFIWZX
    0U,	// QVLFIWZXA
    0U,	// QVLFSUX
    0U,	// QVLFSUXA
    0U,	// QVLFSX
    0U,	// QVLFSXA
    0U,	// QVLFSXb
    0U,	// QVLFSXs
    0U,	// QVLPCLDX
    0U,	// QVLPCLSX
    0U,	// QVLPCLSXint
    0U,	// QVLPCRDX
    0U,	// QVLPCRSX
    0U,	// QVSTFCDUX
    0U,	// QVSTFCDUXA
    0U,	// QVSTFCDUXI
    0U,	// QVSTFCDUXIA
    0U,	// QVSTFCDX
    0U,	// QVSTFCDXA
    0U,	// QVSTFCDXI
    0U,	// QVSTFCDXIA
    0U,	// QVSTFCSUX
    0U,	// QVSTFCSUXA
    0U,	// QVSTFCSUXI
    0U,	// QVSTFCSUXIA
    0U,	// QVSTFCSX
    0U,	// QVSTFCSXA
    0U,	// QVSTFCSXI
    0U,	// QVSTFCSXIA
    0U,	// QVSTFCSXs
    0U,	// QVSTFDUX
    0U,	// QVSTFDUXA
    0U,	// QVSTFDUXI
    0U,	// QVSTFDUXIA
    0U,	// QVSTFDX
    0U,	// QVSTFDXA
    0U,	// QVSTFDXI
    0U,	// QVSTFDXIA
    0U,	// QVSTFDXb
    0U,	// QVSTFIWX
    0U,	// QVSTFIWXA
    0U,	// QVSTFSUX
    0U,	// QVSTFSUXA
    0U,	// QVSTFSUXI
    0U,	// QVSTFSUXIA
    0U,	// QVSTFSUXs
    0U,	// QVSTFSX
    0U,	// QVSTFSXA
    0U,	// QVSTFSXI
    0U,	// QVSTFSXIA
    0U,	// QVSTFSXs
    0U,	// RESTORE_CR
    0U,	// RESTORE_CRBIT
    0U,	// RESTORE_VRSAVE
    0U,	// RFCI
    0U,	// RFDI
    0U,	// RFEBB
    0U,	// RFI
    0U,	// RFID
    0U,	// RFMCI
    6U,	// RLDCL
    6U,	// RLDCLo
    6U,	// RLDCR
    6U,	// RLDCRo
    0U,	// RLDIC
    0U,	// RLDICL
    0U,	// RLDICL_32
    0U,	// RLDICL_32_64
    0U,	// RLDICL_32o
    0U,	// RLDICLo
    0U,	// RLDICR
    0U,	// RLDICR_32
    0U,	// RLDICRo
    0U,	// RLDICo
    0U,	// RLDIMI
    0U,	// RLDIMIo
    0U,	// RLWIMI
    0U,	// RLWIMI8
    0U,	// RLWIMI8o
    0U,	// RLWIMIo
    578U,	// RLWINM
    578U,	// RLWINM8
    578U,	// RLWINM8o
    578U,	// RLWINMo
    582U,	// RLWNM
    582U,	// RLWNM8
    582U,	// RLWNM8o
    582U,	// RLWNMo
    0U,	// ReadTB
    0U,	// SC
    0U,	// SELECT_CC_F16
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_QBRC
    0U,	// SELECT_CC_QFRC
    0U,	// SELECT_CC_QSRC
    0U,	// SELECT_CC_SPE
    0U,	// SELECT_CC_SPE4
    0U,	// SELECT_CC_VRRC
    0U,	// SELECT_CC_VSFRC
    0U,	// SELECT_CC_VSRC
    0U,	// SELECT_CC_VSSRC
    0U,	// SELECT_F16
    0U,	// SELECT_F4
    0U,	// SELECT_F8
    0U,	// SELECT_I4
    0U,	// SELECT_I8
    0U,	// SELECT_QBRC
    0U,	// SELECT_QFRC
    0U,	// SELECT_QSRC
    0U,	// SELECT_SPE
    0U,	// SELECT_SPE4
    0U,	// SELECT_VRRC
    0U,	// SELECT_VSFRC
    0U,	// SELECT_VSRC
    0U,	// SELECT_VSSRC
    0U,	// SETB
    0U,	// SETB8
    0U,	// SETRND
    0U,	// SETRNDi
    0U,	// SLBFEEo
    0U,	// SLBIA
    0U,	// SLBIE
    0U,	// SLBIEG
    0U,	// SLBMFEE
    0U,	// SLBMFEV
    0U,	// SLBMTE
    0U,	// SLBSYNC
    38U,	// SLD
    38U,	// SLDo
    38U,	// SLW
    38U,	// SLW8
    38U,	// SLW8o
    38U,	// SLWo
    0U,	// SPELWZ
    0U,	// SPELWZX
    0U,	// SPESTW
    0U,	// SPESTWX
    0U,	// SPILL_CR
    0U,	// SPILL_CRBIT
    0U,	// SPILL_VRSAVE
    38U,	// SRAD
    32U,	// SRADI
    32U,	// SRADI_32
    32U,	// SRADIo
    38U,	// SRADo
    38U,	// SRAW
    34U,	// SRAWI
    34U,	// SRAWIo
    38U,	// SRAWo
    38U,	// SRD
    38U,	// SRDo
    38U,	// SRW
    38U,	// SRW8
    38U,	// SRW8o
    38U,	// SRWo
    0U,	// STB
    0U,	// STB8
    38U,	// STBCIX
    0U,	// STBCX
    0U,	// STBEPX
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    38U,	// STBXTLS
    38U,	// STBXTLS_
    38U,	// STBXTLS_32
    0U,	// STD
    34U,	// STDAT
    0U,	// STDBRX
    38U,	// STDCIX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    38U,	// STDXTLS
    38U,	// STDXTLS_
    0U,	// STFD
    0U,	// STFDEPX
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    38U,	// STHCIX
    0U,	// STHCX
    0U,	// STHEPX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    38U,	// STHXTLS
    38U,	// STHXTLS_
    38U,	// STHXTLS_32
    0U,	// STMW
    0U,	// STOP
    34U,	// STSWI
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    34U,	// STWAT
    0U,	// STWBRX
    38U,	// STWCIX
    0U,	// STWCX
    0U,	// STWEPX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    38U,	// STWXTLS
    38U,	// STWXTLS_
    38U,	// STWXTLS_32
    0U,	// STXSD
    0U,	// STXSDX
    0U,	// STXSIBX
    0U,	// STXSIBXv
    0U,	// STXSIHX
    0U,	// STXSIHXv
    0U,	// STXSIWX
    0U,	// STXSSP
    0U,	// STXSSPX
    0U,	// STXV
    0U,	// STXVB16X
    0U,	// STXVD2X
    0U,	// STXVH8X
    38U,	// STXVL
    38U,	// STXVLL
    0U,	// STXVW4X
    0U,	// STXVX
    38U,	// SUBF
    38U,	// SUBF8
    38U,	// SUBF8O
    38U,	// SUBF8Oo
    38U,	// SUBF8o
    38U,	// SUBFC
    38U,	// SUBFC8
    38U,	// SUBFC8O
    38U,	// SUBFC8Oo
    38U,	// SUBFC8o
    38U,	// SUBFCO
    38U,	// SUBFCOo
    38U,	// SUBFCo
    38U,	// SUBFE
    38U,	// SUBFE8
    38U,	// SUBFE8O
    38U,	// SUBFE8Oo
    38U,	// SUBFE8o
    38U,	// SUBFEO
    38U,	// SUBFEOo
    38U,	// SUBFEo
    4U,	// SUBFIC
    4U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8O
    0U,	// SUBFME8Oo
    0U,	// SUBFME8o
    0U,	// SUBFMEO
    0U,	// SUBFMEOo
    0U,	// SUBFMEo
    38U,	// SUBFO
    38U,	// SUBFOo
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8O
    0U,	// SUBFZE8Oo
    0U,	// SUBFZE8o
    0U,	// SUBFZEO
    0U,	// SUBFZEOo
    0U,	// SUBFZEo
    38U,	// SUBFo
    0U,	// SYNC
    0U,	// TABORT
    38U,	// TABORTDC
    34U,	// TABORTDCI
    38U,	// TABORTWC
    34U,	// TABORTWCI
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TBEGIN
    0U,	// TBEGIN_RET
    0U,	// TCHECK
    0U,	// TCHECK_RET
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    38U,	// TD
    4U,	// TDI
    0U,	// TEND
    0U,	// TLBIA
    0U,	// TLBIE
    0U,	// TLBIEL
    0U,	// TLBIVAX
    0U,	// TLBLD
    0U,	// TLBLI
    0U,	// TLBRE
    38U,	// TLBRE2
    0U,	// TLBSX
    38U,	// TLBSX2
    38U,	// TLBSX2D
    0U,	// TLBSYNC
    0U,	// TLBWE
    38U,	// TLBWE2
    0U,	// TRAP
    0U,	// TRECHKPT
    0U,	// TRECLAIM
    0U,	// TSR
    38U,	// TW
    4U,	// TWI
    0U,	// UPDATE_VRSAVE
    0U,	// UpdateGBR
    38U,	// VABSDUB
    38U,	// VABSDUH
    38U,	// VABSDUW
    38U,	// VADDCUQ
    38U,	// VADDCUW
    134U,	// VADDECUQ
    134U,	// VADDEUQM
    38U,	// VADDFP
    38U,	// VADDSBS
    38U,	// VADDSHS
    38U,	// VADDSWS
    38U,	// VADDUBM
    38U,	// VADDUBS
    38U,	// VADDUDM
    38U,	// VADDUHM
    38U,	// VADDUHS
    38U,	// VADDUQM
    38U,	// VADDUWM
    38U,	// VADDUWS
    38U,	// VAND
    38U,	// VANDC
    38U,	// VAVGSB
    38U,	// VAVGSH
    38U,	// VAVGSW
    38U,	// VAVGUB
    38U,	// VAVGUH
    38U,	// VAVGUW
    38U,	// VBPERMD
    38U,	// VBPERMQ
    1U,	// VCFSX
    1U,	// VCFSX_0
    1U,	// VCFUX
    1U,	// VCFUX_0
    38U,	// VCIPHER
    38U,	// VCIPHERLAST
    0U,	// VCLZB
    0U,	// VCLZD
    0U,	// VCLZH
    0U,	// VCLZLSBB
    0U,	// VCLZW
    38U,	// VCMPBFP
    38U,	// VCMPBFPo
    38U,	// VCMPEQFP
    38U,	// VCMPEQFPo
    38U,	// VCMPEQUB
    38U,	// VCMPEQUBo
    38U,	// VCMPEQUD
    38U,	// VCMPEQUDo
    38U,	// VCMPEQUH
    38U,	// VCMPEQUHo
    38U,	// VCMPEQUW
    38U,	// VCMPEQUWo
    38U,	// VCMPGEFP
    38U,	// VCMPGEFPo
    38U,	// VCMPGTFP
    38U,	// VCMPGTFPo
    38U,	// VCMPGTSB
    38U,	// VCMPGTSBo
    38U,	// VCMPGTSD
    38U,	// VCMPGTSDo
    38U,	// VCMPGTSH
    38U,	// VCMPGTSHo
    38U,	// VCMPGTSW
    38U,	// VCMPGTSWo
    38U,	// VCMPGTUB
    38U,	// VCMPGTUBo
    38U,	// VCMPGTUD
    38U,	// VCMPGTUDo
    38U,	// VCMPGTUH
    38U,	// VCMPGTUHo
    38U,	// VCMPGTUW
    38U,	// VCMPGTUWo
    38U,	// VCMPNEB
    38U,	// VCMPNEBo
    38U,	// VCMPNEH
    38U,	// VCMPNEHo
    38U,	// VCMPNEW
    38U,	// VCMPNEWo
    38U,	// VCMPNEZB
    38U,	// VCMPNEZBo
    38U,	// VCMPNEZH
    38U,	// VCMPNEZHo
    38U,	// VCMPNEZW
    38U,	// VCMPNEZWo
    1U,	// VCTSXS
    1U,	// VCTSXS_0
    1U,	// VCTUXS
    1U,	// VCTUXS_0
    0U,	// VCTZB
    0U,	// VCTZD
    0U,	// VCTZH
    0U,	// VCTZLSBB
    0U,	// VCTZW
    38U,	// VEQV
    0U,	// VEXPTEFP
    1U,	// VEXTRACTD
    1U,	// VEXTRACTUB
    1U,	// VEXTRACTUH
    1U,	// VEXTRACTUW
    0U,	// VEXTSB2D
    0U,	// VEXTSB2Ds
    0U,	// VEXTSB2W
    0U,	// VEXTSB2Ws
    0U,	// VEXTSH2D
    0U,	// VEXTSH2Ds
    0U,	// VEXTSH2W
    0U,	// VEXTSH2Ws
    0U,	// VEXTSW2D
    0U,	// VEXTSW2Ds
    38U,	// VEXTUBLX
    38U,	// VEXTUBRX
    38U,	// VEXTUHLX
    38U,	// VEXTUHRX
    38U,	// VEXTUWLX
    38U,	// VEXTUWRX
    0U,	// VGBBD
    0U,	// VINSERTB
    1U,	// VINSERTD
    0U,	// VINSERTH
    1U,	// VINSERTW
    0U,	// VLOGEFP
    134U,	// VMADDFP
    38U,	// VMAXFP
    38U,	// VMAXSB
    38U,	// VMAXSD
    38U,	// VMAXSH
    38U,	// VMAXSW
    38U,	// VMAXUB
    38U,	// VMAXUD
    38U,	// VMAXUH
    38U,	// VMAXUW
    134U,	// VMHADDSHS
    134U,	// VMHRADDSHS
    38U,	// VMINFP
    38U,	// VMINSB
    38U,	// VMINSD
    38U,	// VMINSH
    38U,	// VMINSW
    38U,	// VMINUB
    38U,	// VMINUD
    38U,	// VMINUH
    38U,	// VMINUW
    134U,	// VMLADDUHM
    38U,	// VMRGEW
    38U,	// VMRGHB
    38U,	// VMRGHH
    38U,	// VMRGHW
    38U,	// VMRGLB
    38U,	// VMRGLH
    38U,	// VMRGLW
    38U,	// VMRGOW
    134U,	// VMSUMMBM
    134U,	// VMSUMSHM
    134U,	// VMSUMSHS
    134U,	// VMSUMUBM
    134U,	// VMSUMUHM
    134U,	// VMSUMUHS
    0U,	// VMUL10CUQ
    38U,	// VMUL10ECUQ
    38U,	// VMUL10EUQ
    0U,	// VMUL10UQ
    38U,	// VMULESB
    38U,	// VMULESH
    38U,	// VMULESW
    38U,	// VMULEUB
    38U,	// VMULEUH
    38U,	// VMULEUW
    38U,	// VMULOSB
    38U,	// VMULOSH
    38U,	// VMULOSW
    38U,	// VMULOUB
    38U,	// VMULOUH
    38U,	// VMULOUW
    38U,	// VMULUWM
    38U,	// VNAND
    38U,	// VNCIPHER
    38U,	// VNCIPHERLAST
    0U,	// VNEGD
    0U,	// VNEGW
    134U,	// VNMSUBFP
    38U,	// VNOR
    38U,	// VOR
    38U,	// VORC
    134U,	// VPERM
    134U,	// VPERMR
    134U,	// VPERMXOR
    38U,	// VPKPX
    38U,	// VPKSDSS
    38U,	// VPKSDUS
    38U,	// VPKSHSS
    38U,	// VPKSHUS
    38U,	// VPKSWSS
    38U,	// VPKSWUS
    38U,	// VPKUDUM
    38U,	// VPKUDUS
    38U,	// VPKUHUM
    38U,	// VPKUHUS
    38U,	// VPKUWUM
    38U,	// VPKUWUS
    38U,	// VPMSUMB
    38U,	// VPMSUMD
    38U,	// VPMSUMH
    38U,	// VPMSUMW
    0U,	// VPOPCNTB
    0U,	// VPOPCNTD
    0U,	// VPOPCNTH
    0U,	// VPOPCNTW
    0U,	// VPRTYBD
    0U,	// VPRTYBQ
    0U,	// VPRTYBW
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    38U,	// VRLB
    38U,	// VRLD
    38U,	// VRLDMI
    38U,	// VRLDNM
    38U,	// VRLH
    38U,	// VRLW
    38U,	// VRLWMI
    38U,	// VRLWNM
    0U,	// VRSQRTEFP
    0U,	// VSBOX
    134U,	// VSEL
    394U,	// VSHASIGMAD
    394U,	// VSHASIGMAW
    38U,	// VSL
    38U,	// VSLB
    38U,	// VSLD
    390U,	// VSLDOI
    38U,	// VSLH
    38U,	// VSLO
    38U,	// VSLV
    38U,	// VSLW
    1U,	// VSPLTB
    1U,	// VSPLTBs
    1U,	// VSPLTH
    1U,	// VSPLTHs
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    1U,	// VSPLTW
    38U,	// VSR
    38U,	// VSRAB
    38U,	// VSRAD
    38U,	// VSRAH
    38U,	// VSRAW
    38U,	// VSRB
    38U,	// VSRD
    38U,	// VSRH
    38U,	// VSRO
    38U,	// VSRV
    38U,	// VSRW
    38U,	// VSUBCUQ
    38U,	// VSUBCUW
    134U,	// VSUBECUQ
    134U,	// VSUBEUQM
    38U,	// VSUBFP
    38U,	// VSUBSBS
    38U,	// VSUBSHS
    38U,	// VSUBSWS
    38U,	// VSUBUBM
    38U,	// VSUBUBS
    38U,	// VSUBUDM
    38U,	// VSUBUHM
    38U,	// VSUBUHS
    38U,	// VSUBUQM
    38U,	// VSUBUWM
    38U,	// VSUBUWS
    38U,	// VSUM2SWS
    38U,	// VSUM4SBS
    38U,	// VSUM4SHS
    38U,	// VSUM4UBS
    38U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKHSW
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VUPKLSW
    38U,	// VXOR
    12U,	// V_SET0
    12U,	// V_SET0B
    12U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// WRTEE
    0U,	// WRTEEI
    38U,	// XOR
    38U,	// XOR8
    38U,	// XOR8o
    8U,	// XORI
    8U,	// XORI8
    8U,	// XORIS
    8U,	// XORIS8
    38U,	// XORo
    0U,	// XSABSDP
    0U,	// XSABSQP
    38U,	// XSADDDP
    38U,	// XSADDQP
    38U,	// XSADDQPO
    38U,	// XSADDSP
    38U,	// XSCMPEQDP
    38U,	// XSCMPEXPDP
    38U,	// XSCMPEXPQP
    38U,	// XSCMPGEDP
    38U,	// XSCMPGTDP
    38U,	// XSCMPODP
    38U,	// XSCMPOQP
    38U,	// XSCMPUDP
    38U,	// XSCMPUQP
    38U,	// XSCPSGNDP
    38U,	// XSCPSGNQP
    0U,	// XSCVDPHP
    0U,	// XSCVDPQP
    0U,	// XSCVDPSP
    0U,	// XSCVDPSPN
    0U,	// XSCVDPSXDS
    0U,	// XSCVDPSXDSs
    0U,	// XSCVDPSXWS
    0U,	// XSCVDPSXWSs
    0U,	// XSCVDPUXDS
    0U,	// XSCVDPUXDSs
    0U,	// XSCVDPUXWS
    0U,	// XSCVDPUXWSs
    0U,	// XSCVHPDP
    0U,	// XSCVQPDP
    0U,	// XSCVQPDPO
    0U,	// XSCVQPSDZ
    0U,	// XSCVQPSWZ
    0U,	// XSCVQPUDZ
    0U,	// XSCVQPUWZ
    0U,	// XSCVSDQP
    0U,	// XSCVSPDP
    0U,	// XSCVSPDPN
    0U,	// XSCVSXDDP
    0U,	// XSCVSXDSP
    0U,	// XSCVUDQP
    0U,	// XSCVUXDDP
    0U,	// XSCVUXDSP
    38U,	// XSDIVDP
    38U,	// XSDIVQP
    38U,	// XSDIVQPO
    38U,	// XSDIVSP
    38U,	// XSIEXPDP
    38U,	// XSIEXPQP
    1U,	// XSMADDADP
    1U,	// XSMADDASP
    1U,	// XSMADDMDP
    1U,	// XSMADDMSP
    1U,	// XSMADDQP
    1U,	// XSMADDQPO
    38U,	// XSMAXCDP
    38U,	// XSMAXDP
    38U,	// XSMAXJDP
    38U,	// XSMINCDP
    38U,	// XSMINDP
    38U,	// XSMINJDP
    1U,	// XSMSUBADP
    1U,	// XSMSUBASP
    1U,	// XSMSUBMDP
    1U,	// XSMSUBMSP
    1U,	// XSMSUBQP
    1U,	// XSMSUBQPO
    38U,	// XSMULDP
    38U,	// XSMULQP
    38U,	// XSMULQPO
    38U,	// XSMULSP
    0U,	// XSNABSDP
    0U,	// XSNABSQP
    0U,	// XSNEGDP
    0U,	// XSNEGQP
    1U,	// XSNMADDADP
    1U,	// XSNMADDASP
    1U,	// XSNMADDMDP
    1U,	// XSNMADDMSP
    1U,	// XSNMADDQP
    1U,	// XSNMADDQPO
    1U,	// XSNMSUBADP
    1U,	// XSNMSUBASP
    1U,	// XSNMSUBMDP
    1U,	// XSNMSUBMSP
    1U,	// XSNMSUBQP
    1U,	// XSNMSUBQPO
    0U,	// XSRDPI
    0U,	// XSRDPIC
    0U,	// XSRDPIM
    0U,	// XSRDPIP
    0U,	// XSRDPIZ
    0U,	// XSREDP
    0U,	// XSRESP
    0U,	// XSRQPI
    0U,	// XSRQPIX
    0U,	// XSRQPXP
    0U,	// XSRSP
    0U,	// XSRSQRTEDP
    0U,	// XSRSQRTESP
    0U,	// XSSQRTDP
    0U,	// XSSQRTQP
    0U,	// XSSQRTQPO
    0U,	// XSSQRTSP
    38U,	// XSSUBDP
    38U,	// XSSUBQP
    38U,	// XSSUBQPO
    38U,	// XSSUBSP
    38U,	// XSTDIVDP
    0U,	// XSTSQRTDP
    1U,	// XSTSTDCDP
    1U,	// XSTSTDCQP
    1U,	// XSTSTDCSP
    0U,	// XSXEXPDP
    0U,	// XSXEXPQP
    0U,	// XSXSIGDP
    0U,	// XSXSIGQP
    0U,	// XVABSDP
    0U,	// XVABSSP
    38U,	// XVADDDP
    38U,	// XVADDSP
    38U,	// XVCMPEQDP
    38U,	// XVCMPEQDPo
    38U,	// XVCMPEQSP
    38U,	// XVCMPEQSPo
    38U,	// XVCMPGEDP
    38U,	// XVCMPGEDPo
    38U,	// XVCMPGESP
    38U,	// XVCMPGESPo
    38U,	// XVCMPGTDP
    38U,	// XVCMPGTDPo
    38U,	// XVCMPGTSP
    38U,	// XVCMPGTSPo
    38U,	// XVCPSGNDP
    38U,	// XVCPSGNSP
    0U,	// XVCVDPSP
    0U,	// XVCVDPSXDS
    0U,	// XVCVDPSXWS
    0U,	// XVCVDPUXDS
    0U,	// XVCVDPUXWS
    0U,	// XVCVHPSP
    0U,	// XVCVSPDP
    0U,	// XVCVSPHP
    0U,	// XVCVSPSXDS
    0U,	// XVCVSPSXWS
    0U,	// XVCVSPUXDS
    0U,	// XVCVSPUXWS
    0U,	// XVCVSXDDP
    0U,	// XVCVSXDSP
    0U,	// XVCVSXWDP
    0U,	// XVCVSXWSP
    0U,	// XVCVUXDDP
    0U,	// XVCVUXDSP
    0U,	// XVCVUXWDP
    0U,	// XVCVUXWSP
    38U,	// XVDIVDP
    38U,	// XVDIVSP
    38U,	// XVIEXPDP
    38U,	// XVIEXPSP
    1U,	// XVMADDADP
    1U,	// XVMADDASP
    1U,	// XVMADDMDP
    1U,	// XVMADDMSP
    38U,	// XVMAXDP
    38U,	// XVMAXSP
    38U,	// XVMINDP
    38U,	// XVMINSP
    1U,	// XVMSUBADP
    1U,	// XVMSUBASP
    1U,	// XVMSUBMDP
    1U,	// XVMSUBMSP
    38U,	// XVMULDP
    38U,	// XVMULSP
    0U,	// XVNABSDP
    0U,	// XVNABSSP
    0U,	// XVNEGDP
    0U,	// XVNEGSP
    1U,	// XVNMADDADP
    1U,	// XVNMADDASP
    1U,	// XVNMADDMDP
    1U,	// XVNMADDMSP
    1U,	// XVNMSUBADP
    1U,	// XVNMSUBASP
    1U,	// XVNMSUBMDP
    1U,	// XVNMSUBMSP
    0U,	// XVRDPI
    0U,	// XVRDPIC
    0U,	// XVRDPIM
    0U,	// XVRDPIP
    0U,	// XVRDPIZ
    0U,	// XVREDP
    0U,	// XVRESP
    0U,	// XVRSPI
    0U,	// XVRSPIC
    0U,	// XVRSPIM
    0U,	// XVRSPIP
    0U,	// XVRSPIZ
    0U,	// XVRSQRTEDP
    0U,	// XVRSQRTESP
    0U,	// XVSQRTDP
    0U,	// XVSQRTSP
    38U,	// XVSUBDP
    38U,	// XVSUBSP
    38U,	// XVTDIVDP
    38U,	// XVTDIVSP
    0U,	// XVTSQRTDP
    0U,	// XVTSQRTSP
    1U,	// XVTSTDCDP
    1U,	// XVTSTDCSP
    0U,	// XVXEXPDP
    0U,	// XVXEXPSP
    0U,	// XVXSIGDP
    0U,	// XVXSIGSP
    0U,	// XXBRD
    0U,	// XXBRH
    0U,	// XXBRQ
    0U,	// XXBRW
    20U,	// XXEXTRACTUW
    1U,	// XXINSERTW
    38U,	// XXLAND
    38U,	// XXLANDC
    38U,	// XXLEQV
    38U,	// XXLNAND
    38U,	// XXLNOR
    38U,	// XXLOR
    38U,	// XXLORC
    38U,	// XXLORf
    38U,	// XXLXOR
    12U,	// XXLXORdpz
    12U,	// XXLXORspz
    12U,	// XXLXORz
    38U,	// XXMRGHW
    38U,	// XXMRGLW
    38U,	// XXPERM
    262U,	// XXPERMDI
    462U,	// XXPERMDIs
    38U,	// XXPERMR
    134U,	// XXSEL
    262U,	// XXSLDWI
    462U,	// XXSLDWIs
    0U,	// XXSPLTIB
    16U,	// XXSPLTW
    16U,	// XXSPLTWs
    22U,	// gBC
    24U,	// gBCA
    0U,	// gBCAat
    38U,	// gBCCTR
    38U,	// gBCCTRL
    22U,	// gBCL
    24U,	// gBCLA
    0U,	// gBCLAat
    38U,	// gBCLR
    38U,	// gBCLRL
    0U,	// gBCLat
    0U,	// gBCat
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 14) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_LABEL, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CAL...
    return;
    break;
  case 1:
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, CLRRDI, CLRRDIo, CLRRWI, CLR...
    printOperand(MI, 0, O);
    break;
  case 2:
    // DCBFL, DCBFLP, DCBFx, DCBTCT, DCBTDS, DCBTSTCT, DCBTSTDS, DCBTSTT, DCB...
    printMemRegReg(MI, 0, O);
    break;
  case 3:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printU16ImmOperand(MI, 0, O);
    O << ' ';
    printU16ImmOperand(MI, 1, O);
    return;
    break;
  case 4:
    // B, BCLalways, BDNZ, BDNZ8, BDNZL, BDNZLm, BDNZLp, BDNZm, BDNZp, BDZ, B...
    printBranchOperand(MI, 0, O);
    break;
  case 5:
    // BA, BDNZA, BDNZAm, BDNZAp, BDNZLA, BDNZLAm, BDNZLAp, BDZA, BDZAm, BDZA...
    printAbsBranchOperand(MI, 0, O);
    break;
  case 6:
    // BCC, BCCA, BCCCTR, BCCCTR8, BCCCTRL, BCCCTRL8, BCCL, BCCLA, BCCLR, BCC...
    printPredicateOperand(MI, 0, O, "cc");
    break;
  case 7:
    // BCTRL8_LDinto_toc
    printMemRegImm(MI, 0, O);
    return;
    break;
  case 8:
    // BL8_NOP_TLS, BL8_TLS, BL8_TLS_, BL_TLS
    printTLSCall(MI, 0, O);
    break;
  case 9:
    // DCBF, DCBT, DCBTST
    printMemRegReg(MI, 1, O);
    O << ", ";
    printU5ImmOperand(MI, 0, O);
    return;
    break;
  case 10:
    // DCBTEP, DCBTSTEP
    printU5ImmOperand(MI, 2, O);
    O << ", ";
    printMemRegReg(MI, 0, O);
    return;
    break;
  case 11:
    // DSS, MBAR, MTFSB0, MTFSB1, TABORTDC, TABORTDCI, TABORTWC, TABORTWCI, T...
    printU5ImmOperand(MI, 0, O);
    break;
  case 12:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, MTDCR, MTV...
    printOperand(MI, 1, O);
    break;
  case 13:
    // ICBLC, ICBLQ, ICBT, ICBTLS
    printU4ImmOperand(MI, 0, O);
    O << ", ";
    printMemRegReg(MI, 1, O);
    return;
    break;
  case 14:
    // MTOCRF, MTOCRF8
    printcrbitm(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 15:
    // MTSR
    printU4ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 0, O);
    return;
    break;
  case 16:
    // RFEBB, TBEGIN, TEND, TSR
    printU1ImmOperand(MI, 0, O);
    return;
    break;
  case 17:
    // XSRQPI, XSRQPIX, XSRQPXP
    printU1ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    printU2ImmOperand(MI, 3, O);
    return;
    break;
  case 18:
    // gBCAat, gBCLAat, gBCLat, gBCat
    printATBitsAsHint(MI, 1, O);
    O << ' ';
    printU5ImmOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    break;
  }


  // Fragment 1 encoded into 5 bits for 20 unique commands.
  switch ((Bits >> 19) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, CLRRDI, CLRRDIo, CLRRWI, CLR...
    O << ", ";
    break;
  case 1:
    // DCBFL, DCBFLP, DCBFx, DCBTSTT, DCBTSTx, DCBTT, DCBTx, B, BA, BCLalways...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, TCRETURNai, TCRETURNai8, TCR...
    O << ' ';
    break;
  case 3:
    // BCC, CTRL_DEP
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 4:
    // BCCA
    O << 'a';
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BCCCTR, BCCCTR8
    O << "ctr";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 6:
    // BCCCTRL, BCCCTRL8
    O << "ctrl";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 7:
    // BCCL
    O << 'l';
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 8:
    // BCCLA
    O << "la";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  case 9:
    // BCCLR
    O << "lr";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 10:
    // BCCLRL
    O << "lrl";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 11:
    // BCCTR, BCCTR8, BCCTR8n, BCCTRL, BCCTRL8, BCCTRL8n, BCCTRLn, BCCTRn, BC...
    O << ", 0";
    return;
    break;
  case 12:
    // BL8_NOP, BL8_NOP_TLS, BLA8_NOP, BL_NOP
    O << "\n\tnop";
    return;
    break;
  case 13:
    // EVSEL, TLBIE
    O << ',';
    break;
  case 14:
    // MFTB8
    O << ", 268";
    return;
    break;
  case 15:
    // MFVRSAVE, MFVRSAVEv
    O << ", 256";
    return;
    break;
  case 16:
    // QVLPCLSXint
    O << ", 0, ";
    printOperand(MI, 1, O);
    return;
    break;
  case 17:
    // V_SETALLONES, V_SETALLONESB, V_SETALLONESH
    O << ", -1";
    return;
    break;
  case 18:
    // gBCAat, gBCLAat
    printAbsBranchOperand(MI, 3, O);
    return;
    break;
  case 19:
    // gBCLat, gBCat
    printBranchOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 22 unique commands.
  switch ((Bits >> 24) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, CLRRDI, CLRRDIo, CLRRWI, CLR...
    printOperand(MI, 1, O);
    break;
  case 1:
    // DCBTCT, DCBTDS, DCBTSTCT, DCBTSTDS, EVADDIW
    printU5ImmOperand(MI, 2, O);
    break;
  case 2:
    // LAx, EVLDD, EVLDH, EVLDW, EVLHHESPLAT, EVLHHOSSPLAT, EVLHHOUSPLAT, EVL...
    printMemRegImm(MI, 1, O);
    return;
    break;
  case 3:
    // SUBPCIS, LI, LI8, LIS, LIS8
    printS16ImmOperand(MI, 1, O);
    return;
    break;
  case 4:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, EVLDDX, EVLDHX, EVLDWX, EVLH...
    printMemRegReg(MI, 1, O);
    break;
  case 5:
    // BC, BCL, BCLn, BCn
    printBranchOperand(MI, 1, O);
    return;
    break;
  case 6:
    // CMPRB, CMPRB8
    printU1ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    return;
    break;
  case 7:
    // CRSET, CRUNSET, MTDCR, TLBIE, V_SET0, V_SET0B, V_SET0H, XXLXORdpz, XXL...
    printOperand(MI, 0, O);
    break;
  case 8:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, RLDIMI, RL...
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 9:
    // EVSPLATFI, EVSPLATI, VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O);
    return;
    break;
  case 10:
    // EVSUBIFW
    printU5ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 11:
    // LA
    printS16ImmOperand(MI, 2, O);
    O << '(';
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 12:
    // LBZU, LBZU8, LDU, LFDU, LFSU, LHAU, LHAU8, LHZU, LHZU8, LWZU, LWZU8, S...
    printMemRegImm(MI, 2, O);
    return;
    break;
  case 13:
    // LBZUX, LBZUX8, LDUX, LFDUX, LFSUX, LHAUX, LHAUX8, LHZUX, LHZUX8, LWAUX...
    printMemRegReg(MI, 2, O);
    return;
    break;
  case 14:
    // MFBHRBE
    printU10ImmOperand(MI, 1, O);
    return;
    break;
  case 15:
    // MFFSCDRNI
    printU3ImmOperand(MI, 1, O);
    return;
    break;
  case 16:
    // MFFSCRNI
    printU2ImmOperand(MI, 1, O);
    return;
    break;
  case 17:
    // MFOCRF, MFOCRF8
    printcrbitm(MI, 1, O);
    return;
    break;
  case 18:
    // MFSR
    printU4ImmOperand(MI, 1, O);
    return;
    break;
  case 19:
    // QVGPCI
    printU12ImmOperand(MI, 1, O);
    return;
    break;
  case 20:
    // VINSERTB, VINSERTH
    printOperand(MI, 3, O);
    O << ", ";
    printU4ImmOperand(MI, 2, O);
    return;
    break;
  case 21:
    // XXSPLTIB
    printU8ImmOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 14 unique commands.
  switch ((Bits >> 29) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, CLRRDI, CLRRDIo, CLRRWI, CLR...
    O << ", ";
    break;
  case 1:
    // CP_COPY_FIRST, CP_COPYx, CP_PASTE_LAST, CP_PASTEx, DCBTCT, DCBTDS, DCB...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32
    O << ' ';
    printOperand(MI, 3, O);
    O << ' ';
    printOperand(MI, 4, O);
    return;
    break;
  case 3:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printU5ImmOperand(MI, 0, O);
    return;
    break;
  case 4:
    // EVSEL
    O << ',';
    printOperand(MI, 2, O);
    return;
    break;
  case 5:
    // LBARXL, LDARXL, LHARXL, LWARXL
    O << ", 1";
    return;
    break;
  case 6:
    // RLDIMI, RLDIMIo
    printU6ImmOperand(MI, 3, O);
    O << ", ";
    printU6ImmOperand(MI, 4, O);
    return;
    break;
  case 7:
    // RLWIMI, RLWIMI8, RLWIMI8o, RLWIMIo
    printU5ImmOperand(MI, 3, O);
    O << ", ";
    printU5ImmOperand(MI, 4, O);
    O << ", ";
    printU5ImmOperand(MI, 5, O);
    return;
    break;
  case 8:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTBs, VSPLTH, VSPLTHs, VSPLTW
    printU5ImmOperand(MI, 1, O);
    return;
    break;
  case 9:
    // VCFSX_0, VCFUX_0, VCTSXS_0, VCTUXS_0
    O << ", 0";
    return;
    break;
  case 10:
    // VEXTRACTD, VEXTRACTUB, VEXTRACTUH, VEXTRACTUW, VINSERTD, VINSERTW
    printU4ImmOperand(MI, 1, O);
    return;
    break;
  case 11:
    // XSMADDADP, XSMADDASP, XSMADDMDP, XSMADDMSP, XSMADDQP, XSMADDQPO, XSMSU...
    printOperand(MI, 3, O);
    return;
    break;
  case 12:
    // XSTSTDCDP, XSTSTDCQP, XSTSTDCSP, XVTSTDCDP, XVTSTDCSP
    printU7ImmOperand(MI, 1, O);
    return;
    break;
  case 13:
    // XXINSERTW
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 33) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDIo, CLRRDI, CLRRDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo...
    printU6ImmOperand(MI, 2, O);
    break;
  case 1:
    // CLRLSLWI, CLRLSLWIo, CLRRWI, CLRRWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo...
    printU5ImmOperand(MI, 2, O);
    break;
  case 2:
    // SUBI, SUBIC, SUBICo, SUBIS, ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, ADDIS,...
    printS16ImmOperand(MI, 2, O);
    return;
    break;
  case 3:
    // ADD4, ADD4O, ADD4Oo, ADD4TLS, ADD4o, ADD8, ADD8O, ADD8Oo, ADD8TLS, ADD...
    printOperand(MI, 2, O);
    break;
  case 4:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BCDCFNo, BCDCFSQo, BCDCFZo, BCDCTZo, BCDSETSGNo, CP_COPY, CP_COPY8, CP...
    printU1ImmOperand(MI, 2, O);
    break;
  case 6:
    // CRSET, CRUNSET, V_SET0, V_SET0B, V_SET0H, XXLXORdpz, XXLXORspz, XXLXOR...
    printOperand(MI, 0, O);
    return;
    break;
  case 7:
    // EVADDIW, XXPERMDIs, XXSLDWIs
    printOperand(MI, 1, O);
    break;
  case 8:
    // QVESPLATI, QVESPLATIb, QVESPLATIs, XXSPLTW, XXSPLTWs
    printU2ImmOperand(MI, 2, O);
    return;
    break;
  case 9:
    // QVFMADD, QVFMADDS, QVFMADDSs, QVFMSUB, QVFMSUBS, QVFMSUBSs, QVFNMADD, ...
    printOperand(MI, 3, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 10:
    // XXEXTRACTUW
    printU4ImmOperand(MI, 2, O);
    return;
    break;
  case 11:
    // gBC, gBCL
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 12:
    // gBCA, gBCLA
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 37) & 1) {
    // CLRRDI, CLRRDIo, CLRRWI, CLRRWIo, ROTRDI, ROTRDIo, ROTRWI, ROTRWIo, SL...
    return;
  } else {
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, EXTLDI, EXTLDIo, EXTLWI, EXT...
    O << ", ";
  }


  // Fragment 6 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 38) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // CLRLSLDI, CLRLSLDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo, INSRDI, INSRDIo...
    printU6ImmOperand(MI, 3, O);
    return;
    break;
  case 1:
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    printU5ImmOperand(MI, 3, O);
    break;
  case 2:
    // RLWIMIbm, RLWIMIobm, RLWINMbm, RLWINMobm, RLWNMbm, RLWNMobm, FMADD, FM...
    printOperand(MI, 3, O);
    return;
    break;
  case 3:
    // BCDSRo, BCDSo, BCDTRUNCo
    printU1ImmOperand(MI, 3, O);
    return;
    break;
  case 4:
    // QVALIGNI, QVALIGNIb, QVALIGNIs, XXPERMDI, XXSLDWI
    printU2ImmOperand(MI, 3, O);
    return;
    break;
  case 5:
    // QVFLOGICAL, QVFLOGICALb, QVFLOGICALs
    printU12ImmOperand(MI, 3, O);
    return;
    break;
  case 6:
    // VSHASIGMAD, VSHASIGMAW, VSLDOI
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  case 7:
    // XXPERMDIs, XXSLDWIs
    printU2ImmOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 41) & 1) {
    // RLWINM, RLWINM8, RLWINM8o, RLWINMo, RLWNM, RLWNM8, RLWNM8o, RLWNMo
    O << ", ";
    printU5ImmOperand(MI, 4, O);
    return;
  } else {
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 344 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ '*', '*', 'R', 'O', 'U', 'N', 'D', 'I', 'N', 'G', 32, 'M', 'O', 'D', 'E', '*', '*', 0,
  /* 18 */ '*', '*', 'F', 'R', 'A', 'M', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 36 */ '*', '*', 'B', 'A', 'S', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 53 */ 'f', '1', '0', 0,
  /* 57 */ 'q', '1', '0', 0,
  /* 61 */ 'r', '1', '0', 0,
  /* 65 */ 'v', 's', '1', '0', 0,
  /* 70 */ 'v', '1', '0', 0,
  /* 74 */ 'f', '2', '0', 0,
  /* 78 */ 'q', '2', '0', 0,
  /* 82 */ 'r', '2', '0', 0,
  /* 86 */ 'v', 's', '2', '0', 0,
  /* 91 */ 'v', '2', '0', 0,
  /* 95 */ 'f', '3', '0', 0,
  /* 99 */ 'q', '3', '0', 0,
  /* 103 */ 'r', '3', '0', 0,
  /* 107 */ 'v', 's', '3', '0', 0,
  /* 112 */ 'v', '3', '0', 0,
  /* 116 */ 'v', 's', '4', '0', 0,
  /* 121 */ 'v', 's', '5', '0', 0,
  /* 126 */ 'v', 's', '6', '0', 0,
  /* 131 */ 'f', '0', 0,
  /* 134 */ 'q', '0', 0,
  /* 137 */ 'c', 'r', '0', 0,
  /* 141 */ 'v', 's', '0', 0,
  /* 145 */ 'v', '0', 0,
  /* 148 */ 'f', '1', '1', 0,
  /* 152 */ 'q', '1', '1', 0,
  /* 156 */ 'r', '1', '1', 0,
  /* 160 */ 'v', 's', '1', '1', 0,
  /* 165 */ 'v', '1', '1', 0,
  /* 169 */ 'f', '2', '1', 0,
  /* 173 */ 'q', '2', '1', 0,
  /* 177 */ 'r', '2', '1', 0,
  /* 181 */ 'v', 's', '2', '1', 0,
  /* 186 */ 'v', '2', '1', 0,
  /* 190 */ 'f', '3', '1', 0,
  /* 194 */ 'q', '3', '1', 0,
  /* 198 */ 'r', '3', '1', 0,
  /* 202 */ 'v', 's', '3', '1', 0,
  /* 207 */ 'v', '3', '1', 0,
  /* 211 */ 'v', 's', '4', '1', 0,
  /* 216 */ 'v', 's', '5', '1', 0,
  /* 221 */ 'v', 's', '6', '1', 0,
  /* 226 */ 'f', '1', 0,
  /* 229 */ 'q', '1', 0,
  /* 232 */ 'c', 'r', '1', 0,
  /* 236 */ 'v', 's', '1', 0,
  /* 240 */ 'v', '1', 0,
  /* 243 */ 'f', '1', '2', 0,
  /* 247 */ 'q', '1', '2', 0,
  /* 251 */ 'r', '1', '2', 0,
  /* 255 */ 'v', 's', '1', '2', 0,
  /* 260 */ 'v', '1', '2', 0,
  /* 264 */ 'f', '2', '2', 0,
  /* 268 */ 'q', '2', '2', 0,
  /* 272 */ 'r', '2', '2', 0,
  /* 276 */ 'v', 's', '2', '2', 0,
  /* 281 */ 'v', '2', '2', 0,
  /* 285 */ 'v', 's', '3', '2', 0,
  /* 290 */ 'v', 's', '4', '2', 0,
  /* 295 */ 'v', 's', '5', '2', 0,
  /* 300 */ 'v', 's', '6', '2', 0,
  /* 305 */ 'f', '2', 0,
  /* 308 */ 'q', '2', 0,
  /* 311 */ 'c', 'r', '2', 0,
  /* 315 */ 'v', 's', '2', 0,
  /* 319 */ 'v', '2', 0,
  /* 322 */ 'f', '1', '3', 0,
  /* 326 */ 'q', '1', '3', 0,
  /* 330 */ 'r', '1', '3', 0,
  /* 334 */ 'v', 's', '1', '3', 0,
  /* 339 */ 'v', '1', '3', 0,
  /* 343 */ 'f', '2', '3', 0,
  /* 347 */ 'q', '2', '3', 0,
  /* 351 */ 'r', '2', '3', 0,
  /* 355 */ 'v', 's', '2', '3', 0,
  /* 360 */ 'v', '2', '3', 0,
  /* 364 */ 'v', 's', '3', '3', 0,
  /* 369 */ 'v', 's', '4', '3', 0,
  /* 374 */ 'v', 's', '5', '3', 0,
  /* 379 */ 'v', 's', '6', '3', 0,
  /* 384 */ 'f', '3', 0,
  /* 387 */ 'q', '3', 0,
  /* 390 */ 'c', 'r', '3', 0,
  /* 394 */ 'v', 's', '3', 0,
  /* 398 */ 'v', '3', 0,
  /* 401 */ 'f', '1', '4', 0,
  /* 405 */ 'q', '1', '4', 0,
  /* 409 */ 'r', '1', '4', 0,
  /* 413 */ 'v', 's', '1', '4', 0,
  /* 418 */ 'v', '1', '4', 0,
  /* 422 */ 'f', '2', '4', 0,
  /* 426 */ 'q', '2', '4', 0,
  /* 430 */ 'r', '2', '4', 0,
  /* 434 */ 'v', 's', '2', '4', 0,
  /* 439 */ 'v', '2', '4', 0,
  /* 443 */ 'v', 's', '3', '4', 0,
  /* 448 */ 'v', 's', '4', '4', 0,
  /* 453 */ 'v', 's', '5', '4', 0,
  /* 458 */ 'f', '4', 0,
  /* 461 */ 'q', '4', 0,
  /* 464 */ 'c', 'r', '4', 0,
  /* 468 */ 'v', 's', '4', 0,
  /* 472 */ 'v', '4', 0,
  /* 475 */ 'f', '1', '5', 0,
  /* 479 */ 'q', '1', '5', 0,
  /* 483 */ 'r', '1', '5', 0,
  /* 487 */ 'v', 's', '1', '5', 0,
  /* 492 */ 'v', '1', '5', 0,
  /* 496 */ 'f', '2', '5', 0,
  /* 500 */ 'q', '2', '5', 0,
  /* 504 */ 'r', '2', '5', 0,
  /* 508 */ 'v', 's', '2', '5', 0,
  /* 513 */ 'v', '2', '5', 0,
  /* 517 */ 'v', 's', '3', '5', 0,
  /* 522 */ 'v', 's', '4', '5', 0,
  /* 527 */ 'v', 's', '5', '5', 0,
  /* 532 */ 'f', '5', 0,
  /* 535 */ 'q', '5', 0,
  /* 538 */ 'c', 'r', '5', 0,
  /* 542 */ 'v', 's', '5', 0,
  /* 546 */ 'v', '5', 0,
  /* 549 */ 'f', '1', '6', 0,
  /* 553 */ 'q', '1', '6', 0,
  /* 557 */ 'r', '1', '6', 0,
  /* 561 */ 'v', 's', '1', '6', 0,
  /* 566 */ 'v', '1', '6', 0,
  /* 570 */ 'f', '2', '6', 0,
  /* 574 */ 'q', '2', '6', 0,
  /* 578 */ 'r', '2', '6', 0,
  /* 582 */ 'v', 's', '2', '6', 0,
  /* 587 */ 'v', '2', '6', 0,
  /* 591 */ 'v', 's', '3', '6', 0,
  /* 596 */ 'v', 's', '4', '6', 0,
  /* 601 */ 'v', 's', '5', '6', 0,
  /* 606 */ 'f', '6', 0,
  /* 609 */ 'q', '6', 0,
  /* 612 */ 'c', 'r', '6', 0,
  /* 616 */ 'v', 's', '6', 0,
  /* 620 */ 'v', '6', 0,
  /* 623 */ 'f', '1', '7', 0,
  /* 627 */ 'q', '1', '7', 0,
  /* 631 */ 'r', '1', '7', 0,
  /* 635 */ 'v', 's', '1', '7', 0,
  /* 640 */ 'v', '1', '7', 0,
  /* 644 */ 'f', '2', '7', 0,
  /* 648 */ 'q', '2', '7', 0,
  /* 652 */ 'r', '2', '7', 0,
  /* 656 */ 'v', 's', '2', '7', 0,
  /* 661 */ 'v', '2', '7', 0,
  /* 665 */ 'v', 's', '3', '7', 0,
  /* 670 */ 'v', 's', '4', '7', 0,
  /* 675 */ 'v', 's', '5', '7', 0,
  /* 680 */ 'f', '7', 0,
  /* 683 */ 'q', '7', 0,
  /* 686 */ 'c', 'r', '7', 0,
  /* 690 */ 'v', 's', '7', 0,
  /* 694 */ 'v', '7', 0,
  /* 697 */ 'f', '1', '8', 0,
  /* 701 */ 'q', '1', '8', 0,
  /* 705 */ 'r', '1', '8', 0,
  /* 709 */ 'v', 's', '1', '8', 0,
  /* 714 */ 'v', '1', '8', 0,
  /* 718 */ 'f', '2', '8', 0,
  /* 722 */ 'q', '2', '8', 0,
  /* 726 */ 'r', '2', '8', 0,
  /* 730 */ 'v', 's', '2', '8', 0,
  /* 735 */ 'v', '2', '8', 0,
  /* 739 */ 'v', 's', '3', '8', 0,
  /* 744 */ 'v', 's', '4', '8', 0,
  /* 749 */ 'v', 's', '5', '8', 0,
  /* 754 */ 'f', '8', 0,
  /* 757 */ 'q', '8', 0,
  /* 760 */ 'r', '8', 0,
  /* 763 */ 'v', 's', '8', 0,
  /* 767 */ 'v', '8', 0,
  /* 770 */ 'f', '1', '9', 0,
  /* 774 */ 'q', '1', '9', 0,
  /* 778 */ 'r', '1', '9', 0,
  /* 782 */ 'v', 's', '1', '9', 0,
  /* 787 */ 'v', '1', '9', 0,
  /* 791 */ 'f', '2', '9', 0,
  /* 795 */ 'q', '2', '9', 0,
  /* 799 */ 'r', '2', '9', 0,
  /* 803 */ 'v', 's', '2', '9', 0,
  /* 808 */ 'v', '2', '9', 0,
  /* 812 */ 'v', 's', '3', '9', 0,
  /* 817 */ 'v', 's', '4', '9', 0,
  /* 822 */ 'v', 's', '5', '9', 0,
  /* 827 */ 'f', '9', 0,
  /* 830 */ 'q', '9', 0,
  /* 833 */ 'r', '9', 0,
  /* 836 */ 'v', 's', '9', 0,
  /* 840 */ 'v', '9', 0,
  /* 843 */ 'v', 'r', 's', 'a', 'v', 'e', 0,
  /* 850 */ 's', 'p', 'e', 'f', 's', 'c', 'r', 0,
  /* 858 */ 'x', 'e', 'r', 0,
  /* 862 */ 'l', 'r', 0,
  /* 865 */ 'c', 't', 'r', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    36, 858, 865, 18, 862, 0, 850, 843, 858, 55, 36, 137, 232, 311, 
    390, 464, 538, 612, 686, 865, 131, 226, 305, 384, 458, 532, 606, 680, 
    754, 827, 53, 148, 243, 322, 401, 475, 549, 623, 697, 770, 74, 169, 
    264, 343, 422, 496, 570, 644, 718, 791, 95, 190, 18, 862, 134, 229, 
    308, 387, 461, 535, 609, 683, 757, 830, 57, 152, 247, 326, 405, 479, 
    553, 627, 701, 774, 78, 173, 268, 347, 426, 500, 574, 648, 722, 795, 
    99, 194, 138, 233, 312, 391, 465, 539, 613, 687, 760, 833, 61, 156, 
    251, 330, 409, 483, 557, 631, 705, 778, 82, 177, 272, 351, 430, 504, 
    578, 652, 726, 799, 103, 198, 138, 233, 312, 391, 465, 539, 613, 687, 
    760, 833, 61, 156, 251, 330, 409, 483, 557, 631, 705, 778, 82, 177, 
    272, 351, 430, 504, 578, 652, 726, 799, 103, 198, 145, 240, 319, 398, 
    472, 546, 620, 694, 767, 840, 70, 165, 260, 339, 418, 492, 566, 640, 
    714, 787, 91, 186, 281, 360, 439, 513, 587, 661, 735, 808, 112, 207, 
    145, 240, 319, 398, 472, 546, 620, 694, 767, 840, 70, 165, 260, 339, 
    418, 492, 566, 640, 714, 787, 91, 186, 281, 360, 439, 513, 587, 661, 
    735, 808, 112, 207, 141, 236, 315, 394, 468, 542, 616, 690, 763, 836, 
    65, 160, 255, 334, 413, 487, 561, 635, 709, 782, 86, 181, 276, 355, 
    434, 508, 582, 656, 730, 803, 107, 202, 285, 364, 443, 517, 591, 665, 
    739, 812, 116, 211, 290, 369, 448, 522, 596, 670, 744, 817, 121, 216, 
    295, 374, 453, 527, 601, 675, 749, 822, 126, 221, 300, 379, 138, 233, 
    312, 391, 465, 539, 613, 687, 760, 833, 61, 156, 251, 330, 409, 483, 
    557, 631, 705, 778, 82, 177, 272, 351, 430, 504, 578, 652, 726, 799, 
    103, 198, 55, 245, 551, 54, 402, 698, 265, 571, 96, 150, 477, 772, 
    323, 624, 170, 497, 792, 55, 403, 699, 244, 550, 75, 423, 719, 324, 
    625, 149, 476, 771, 344, 645, 191, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case PPC::ADDPCIS:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (ADDPCIS g8rc:$RT, 0)
      AsmString = "lnia $\x01";
      break;
    }
    return false;
  case PPC::BCC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 12, CR0, condbrtarget:$dst)
      AsmString = "blt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 14, CR0, condbrtarget:$dst)
      AsmString = "blt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 15, CR0, condbrtarget:$dst)
      AsmString = "blt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 44, CR0, condbrtarget:$dst)
      AsmString = "bgt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 46, CR0, condbrtarget:$dst)
      AsmString = "bgt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 47, CR0, condbrtarget:$dst)
      AsmString = "bgt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 76, CR0, condbrtarget:$dst)
      AsmString = "beq $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 78, CR0, condbrtarget:$dst)
      AsmString = "beq- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 79, CR0, condbrtarget:$dst)
      AsmString = "beq+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 68, CR0, condbrtarget:$dst)
      AsmString = "bne $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 70, CR0, condbrtarget:$dst)
      AsmString = "bne- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 71, CR0, condbrtarget:$dst)
      AsmString = "bne+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 12, CR0, abscondbrtarget:$dst)
      AsmString = "blta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 14, CR0, abscondbrtarget:$dst)
      AsmString = "blta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 15, CR0, abscondbrtarget:$dst)
      AsmString = "blta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqa $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqa- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqa+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnea $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnea- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnea+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCCTR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 12, crrc:$cc)
      AsmString = "bltctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 12, CR0)
      AsmString = "bltctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 14, crrc:$cc)
      AsmString = "bltctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 14, CR0)
      AsmString = "bltctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 15, crrc:$cc)
      AsmString = "bltctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 15, CR0)
      AsmString = "bltctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 44, crrc:$cc)
      AsmString = "bgtctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 44, CR0)
      AsmString = "bgtctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 46, crrc:$cc)
      AsmString = "bgtctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 46, CR0)
      AsmString = "bgtctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 47, crrc:$cc)
      AsmString = "bgtctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 47, CR0)
      AsmString = "bgtctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 76, crrc:$cc)
      AsmString = "beqctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 76, CR0)
      AsmString = "beqctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 78, crrc:$cc)
      AsmString = "beqctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 78, CR0)
      AsmString = "beqctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 79, crrc:$cc)
      AsmString = "beqctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 79, CR0)
      AsmString = "beqctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 68, crrc:$cc)
      AsmString = "bnectr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 68, CR0)
      AsmString = "bnectr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 70, crrc:$cc)
      AsmString = "bnectr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 70, CR0)
      AsmString = "bnectr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 71, crrc:$cc)
      AsmString = "bnectr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 71, CR0)
      AsmString = "bnectr+";
      break;
    }
    return false;
  case PPC::BCCCTRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 12, crrc:$cc)
      AsmString = "bltctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 12, CR0)
      AsmString = "bltctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 14, crrc:$cc)
      AsmString = "bltctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 14, CR0)
      AsmString = "bltctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 15, crrc:$cc)
      AsmString = "bltctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 15, CR0)
      AsmString = "bltctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 44, crrc:$cc)
      AsmString = "bgtctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 44, CR0)
      AsmString = "bgtctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 46, crrc:$cc)
      AsmString = "bgtctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 46, CR0)
      AsmString = "bgtctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 47, crrc:$cc)
      AsmString = "bgtctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 47, CR0)
      AsmString = "bgtctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 76, crrc:$cc)
      AsmString = "beqctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 76, CR0)
      AsmString = "beqctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 78, crrc:$cc)
      AsmString = "beqctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 78, CR0)
      AsmString = "beqctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 79, crrc:$cc)
      AsmString = "beqctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 79, CR0)
      AsmString = "beqctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 68, crrc:$cc)
      AsmString = "bnectrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 68, CR0)
      AsmString = "bnectrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 70, crrc:$cc)
      AsmString = "bnectrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 70, CR0)
      AsmString = "bnectrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 71, crrc:$cc)
      AsmString = "bnectrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 71, CR0)
      AsmString = "bnectrl+";
      break;
    }
    return false;
  case PPC::BCCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 12, CR0, condbrtarget:$dst)
      AsmString = "bltl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 14, CR0, condbrtarget:$dst)
      AsmString = "bltl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 15, CR0, condbrtarget:$dst)
      AsmString = "bltl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 44, CR0, condbrtarget:$dst)
      AsmString = "bgtl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 46, CR0, condbrtarget:$dst)
      AsmString = "bgtl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 47, CR0, condbrtarget:$dst)
      AsmString = "bgtl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 76, CR0, condbrtarget:$dst)
      AsmString = "beql $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 78, CR0, condbrtarget:$dst)
      AsmString = "beql- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 79, CR0, condbrtarget:$dst)
      AsmString = "beql+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 68, CR0, condbrtarget:$dst)
      AsmString = "bnel $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 70, CR0, condbrtarget:$dst)
      AsmString = "bnel- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 71, CR0, condbrtarget:$dst)
      AsmString = "bnel+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 12, CR0, abscondbrtarget:$dst)
      AsmString = "bltla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 14, CR0, abscondbrtarget:$dst)
      AsmString = "bltla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 15, CR0, abscondbrtarget:$dst)
      AsmString = "bltla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnela $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnela- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnela+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCLR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 12, crrc:$cc)
      AsmString = "bltlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 12, CR0)
      AsmString = "bltlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 14, crrc:$cc)
      AsmString = "bltlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 14, CR0)
      AsmString = "bltlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 15, crrc:$cc)
      AsmString = "bltlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 15, CR0)
      AsmString = "bltlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 44, crrc:$cc)
      AsmString = "bgtlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 44, CR0)
      AsmString = "bgtlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 46, crrc:$cc)
      AsmString = "bgtlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 46, CR0)
      AsmString = "bgtlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 47, crrc:$cc)
      AsmString = "bgtlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 47, CR0)
      AsmString = "bgtlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 76, crrc:$cc)
      AsmString = "beqlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 76, CR0)
      AsmString = "beqlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 78, crrc:$cc)
      AsmString = "beqlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 78, CR0)
      AsmString = "beqlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 79, crrc:$cc)
      AsmString = "beqlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 79, CR0)
      AsmString = "beqlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 68, crrc:$cc)
      AsmString = "bnelr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 68, CR0)
      AsmString = "bnelr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 70, crrc:$cc)
      AsmString = "bnelr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 70, CR0)
      AsmString = "bnelr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 71, crrc:$cc)
      AsmString = "bnelr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 71, CR0)
      AsmString = "bnelr+";
      break;
    }
    return false;
  case PPC::BCCLRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 12, crrc:$cc)
      AsmString = "bltlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 12, CR0)
      AsmString = "bltlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 14, crrc:$cc)
      AsmString = "bltlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 14, CR0)
      AsmString = "bltlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 15, crrc:$cc)
      AsmString = "bltlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 15, CR0)
      AsmString = "bltlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 44, crrc:$cc)
      AsmString = "bgtlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 44, CR0)
      AsmString = "bgtlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 46, crrc:$cc)
      AsmString = "bgtlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 46, CR0)
      AsmString = "bgtlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 47, crrc:$cc)
      AsmString = "bgtlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 47, CR0)
      AsmString = "bgtlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 76, crrc:$cc)
      AsmString = "beqlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 76, CR0)
      AsmString = "beqlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 78, crrc:$cc)
      AsmString = "beqlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 78, CR0)
      AsmString = "beqlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 79, crrc:$cc)
      AsmString = "beqlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 79, CR0)
      AsmString = "beqlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 68, crrc:$cc)
      AsmString = "bnelrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 68, CR0)
      AsmString = "bnelrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 70, crrc:$cc)
      AsmString = "bnelrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 70, CR0)
      AsmString = "bnelrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 71, crrc:$cc)
      AsmString = "bnelrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 71, CR0)
      AsmString = "bnelrl+";
      break;
    }
    return false;
  case PPC::CMPD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpd $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPDI CR0, g8rc:$rA, s16imm64:$imm)
      AsmString = "cmpdi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CMPLD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpld $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLDI CR0, g8rc:$rA, u16imm64:$imm)
      AsmString = "cmpldi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmplw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLWI CR0, gprc:$rA, u16imm:$imm)
      AsmString = "cmplwi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmpw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPWI CR0, gprc:$rA, s16imm:$imm)
      AsmString = "cmpwi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CNTLZW:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CNTLZW gprc:$rA, gprc:$rS)
      AsmString = "cntlzw $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CNTLZWo:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CNTLZWo gprc:$rA, gprc:$rS)
      AsmString = "cntlzw. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CREQV:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CREQV crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crset $\x01";
      break;
    }
    return false;
  case PPC::CRNOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CRNOR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crnot $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CROR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CROR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crmove $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CRXOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CRXOR crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crclr $\x01";
      break;
    }
    return false;
  case PPC::MBAR:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (MBAR 0)
      AsmString = "mbar";
      break;
    }
    return false;
  case PPC::MFDCR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 128) {
      // (MFDCR gprc:$Rx, 128)
      AsmString = "mfbr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 129) {
      // (MFDCR gprc:$Rx, 129)
      AsmString = "mfbr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 130) {
      // (MFDCR gprc:$Rx, 130)
      AsmString = "mfbr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 131) {
      // (MFDCR gprc:$Rx, 131)
      AsmString = "mfbr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 132) {
      // (MFDCR gprc:$Rx, 132)
      AsmString = "mfbr4 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 133) {
      // (MFDCR gprc:$Rx, 133)
      AsmString = "mfbr5 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 134) {
      // (MFDCR gprc:$Rx, 134)
      AsmString = "mfbr6 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 135) {
      // (MFDCR gprc:$Rx, 135)
      AsmString = "mfbr7 $\x01";
      break;
    }
    return false;
  case PPC::MFSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1) {
      // (MFSPR gprc:$Rx, 1)
      AsmString = "mfxer $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4) {
      // (MFSPR gprc:$Rx, 4)
      AsmString = "mfrtcu $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 5) {
      // (MFSPR gprc:$Rx, 5)
      AsmString = "mfrtcl $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 17) {
      // (MFSPR gprc:$Rx, 17)
      AsmString = "mfdscr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 18) {
      // (MFSPR gprc:$Rx, 18)
      AsmString = "mfdsisr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 19) {
      // (MFSPR gprc:$Rx, 19)
      AsmString = "mfdar $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 990) {
      // (MFSPR gprc:$Rx, 990)
      AsmString = "mfsrr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 991) {
      // (MFSPR gprc:$Rx, 991)
      AsmString = "mfsrr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 28) {
      // (MFSPR gprc:$Rx, 28)
      AsmString = "mfcfar $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 29) {
      // (MFSPR gprc:$Rx, 29)
      AsmString = "mfamr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 48) {
      // (MFSPR gprc:$Rx, 48)
      AsmString = "mfpid $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 989) {
      // (MFSPR gprc:$Rx, 989)
      AsmString = "mftblo $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 988) {
      // (MFSPR gprc:$Rx, 988)
      AsmString = "mftbhi $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 536) {
      // (MFSPR gprc:$Rx, 536)
      AsmString = "mfdbatu $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 537) {
      // (MFSPR gprc:$Rx, 537)
      AsmString = "mfdbatl $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 528) {
      // (MFSPR gprc:$Rx, 528)
      AsmString = "mfibatu $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 529) {
      // (MFSPR gprc:$Rx, 529)
      AsmString = "mfibatl $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 538) {
      // (MFSPR gprc:$Rx, 538)
      AsmString = "mfdbatu $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 539) {
      // (MFSPR gprc:$Rx, 539)
      AsmString = "mfdbatl $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 530) {
      // (MFSPR gprc:$Rx, 530)
      AsmString = "mfibatu $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 531) {
      // (MFSPR gprc:$Rx, 531)
      AsmString = "mfibatl $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 540) {
      // (MFSPR gprc:$Rx, 540)
      AsmString = "mfdbatu $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 541) {
      // (MFSPR gprc:$Rx, 541)
      AsmString = "mfdbatl $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 532) {
      // (MFSPR gprc:$Rx, 532)
      AsmString = "mfibatu $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 533) {
      // (MFSPR gprc:$Rx, 533)
      AsmString = "mfibatl $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 542) {
      // (MFSPR gprc:$Rx, 542)
      AsmString = "mfdbatu $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 543) {
      // (MFSPR gprc:$Rx, 543)
      AsmString = "mfdbatl $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 534) {
      // (MFSPR gprc:$Rx, 534)
      AsmString = "mfibatu $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 535) {
      // (MFSPR gprc:$Rx, 535)
      AsmString = "mfibatl $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1018) {
      // (MFSPR gprc:$Rx, 1018)
      AsmString = "mfdccr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1019) {
      // (MFSPR gprc:$Rx, 1019)
      AsmString = "mficcr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 981) {
      // (MFSPR gprc:$Rx, 981)
      AsmString = "mfdear $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 980) {
      // (MFSPR gprc:$Rx, 980)
      AsmString = "mfesr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 512) {
      // (MFSPR gprc:$Rx, 512)
      AsmString = "mfspefscr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 986) {
      // (MFSPR gprc:$Rx, 986)
      AsmString = "mftcr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 280) {
      // (MFSPR gprc:$RT, 280)
      AsmString = "mfasr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 287) {
      // (MFSPR gprc:$RT, 287)
      AsmString = "mfpvr $\x01";
      break;
    }
    return false;
  case PPC::MFTB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 269) {
      // (MFTB gprc:$Rx, 269)
      AsmString = "mftbu $\x01";
      break;
    }
    return false;
  case PPC::MFVRSAVE:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg())) {
      // (MFVRSAVE gprc:$rS)
      AsmString = "mfvrsave $\x01";
      break;
    }
    return false;
  case PPC::MFVSRD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MFVSRD g8rc:$rA, f8rc:$src)
      AsmString = "mffprd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTCRF8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 255 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTCRF8 255, g8rc:$rA)
      AsmString = "mtcr $\x02";
      break;
    }
    return false;
  case PPC::MTDCR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 128) {
      // (MTDCR gprc:$Rx, 128)
      AsmString = "mtbr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 129) {
      // (MTDCR gprc:$Rx, 129)
      AsmString = "mtbr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 130) {
      // (MTDCR gprc:$Rx, 130)
      AsmString = "mtbr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 131) {
      // (MTDCR gprc:$Rx, 131)
      AsmString = "mtbr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 132) {
      // (MTDCR gprc:$Rx, 132)
      AsmString = "mtbr4 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 133) {
      // (MTDCR gprc:$Rx, 133)
      AsmString = "mtbr5 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 134) {
      // (MTDCR gprc:$Rx, 134)
      AsmString = "mtbr6 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 135) {
      // (MTDCR gprc:$Rx, 135)
      AsmString = "mtbr7 $\x01";
      break;
    }
    return false;
  case PPC::MTFSF:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (MTFSF i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTFSFI crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFIo:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTFSFIo crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (MTFSFo i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTMSR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSR gprc:$RS, 0)
      AsmString = "mtmsr $\x01";
      break;
    }
    return false;
  case PPC::MTMSRD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSRD gprc:$RS, 0)
      AsmString = "mtmsrd $\x01";
      break;
    }
    return false;
  case PPC::MTSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1, gprc:$Rx)
      AsmString = "mtxer $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 17 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 17, gprc:$Rx)
      AsmString = "mtdscr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 18 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 18, gprc:$Rx)
      AsmString = "mtdsisr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 19 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 19, gprc:$Rx)
      AsmString = "mtdar $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 990 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 990, gprc:$Rx)
      AsmString = "mtsrr2 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 991 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 991, gprc:$Rx)
      AsmString = "mtsrr3 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 28 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 28, gprc:$Rx)
      AsmString = "mtcfar $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 29 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 29, gprc:$Rx)
      AsmString = "mtamr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 48 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 48, gprc:$Rx)
      AsmString = "mtpid $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 284 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 284, gprc:$Rx)
      AsmString = "mttbl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 285 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 285, gprc:$Rx)
      AsmString = "mttbu $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 989 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 989, gprc:$Rx)
      AsmString = "mttblo $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 988 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 988, gprc:$Rx)
      AsmString = "mttbhi $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 536 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 536, gprc:$Rx)
      AsmString = "mtdbatu 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 537 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 537, gprc:$Rx)
      AsmString = "mtdbatl 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 528 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 528, gprc:$Rx)
      AsmString = "mtibatu 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 529 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 529, gprc:$Rx)
      AsmString = "mtibatl 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 538 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 538, gprc:$Rx)
      AsmString = "mtdbatu 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 539 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 539, gprc:$Rx)
      AsmString = "mtdbatl 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 530 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 530, gprc:$Rx)
      AsmString = "mtibatu 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 531 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 531, gprc:$Rx)
      AsmString = "mtibatl 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 540 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 540, gprc:$Rx)
      AsmString = "mtdbatu 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 541 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 541, gprc:$Rx)
      AsmString = "mtdbatl 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 532 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 532, gprc:$Rx)
      AsmString = "mtibatu 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 533 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 533, gprc:$Rx)
      AsmString = "mtibatl 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 542 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 542, gprc:$Rx)
      AsmString = "mtdbatu 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 543 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 543, gprc:$Rx)
      AsmString = "mtdbatl 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 534 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 534, gprc:$Rx)
      AsmString = "mtibatu 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 535 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 535, gprc:$Rx)
      AsmString = "mtibatl 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1018 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1018, gprc:$Rx)
      AsmString = "mtdccr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1019 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1019, gprc:$Rx)
      AsmString = "mticcr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 981 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 981, gprc:$Rx)
      AsmString = "mtdear $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 980 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 980, gprc:$Rx)
      AsmString = "mtesr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 512 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 512, gprc:$Rx)
      AsmString = "mtspefscr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 986 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 986, gprc:$Rx)
      AsmString = "mttcr $\x02";
      break;
    }
    return false;
  case PPC::MTVRSAVE:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg())) {
      // (MTVRSAVE gprc:$rS)
      AsmString = "mtvrsave $\x01";
      break;
    }
    return false;
  case PPC::NOR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not $\x01, $\x02";
      break;
    }
    return false;
  case PPC::NOR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::QVFLOGICALb:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 0)
      AsmString = "qvfclr $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 1)
      AsmString = "qvfand $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 4) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 4)
      AsmString = "qvfandc $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 5) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 5)
      AsmString = "qvfctfb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 6) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 6)
      AsmString = "qvfxor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 7)
      AsmString = "qvfor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 8) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 8)
      AsmString = "qvfnor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 9) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 9)
      AsmString = "qvfequ $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 10) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 10)
      AsmString = "qvfnot $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 13) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 13)
      AsmString = "qvforc $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 14) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 14)
      AsmString = "qvfnand $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 15)
      AsmString = "qvfset $\x01";
      break;
    }
    return false;
  case PPC::RLDCL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCL g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDCLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCLo g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDICL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLDICL_32_64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICL_32_64 g8rc:$rA, gprc:$rS, 0, u6imm:$n)
      AsmString = "clrldi $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLDICLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi. $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi. $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLWINM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWINMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi. $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi. $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWNM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNM gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLWNMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNMo gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::SC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SC 0)
      AsmString = "sc";
      break;
    }
    return false;
  case PPC::SUBF8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBF8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (SYNC 1)
      AsmString = "lwsync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (SYNC 2)
      AsmString = "ptesync";
      break;
    }
    return false;
  case PPC::TD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 16, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 4, g8rc:$rA, g8rc:$rB)
      AsmString = "tdeq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 8, g8rc:$rA, g8rc:$rB)
      AsmString = "tdgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 24, g8rc:$rA, g8rc:$rB)
      AsmString = "tdne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 2, g8rc:$rA, g8rc:$rB)
      AsmString = "tdllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 1, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 31, g8rc:$rA, g8rc:$rB)
      AsmString = "tdu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 16, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 4, g8rc:$rA, s16imm:$imm)
      AsmString = "tdeqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 8, g8rc:$rA, s16imm:$imm)
      AsmString = "tdgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 24, g8rc:$rA, s16imm:$imm)
      AsmString = "tdnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 2, g8rc:$rA, s16imm:$imm)
      AsmString = "tdllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 1, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 31, g8rc:$rA, s16imm:$imm)
      AsmString = "tdui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::TLBIE:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TLBIE R0, gprc:$RB)
      AsmString = "tlbie $\x02";
      break;
    }
    return false;
  case PPC::TLBRE2:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLBRE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbrehi $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (TLBRE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbrelo $\x01, $\x02";
      break;
    }
    return false;
  case PPC::TLBWE2:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLBWE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbwehi $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (TLBWE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbwelo $\x01, $\x02";
      break;
    }
    return false;
  case PPC::TW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 16, gprc:$rA, gprc:$rB)
      AsmString = "twlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 4, gprc:$rA, gprc:$rB)
      AsmString = "tweq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 8, gprc:$rA, gprc:$rB)
      AsmString = "twgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 24, gprc:$rA, gprc:$rB)
      AsmString = "twne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 2, gprc:$rA, gprc:$rB)
      AsmString = "twllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 1, gprc:$rA, gprc:$rB)
      AsmString = "twlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 31, gprc:$rA, gprc:$rB)
      AsmString = "twu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 16, gprc:$rA, s16imm:$imm)
      AsmString = "twlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 4, gprc:$rA, s16imm:$imm)
      AsmString = "tweqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 8, gprc:$rA, s16imm:$imm)
      AsmString = "twgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 24, gprc:$rA, s16imm:$imm)
      AsmString = "twnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 2, gprc:$rA, s16imm:$imm)
      AsmString = "twllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 1, gprc:$rA, s16imm:$imm)
      AsmString = "twlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 31, gprc:$rA, s16imm:$imm)
      AsmString = "twui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::VNOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (VNOR vrrc:$vD, vrrc:$vA, vrrc:$vA)
      AsmString = "vnot $\x01, $\x02";
      break;
    }
    return false;
  case PPC::VOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VRRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (VOR vrrc:$vD, vrrc:$vA, vrrc:$vA)
      AsmString = "vmr $\x01, $\x02";
      break;
    }
    return false;
  case PPC::WAIT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT 0)
      AsmString = "wait";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (WAIT 1)
      AsmString = "waitrsv";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (WAIT 2)
      AsmString = "waitimpl";
      break;
    }
    return false;
  case PPC::XORI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).getReg() == PPC::R0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XORI R0, R0, 0)
      AsmString = "xnop";
      break;
    }
    return false;
  case PPC::XVCPSGNDP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNDP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovdp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XVCPSGNSP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNSP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovsp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XXPERMDI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 0)
      AsmString = "xxmrghd $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 3)
      AsmString = "xxmrgld $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XXPERMDIs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::gBC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzf $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfa $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCAat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bca+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bca- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCCTR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 12, crbitrc:$bi, 0)
      AsmString = "btctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 4, crbitrc:$bi, 0)
      AsmString = "bfctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 14, crbitrc:$bi, 0)
      AsmString = "btctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 6, crbitrc:$bi, 0)
      AsmString = "bfctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 15, crbitrc:$bi, 0)
      AsmString = "btctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 7, crbitrc:$bi, 0)
      AsmString = "bfctr+ $\x02";
      break;
    }
    return false;
  case PPC::gBCCTRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 12, crbitrc:$bi, 0)
      AsmString = "btctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 4, crbitrc:$bi, 0)
      AsmString = "bfctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 14, crbitrc:$bi, 0)
      AsmString = "btctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 6, crbitrc:$bi, 0)
      AsmString = "bfctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 15, crbitrc:$bi, 0)
      AsmString = "btctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 7, crbitrc:$bi, 0)
      AsmString = "bfctrl+ $\x02";
      break;
    }
    return false;
  case PPC::gBCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzfl $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfla $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCLAat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcla+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcla- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCLR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 12, crbitrc:$bi, 0)
      AsmString = "btlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 4, crbitrc:$bi, 0)
      AsmString = "bflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 14, crbitrc:$bi, 0)
      AsmString = "btlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 6, crbitrc:$bi, 0)
      AsmString = "bflr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 15, crbitrc:$bi, 0)
      AsmString = "btlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 7, crbitrc:$bi, 0)
      AsmString = "bflr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 8, crbitrc:$bi, 0)
      AsmString = "bdnztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 0, crbitrc:$bi, 0)
      AsmString = "bdnzflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 10, crbitrc:$bi, 0)
      AsmString = "bdztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 2, crbitrc:$bi, 0)
      AsmString = "bdzflr $\x02";
      break;
    }
    return false;
  case PPC::gBCLRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 12, crbitrc:$bi, 0)
      AsmString = "btlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 4, crbitrc:$bi, 0)
      AsmString = "bflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 14, crbitrc:$bi, 0)
      AsmString = "btlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 6, crbitrc:$bi, 0)
      AsmString = "bflrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 15, crbitrc:$bi, 0)
      AsmString = "btlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 7, crbitrc:$bi, 0)
      AsmString = "bflrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 8, crbitrc:$bi, 0)
      AsmString = "bdnztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 0, crbitrc:$bi, 0)
      AsmString = "bdnzflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 10, crbitrc:$bi, 0)
      AsmString = "bdztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 2, crbitrc:$bi, 0)
      AsmString = "bdzflrl $\x02";
      break;
    }
    return false;
  case PPC::gBCLat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcl+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcl- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bc+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bc- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void PPCInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printBranchOperand(MI, OpIdx, OS);
    break;
  case 1:
    printAbsBranchOperand(MI, OpIdx, OS);
    break;
  case 2:
    printS16ImmOperand(MI, OpIdx, OS);
    break;
  case 3:
    printU16ImmOperand(MI, OpIdx, OS);
    break;
  case 4:
    printU6ImmOperand(MI, OpIdx, OS);
    break;
  case 5:
    printU5ImmOperand(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
