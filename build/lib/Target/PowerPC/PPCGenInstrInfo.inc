/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Target Instruction Enum Values and Descriptors                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace PPC {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    INLINEASM_BR	= 2,
    CFI_INSTRUCTION	= 3,
    EH_LABEL	= 4,
    GC_LABEL	= 5,
    ANNOTATION_LABEL	= 6,
    KILL	= 7,
    EXTRACT_SUBREG	= 8,
    INSERT_SUBREG	= 9,
    IMPLICIT_DEF	= 10,
    SUBREG_TO_REG	= 11,
    COPY_TO_REGCLASS	= 12,
    DBG_VALUE	= 13,
    DBG_LABEL	= 14,
    REG_SEQUENCE	= 15,
    COPY	= 16,
    BUNDLE	= 17,
    LIFETIME_START	= 18,
    LIFETIME_END	= 19,
    STACKMAP	= 20,
    FENTRY_CALL	= 21,
    PATCHPOINT	= 22,
    LOAD_STACK_GUARD	= 23,
    STATEPOINT	= 24,
    LOCAL_ESCAPE	= 25,
    FAULTING_OP	= 26,
    PATCHABLE_OP	= 27,
    PATCHABLE_FUNCTION_ENTER	= 28,
    PATCHABLE_RET	= 29,
    PATCHABLE_FUNCTION_EXIT	= 30,
    PATCHABLE_TAIL_CALL	= 31,
    PATCHABLE_EVENT_CALL	= 32,
    PATCHABLE_TYPED_EVENT_CALL	= 33,
    ICALL_BRANCH_FUNNEL	= 34,
    G_ADD	= 35,
    G_SUB	= 36,
    G_MUL	= 37,
    G_SDIV	= 38,
    G_UDIV	= 39,
    G_SREM	= 40,
    G_UREM	= 41,
    G_AND	= 42,
    G_OR	= 43,
    G_XOR	= 44,
    G_IMPLICIT_DEF	= 45,
    G_PHI	= 46,
    G_FRAME_INDEX	= 47,
    G_GLOBAL_VALUE	= 48,
    G_EXTRACT	= 49,
    G_UNMERGE_VALUES	= 50,
    G_INSERT	= 51,
    G_MERGE_VALUES	= 52,
    G_BUILD_VECTOR	= 53,
    G_BUILD_VECTOR_TRUNC	= 54,
    G_CONCAT_VECTORS	= 55,
    G_PTRTOINT	= 56,
    G_INTTOPTR	= 57,
    G_BITCAST	= 58,
    G_INTRINSIC_TRUNC	= 59,
    G_INTRINSIC_ROUND	= 60,
    G_LOAD	= 61,
    G_SEXTLOAD	= 62,
    G_ZEXTLOAD	= 63,
    G_STORE	= 64,
    G_ATOMIC_CMPXCHG_WITH_SUCCESS	= 65,
    G_ATOMIC_CMPXCHG	= 66,
    G_ATOMICRMW_XCHG	= 67,
    G_ATOMICRMW_ADD	= 68,
    G_ATOMICRMW_SUB	= 69,
    G_ATOMICRMW_AND	= 70,
    G_ATOMICRMW_NAND	= 71,
    G_ATOMICRMW_OR	= 72,
    G_ATOMICRMW_XOR	= 73,
    G_ATOMICRMW_MAX	= 74,
    G_ATOMICRMW_MIN	= 75,
    G_ATOMICRMW_UMAX	= 76,
    G_ATOMICRMW_UMIN	= 77,
    G_FENCE	= 78,
    G_BRCOND	= 79,
    G_BRINDIRECT	= 80,
    G_INTRINSIC	= 81,
    G_INTRINSIC_W_SIDE_EFFECTS	= 82,
    G_ANYEXT	= 83,
    G_TRUNC	= 84,
    G_CONSTANT	= 85,
    G_FCONSTANT	= 86,
    G_VASTART	= 87,
    G_VAARG	= 88,
    G_SEXT	= 89,
    G_ZEXT	= 90,
    G_SHL	= 91,
    G_LSHR	= 92,
    G_ASHR	= 93,
    G_ICMP	= 94,
    G_FCMP	= 95,
    G_SELECT	= 96,
    G_UADDO	= 97,
    G_UADDE	= 98,
    G_USUBO	= 99,
    G_USUBE	= 100,
    G_SADDO	= 101,
    G_SADDE	= 102,
    G_SSUBO	= 103,
    G_SSUBE	= 104,
    G_UMULO	= 105,
    G_SMULO	= 106,
    G_UMULH	= 107,
    G_SMULH	= 108,
    G_FADD	= 109,
    G_FSUB	= 110,
    G_FMUL	= 111,
    G_FMA	= 112,
    G_FDIV	= 113,
    G_FREM	= 114,
    G_FPOW	= 115,
    G_FEXP	= 116,
    G_FEXP2	= 117,
    G_FLOG	= 118,
    G_FLOG2	= 119,
    G_FLOG10	= 120,
    G_FNEG	= 121,
    G_FPEXT	= 122,
    G_FPTRUNC	= 123,
    G_FPTOSI	= 124,
    G_FPTOUI	= 125,
    G_SITOFP	= 126,
    G_UITOFP	= 127,
    G_FABS	= 128,
    G_FCOPYSIGN	= 129,
    G_FCANONICALIZE	= 130,
    G_FMINNUM	= 131,
    G_FMAXNUM	= 132,
    G_FMINNUM_IEEE	= 133,
    G_FMAXNUM_IEEE	= 134,
    G_FMINIMUM	= 135,
    G_FMAXIMUM	= 136,
    G_GEP	= 137,
    G_PTR_MASK	= 138,
    G_SMIN	= 139,
    G_SMAX	= 140,
    G_UMIN	= 141,
    G_UMAX	= 142,
    G_BR	= 143,
    G_BRJT	= 144,
    G_INSERT_VECTOR_ELT	= 145,
    G_EXTRACT_VECTOR_ELT	= 146,
    G_SHUFFLE_VECTOR	= 147,
    G_CTTZ	= 148,
    G_CTTZ_ZERO_UNDEF	= 149,
    G_CTLZ	= 150,
    G_CTLZ_ZERO_UNDEF	= 151,
    G_CTPOP	= 152,
    G_BSWAP	= 153,
    G_FCEIL	= 154,
    G_FCOS	= 155,
    G_FSIN	= 156,
    G_FSQRT	= 157,
    G_FFLOOR	= 158,
    G_FRINT	= 159,
    G_FNEARBYINT	= 160,
    G_ADDRSPACE_CAST	= 161,
    G_BLOCK_ADDR	= 162,
    G_JUMP_TABLE	= 163,
    CFENCE8	= 164,
    CLRLSLDI	= 165,
    CLRLSLDIo	= 166,
    CLRLSLWI	= 167,
    CLRLSLWIo	= 168,
    CLRRDI	= 169,
    CLRRDIo	= 170,
    CLRRWI	= 171,
    CLRRWIo	= 172,
    CP_COPY_FIRST	= 173,
    CP_COPYx	= 174,
    CP_PASTE_LAST	= 175,
    CP_PASTEx	= 176,
    DCBFL	= 177,
    DCBFLP	= 178,
    DCBFx	= 179,
    DCBTCT	= 180,
    DCBTDS	= 181,
    DCBTSTCT	= 182,
    DCBTSTDS	= 183,
    DCBTSTT	= 184,
    DCBTSTx	= 185,
    DCBTT	= 186,
    DCBTx	= 187,
    DFLOADf32	= 188,
    DFLOADf64	= 189,
    DFSTOREf32	= 190,
    DFSTOREf64	= 191,
    EXTLDI	= 192,
    EXTLDIo	= 193,
    EXTLWI	= 194,
    EXTLWIo	= 195,
    EXTRDI	= 196,
    EXTRDIo	= 197,
    EXTRWI	= 198,
    EXTRWIo	= 199,
    INSLWI	= 200,
    INSLWIo	= 201,
    INSRDI	= 202,
    INSRDIo	= 203,
    INSRWI	= 204,
    INSRWIo	= 205,
    LAx	= 206,
    LIWAX	= 207,
    LIWZX	= 208,
    RLWIMIbm	= 209,
    RLWIMIobm	= 210,
    RLWINMbm	= 211,
    RLWINMobm	= 212,
    RLWNMbm	= 213,
    RLWNMobm	= 214,
    ROTRDI	= 215,
    ROTRDIo	= 216,
    ROTRWI	= 217,
    ROTRWIo	= 218,
    SLDI	= 219,
    SLDIo	= 220,
    SLWI	= 221,
    SLWIo	= 222,
    SPILLTOVSR_LD	= 223,
    SPILLTOVSR_LDX	= 224,
    SPILLTOVSR_ST	= 225,
    SPILLTOVSR_STX	= 226,
    SRDI	= 227,
    SRDIo	= 228,
    SRWI	= 229,
    SRWIo	= 230,
    STIWX	= 231,
    SUBI	= 232,
    SUBIC	= 233,
    SUBICo	= 234,
    SUBIS	= 235,
    SUBPCIS	= 236,
    XFLOADf32	= 237,
    XFLOADf64	= 238,
    XFSTOREf32	= 239,
    XFSTOREf64	= 240,
    ADD4	= 241,
    ADD4O	= 242,
    ADD4Oo	= 243,
    ADD4TLS	= 244,
    ADD4o	= 245,
    ADD8	= 246,
    ADD8O	= 247,
    ADD8Oo	= 248,
    ADD8TLS	= 249,
    ADD8TLS_	= 250,
    ADD8o	= 251,
    ADDC	= 252,
    ADDC8	= 253,
    ADDC8O	= 254,
    ADDC8Oo	= 255,
    ADDC8o	= 256,
    ADDCO	= 257,
    ADDCOo	= 258,
    ADDCo	= 259,
    ADDE	= 260,
    ADDE8	= 261,
    ADDE8O	= 262,
    ADDE8Oo	= 263,
    ADDE8o	= 264,
    ADDEO	= 265,
    ADDEOo	= 266,
    ADDEo	= 267,
    ADDI	= 268,
    ADDI8	= 269,
    ADDIC	= 270,
    ADDIC8	= 271,
    ADDICo	= 272,
    ADDIS	= 273,
    ADDIS8	= 274,
    ADDISdtprelHA	= 275,
    ADDISdtprelHA32	= 276,
    ADDISgotTprelHA	= 277,
    ADDIStlsgdHA	= 278,
    ADDIStlsldHA	= 279,
    ADDIStocHA	= 280,
    ADDIdtprelL	= 281,
    ADDIdtprelL32	= 282,
    ADDItlsgdL	= 283,
    ADDItlsgdL32	= 284,
    ADDItlsgdLADDR	= 285,
    ADDItlsgdLADDR32	= 286,
    ADDItlsldL	= 287,
    ADDItlsldL32	= 288,
    ADDItlsldLADDR	= 289,
    ADDItlsldLADDR32	= 290,
    ADDItocL	= 291,
    ADDME	= 292,
    ADDME8	= 293,
    ADDME8O	= 294,
    ADDME8Oo	= 295,
    ADDME8o	= 296,
    ADDMEO	= 297,
    ADDMEOo	= 298,
    ADDMEo	= 299,
    ADDPCIS	= 300,
    ADDZE	= 301,
    ADDZE8	= 302,
    ADDZE8O	= 303,
    ADDZE8Oo	= 304,
    ADDZE8o	= 305,
    ADDZEO	= 306,
    ADDZEOo	= 307,
    ADDZEo	= 308,
    ADJCALLSTACKDOWN	= 309,
    ADJCALLSTACKUP	= 310,
    AND	= 311,
    AND8	= 312,
    AND8o	= 313,
    ANDC	= 314,
    ANDC8	= 315,
    ANDC8o	= 316,
    ANDCo	= 317,
    ANDISo	= 318,
    ANDISo8	= 319,
    ANDIo	= 320,
    ANDIo8	= 321,
    ANDIo_1_EQ_BIT	= 322,
    ANDIo_1_EQ_BIT8	= 323,
    ANDIo_1_GT_BIT	= 324,
    ANDIo_1_GT_BIT8	= 325,
    ANDo	= 326,
    ATOMIC_CMP_SWAP_I16	= 327,
    ATOMIC_CMP_SWAP_I32	= 328,
    ATOMIC_CMP_SWAP_I64	= 329,
    ATOMIC_CMP_SWAP_I8	= 330,
    ATOMIC_LOAD_ADD_I16	= 331,
    ATOMIC_LOAD_ADD_I32	= 332,
    ATOMIC_LOAD_ADD_I64	= 333,
    ATOMIC_LOAD_ADD_I8	= 334,
    ATOMIC_LOAD_AND_I16	= 335,
    ATOMIC_LOAD_AND_I32	= 336,
    ATOMIC_LOAD_AND_I64	= 337,
    ATOMIC_LOAD_AND_I8	= 338,
    ATOMIC_LOAD_MAX_I16	= 339,
    ATOMIC_LOAD_MAX_I32	= 340,
    ATOMIC_LOAD_MAX_I64	= 341,
    ATOMIC_LOAD_MAX_I8	= 342,
    ATOMIC_LOAD_MIN_I16	= 343,
    ATOMIC_LOAD_MIN_I32	= 344,
    ATOMIC_LOAD_MIN_I64	= 345,
    ATOMIC_LOAD_MIN_I8	= 346,
    ATOMIC_LOAD_NAND_I16	= 347,
    ATOMIC_LOAD_NAND_I32	= 348,
    ATOMIC_LOAD_NAND_I64	= 349,
    ATOMIC_LOAD_NAND_I8	= 350,
    ATOMIC_LOAD_OR_I16	= 351,
    ATOMIC_LOAD_OR_I32	= 352,
    ATOMIC_LOAD_OR_I64	= 353,
    ATOMIC_LOAD_OR_I8	= 354,
    ATOMIC_LOAD_SUB_I16	= 355,
    ATOMIC_LOAD_SUB_I32	= 356,
    ATOMIC_LOAD_SUB_I64	= 357,
    ATOMIC_LOAD_SUB_I8	= 358,
    ATOMIC_LOAD_UMAX_I16	= 359,
    ATOMIC_LOAD_UMAX_I32	= 360,
    ATOMIC_LOAD_UMAX_I64	= 361,
    ATOMIC_LOAD_UMAX_I8	= 362,
    ATOMIC_LOAD_UMIN_I16	= 363,
    ATOMIC_LOAD_UMIN_I32	= 364,
    ATOMIC_LOAD_UMIN_I64	= 365,
    ATOMIC_LOAD_UMIN_I8	= 366,
    ATOMIC_LOAD_XOR_I16	= 367,
    ATOMIC_LOAD_XOR_I32	= 368,
    ATOMIC_LOAD_XOR_I64	= 369,
    ATOMIC_LOAD_XOR_I8	= 370,
    ATOMIC_SWAP_I16	= 371,
    ATOMIC_SWAP_I32	= 372,
    ATOMIC_SWAP_I64	= 373,
    ATOMIC_SWAP_I8	= 374,
    ATTN	= 375,
    B	= 376,
    BA	= 377,
    BC	= 378,
    BCC	= 379,
    BCCA	= 380,
    BCCCTR	= 381,
    BCCCTR8	= 382,
    BCCCTRL	= 383,
    BCCCTRL8	= 384,
    BCCL	= 385,
    BCCLA	= 386,
    BCCLR	= 387,
    BCCLRL	= 388,
    BCCTR	= 389,
    BCCTR8	= 390,
    BCCTR8n	= 391,
    BCCTRL	= 392,
    BCCTRL8	= 393,
    BCCTRL8n	= 394,
    BCCTRLn	= 395,
    BCCTRn	= 396,
    BCDCFNo	= 397,
    BCDCFSQo	= 398,
    BCDCFZo	= 399,
    BCDCPSGNo	= 400,
    BCDCTNo	= 401,
    BCDCTSQo	= 402,
    BCDCTZo	= 403,
    BCDSETSGNo	= 404,
    BCDSRo	= 405,
    BCDSo	= 406,
    BCDTRUNCo	= 407,
    BCDUSo	= 408,
    BCDUTRUNCo	= 409,
    BCL	= 410,
    BCLR	= 411,
    BCLRL	= 412,
    BCLRLn	= 413,
    BCLRn	= 414,
    BCLalways	= 415,
    BCLn	= 416,
    BCTR	= 417,
    BCTR8	= 418,
    BCTRL	= 419,
    BCTRL8	= 420,
    BCTRL8_LDinto_toc	= 421,
    BCn	= 422,
    BDNZ	= 423,
    BDNZ8	= 424,
    BDNZA	= 425,
    BDNZAm	= 426,
    BDNZAp	= 427,
    BDNZL	= 428,
    BDNZLA	= 429,
    BDNZLAm	= 430,
    BDNZLAp	= 431,
    BDNZLR	= 432,
    BDNZLR8	= 433,
    BDNZLRL	= 434,
    BDNZLRLm	= 435,
    BDNZLRLp	= 436,
    BDNZLRm	= 437,
    BDNZLRp	= 438,
    BDNZLm	= 439,
    BDNZLp	= 440,
    BDNZm	= 441,
    BDNZp	= 442,
    BDZ	= 443,
    BDZ8	= 444,
    BDZA	= 445,
    BDZAm	= 446,
    BDZAp	= 447,
    BDZL	= 448,
    BDZLA	= 449,
    BDZLAm	= 450,
    BDZLAp	= 451,
    BDZLR	= 452,
    BDZLR8	= 453,
    BDZLRL	= 454,
    BDZLRLm	= 455,
    BDZLRLp	= 456,
    BDZLRm	= 457,
    BDZLRp	= 458,
    BDZLm	= 459,
    BDZLp	= 460,
    BDZm	= 461,
    BDZp	= 462,
    BL	= 463,
    BL8	= 464,
    BL8_NOP	= 465,
    BL8_NOP_TLS	= 466,
    BL8_TLS	= 467,
    BL8_TLS_	= 468,
    BLA	= 469,
    BLA8	= 470,
    BLA8_NOP	= 471,
    BLR	= 472,
    BLR8	= 473,
    BLRL	= 474,
    BL_NOP	= 475,
    BL_TLS	= 476,
    BPERMD	= 477,
    BRINC	= 478,
    CLRBHRB	= 479,
    CMPB	= 480,
    CMPB8	= 481,
    CMPD	= 482,
    CMPDI	= 483,
    CMPEQB	= 484,
    CMPLD	= 485,
    CMPLDI	= 486,
    CMPLW	= 487,
    CMPLWI	= 488,
    CMPRB	= 489,
    CMPRB8	= 490,
    CMPW	= 491,
    CMPWI	= 492,
    CNTLZD	= 493,
    CNTLZDo	= 494,
    CNTLZW	= 495,
    CNTLZW8	= 496,
    CNTLZW8o	= 497,
    CNTLZWo	= 498,
    CNTTZD	= 499,
    CNTTZDo	= 500,
    CNTTZW	= 501,
    CNTTZW8	= 502,
    CNTTZW8o	= 503,
    CNTTZWo	= 504,
    CP_ABORT	= 505,
    CP_COPY	= 506,
    CP_COPY8	= 507,
    CP_PASTE	= 508,
    CP_PASTE8	= 509,
    CP_PASTE8o	= 510,
    CP_PASTEo	= 511,
    CR6SET	= 512,
    CR6UNSET	= 513,
    CRAND	= 514,
    CRANDC	= 515,
    CREQV	= 516,
    CRNAND	= 517,
    CRNOR	= 518,
    CROR	= 519,
    CRORC	= 520,
    CRSET	= 521,
    CRUNSET	= 522,
    CRXOR	= 523,
    CTRL_DEP	= 524,
    DARN	= 525,
    DCBA	= 526,
    DCBF	= 527,
    DCBFEP	= 528,
    DCBI	= 529,
    DCBST	= 530,
    DCBSTEP	= 531,
    DCBT	= 532,
    DCBTEP	= 533,
    DCBTST	= 534,
    DCBTSTEP	= 535,
    DCBZ	= 536,
    DCBZEP	= 537,
    DCBZL	= 538,
    DCBZLEP	= 539,
    DCCCI	= 540,
    DIVD	= 541,
    DIVDE	= 542,
    DIVDEO	= 543,
    DIVDEOo	= 544,
    DIVDEU	= 545,
    DIVDEUO	= 546,
    DIVDEUOo	= 547,
    DIVDEUo	= 548,
    DIVDEo	= 549,
    DIVDO	= 550,
    DIVDOo	= 551,
    DIVDU	= 552,
    DIVDUO	= 553,
    DIVDUOo	= 554,
    DIVDUo	= 555,
    DIVDo	= 556,
    DIVW	= 557,
    DIVWE	= 558,
    DIVWEO	= 559,
    DIVWEOo	= 560,
    DIVWEU	= 561,
    DIVWEUO	= 562,
    DIVWEUOo	= 563,
    DIVWEUo	= 564,
    DIVWEo	= 565,
    DIVWO	= 566,
    DIVWOo	= 567,
    DIVWU	= 568,
    DIVWUO	= 569,
    DIVWUOo	= 570,
    DIVWUo	= 571,
    DIVWo	= 572,
    DSS	= 573,
    DSSALL	= 574,
    DST	= 575,
    DST64	= 576,
    DSTST	= 577,
    DSTST64	= 578,
    DSTSTT	= 579,
    DSTSTT64	= 580,
    DSTT	= 581,
    DSTT64	= 582,
    DYNALLOC	= 583,
    DYNALLOC8	= 584,
    DYNAREAOFFSET	= 585,
    DYNAREAOFFSET8	= 586,
    EFDABS	= 587,
    EFDADD	= 588,
    EFDCFS	= 589,
    EFDCFSF	= 590,
    EFDCFSI	= 591,
    EFDCFSID	= 592,
    EFDCFUF	= 593,
    EFDCFUI	= 594,
    EFDCFUID	= 595,
    EFDCMPEQ	= 596,
    EFDCMPGT	= 597,
    EFDCMPLT	= 598,
    EFDCTSF	= 599,
    EFDCTSI	= 600,
    EFDCTSIDZ	= 601,
    EFDCTSIZ	= 602,
    EFDCTUF	= 603,
    EFDCTUI	= 604,
    EFDCTUIDZ	= 605,
    EFDCTUIZ	= 606,
    EFDDIV	= 607,
    EFDMUL	= 608,
    EFDNABS	= 609,
    EFDNEG	= 610,
    EFDSUB	= 611,
    EFDTSTEQ	= 612,
    EFDTSTGT	= 613,
    EFDTSTLT	= 614,
    EFSABS	= 615,
    EFSADD	= 616,
    EFSCFD	= 617,
    EFSCFSF	= 618,
    EFSCFSI	= 619,
    EFSCFUF	= 620,
    EFSCFUI	= 621,
    EFSCMPEQ	= 622,
    EFSCMPGT	= 623,
    EFSCMPLT	= 624,
    EFSCTSF	= 625,
    EFSCTSI	= 626,
    EFSCTSIZ	= 627,
    EFSCTUF	= 628,
    EFSCTUI	= 629,
    EFSCTUIZ	= 630,
    EFSDIV	= 631,
    EFSMUL	= 632,
    EFSNABS	= 633,
    EFSNEG	= 634,
    EFSSUB	= 635,
    EFSTSTEQ	= 636,
    EFSTSTGT	= 637,
    EFSTSTLT	= 638,
    EH_SjLj_LongJmp32	= 639,
    EH_SjLj_LongJmp64	= 640,
    EH_SjLj_SetJmp32	= 641,
    EH_SjLj_SetJmp64	= 642,
    EH_SjLj_Setup	= 643,
    EQV	= 644,
    EQV8	= 645,
    EQV8o	= 646,
    EQVo	= 647,
    EVABS	= 648,
    EVADDIW	= 649,
    EVADDSMIAAW	= 650,
    EVADDSSIAAW	= 651,
    EVADDUMIAAW	= 652,
    EVADDUSIAAW	= 653,
    EVADDW	= 654,
    EVAND	= 655,
    EVANDC	= 656,
    EVCMPEQ	= 657,
    EVCMPGTS	= 658,
    EVCMPGTU	= 659,
    EVCMPLTS	= 660,
    EVCMPLTU	= 661,
    EVCNTLSW	= 662,
    EVCNTLZW	= 663,
    EVDIVWS	= 664,
    EVDIVWU	= 665,
    EVEQV	= 666,
    EVEXTSB	= 667,
    EVEXTSH	= 668,
    EVFSABS	= 669,
    EVFSADD	= 670,
    EVFSCFSF	= 671,
    EVFSCFSI	= 672,
    EVFSCFUF	= 673,
    EVFSCFUI	= 674,
    EVFSCMPEQ	= 675,
    EVFSCMPGT	= 676,
    EVFSCMPLT	= 677,
    EVFSCTSF	= 678,
    EVFSCTSI	= 679,
    EVFSCTSIZ	= 680,
    EVFSCTUF	= 681,
    EVFSCTUI	= 682,
    EVFSCTUIZ	= 683,
    EVFSDIV	= 684,
    EVFSMUL	= 685,
    EVFSNABS	= 686,
    EVFSNEG	= 687,
    EVFSSUB	= 688,
    EVFSTSTEQ	= 689,
    EVFSTSTGT	= 690,
    EVFSTSTLT	= 691,
    EVLDD	= 692,
    EVLDDX	= 693,
    EVLDH	= 694,
    EVLDHX	= 695,
    EVLDW	= 696,
    EVLDWX	= 697,
    EVLHHESPLAT	= 698,
    EVLHHESPLATX	= 699,
    EVLHHOSSPLAT	= 700,
    EVLHHOSSPLATX	= 701,
    EVLHHOUSPLAT	= 702,
    EVLHHOUSPLATX	= 703,
    EVLWHE	= 704,
    EVLWHEX	= 705,
    EVLWHOS	= 706,
    EVLWHOSX	= 707,
    EVLWHOU	= 708,
    EVLWHOUX	= 709,
    EVLWHSPLAT	= 710,
    EVLWHSPLATX	= 711,
    EVLWWSPLAT	= 712,
    EVLWWSPLATX	= 713,
    EVMERGEHI	= 714,
    EVMERGEHILO	= 715,
    EVMERGELO	= 716,
    EVMERGELOHI	= 717,
    EVMHEGSMFAA	= 718,
    EVMHEGSMFAN	= 719,
    EVMHEGSMIAA	= 720,
    EVMHEGSMIAN	= 721,
    EVMHEGUMIAA	= 722,
    EVMHEGUMIAN	= 723,
    EVMHESMF	= 724,
    EVMHESMFA	= 725,
    EVMHESMFAAW	= 726,
    EVMHESMFANW	= 727,
    EVMHESMI	= 728,
    EVMHESMIA	= 729,
    EVMHESMIAAW	= 730,
    EVMHESMIANW	= 731,
    EVMHESSF	= 732,
    EVMHESSFA	= 733,
    EVMHESSFAAW	= 734,
    EVMHESSFANW	= 735,
    EVMHESSIAAW	= 736,
    EVMHESSIANW	= 737,
    EVMHEUMI	= 738,
    EVMHEUMIA	= 739,
    EVMHEUMIAAW	= 740,
    EVMHEUMIANW	= 741,
    EVMHEUSIAAW	= 742,
    EVMHEUSIANW	= 743,
    EVMHOGSMFAA	= 744,
    EVMHOGSMFAN	= 745,
    EVMHOGSMIAA	= 746,
    EVMHOGSMIAN	= 747,
    EVMHOGUMIAA	= 748,
    EVMHOGUMIAN	= 749,
    EVMHOSMF	= 750,
    EVMHOSMFA	= 751,
    EVMHOSMFAAW	= 752,
    EVMHOSMFANW	= 753,
    EVMHOSMI	= 754,
    EVMHOSMIA	= 755,
    EVMHOSMIAAW	= 756,
    EVMHOSMIANW	= 757,
    EVMHOSSF	= 758,
    EVMHOSSFA	= 759,
    EVMHOSSFAAW	= 760,
    EVMHOSSFANW	= 761,
    EVMHOSSIAAW	= 762,
    EVMHOSSIANW	= 763,
    EVMHOUMI	= 764,
    EVMHOUMIA	= 765,
    EVMHOUMIAAW	= 766,
    EVMHOUMIANW	= 767,
    EVMHOUSIAAW	= 768,
    EVMHOUSIANW	= 769,
    EVMRA	= 770,
    EVMWHSMF	= 771,
    EVMWHSMFA	= 772,
    EVMWHSMI	= 773,
    EVMWHSMIA	= 774,
    EVMWHSSF	= 775,
    EVMWHSSFA	= 776,
    EVMWHUMI	= 777,
    EVMWHUMIA	= 778,
    EVMWLSMIAAW	= 779,
    EVMWLSMIANW	= 780,
    EVMWLSSIAAW	= 781,
    EVMWLSSIANW	= 782,
    EVMWLUMI	= 783,
    EVMWLUMIA	= 784,
    EVMWLUMIAAW	= 785,
    EVMWLUMIANW	= 786,
    EVMWLUSIAAW	= 787,
    EVMWLUSIANW	= 788,
    EVMWSMF	= 789,
    EVMWSMFA	= 790,
    EVMWSMFAA	= 791,
    EVMWSMFAN	= 792,
    EVMWSMI	= 793,
    EVMWSMIA	= 794,
    EVMWSMIAA	= 795,
    EVMWSMIAN	= 796,
    EVMWSSF	= 797,
    EVMWSSFA	= 798,
    EVMWSSFAA	= 799,
    EVMWSSFAN	= 800,
    EVMWUMI	= 801,
    EVMWUMIA	= 802,
    EVMWUMIAA	= 803,
    EVMWUMIAN	= 804,
    EVNAND	= 805,
    EVNEG	= 806,
    EVNOR	= 807,
    EVOR	= 808,
    EVORC	= 809,
    EVRLW	= 810,
    EVRLWI	= 811,
    EVRNDW	= 812,
    EVSEL	= 813,
    EVSLW	= 814,
    EVSLWI	= 815,
    EVSPLATFI	= 816,
    EVSPLATI	= 817,
    EVSRWIS	= 818,
    EVSRWIU	= 819,
    EVSRWS	= 820,
    EVSRWU	= 821,
    EVSTDD	= 822,
    EVSTDDX	= 823,
    EVSTDH	= 824,
    EVSTDHX	= 825,
    EVSTDW	= 826,
    EVSTDWX	= 827,
    EVSTWHE	= 828,
    EVSTWHEX	= 829,
    EVSTWHO	= 830,
    EVSTWHOX	= 831,
    EVSTWWE	= 832,
    EVSTWWEX	= 833,
    EVSTWWO	= 834,
    EVSTWWOX	= 835,
    EVSUBFSMIAAW	= 836,
    EVSUBFSSIAAW	= 837,
    EVSUBFUMIAAW	= 838,
    EVSUBFUSIAAW	= 839,
    EVSUBFW	= 840,
    EVSUBIFW	= 841,
    EVXOR	= 842,
    EXTSB	= 843,
    EXTSB8	= 844,
    EXTSB8_32_64	= 845,
    EXTSB8o	= 846,
    EXTSBo	= 847,
    EXTSH	= 848,
    EXTSH8	= 849,
    EXTSH8_32_64	= 850,
    EXTSH8o	= 851,
    EXTSHo	= 852,
    EXTSW	= 853,
    EXTSWSLI	= 854,
    EXTSWSLI_32_64	= 855,
    EXTSWSLI_32_64o	= 856,
    EXTSWSLIo	= 857,
    EXTSW_32	= 858,
    EXTSW_32_64	= 859,
    EXTSW_32_64o	= 860,
    EXTSWo	= 861,
    EnforceIEIO	= 862,
    FABSD	= 863,
    FABSDo	= 864,
    FABSS	= 865,
    FABSSo	= 866,
    FADD	= 867,
    FADDS	= 868,
    FADDSo	= 869,
    FADDo	= 870,
    FADDrtz	= 871,
    FCFID	= 872,
    FCFIDS	= 873,
    FCFIDSo	= 874,
    FCFIDU	= 875,
    FCFIDUS	= 876,
    FCFIDUSo	= 877,
    FCFIDUo	= 878,
    FCFIDo	= 879,
    FCMPUD	= 880,
    FCMPUS	= 881,
    FCPSGND	= 882,
    FCPSGNDo	= 883,
    FCPSGNS	= 884,
    FCPSGNSo	= 885,
    FCTID	= 886,
    FCTIDU	= 887,
    FCTIDUZ	= 888,
    FCTIDUZo	= 889,
    FCTIDUo	= 890,
    FCTIDZ	= 891,
    FCTIDZo	= 892,
    FCTIDo	= 893,
    FCTIW	= 894,
    FCTIWU	= 895,
    FCTIWUZ	= 896,
    FCTIWUZo	= 897,
    FCTIWUo	= 898,
    FCTIWZ	= 899,
    FCTIWZo	= 900,
    FCTIWo	= 901,
    FDIV	= 902,
    FDIVS	= 903,
    FDIVSo	= 904,
    FDIVo	= 905,
    FMADD	= 906,
    FMADDS	= 907,
    FMADDSo	= 908,
    FMADDo	= 909,
    FMR	= 910,
    FMRo	= 911,
    FMSUB	= 912,
    FMSUBS	= 913,
    FMSUBSo	= 914,
    FMSUBo	= 915,
    FMUL	= 916,
    FMULS	= 917,
    FMULSo	= 918,
    FMULo	= 919,
    FNABSD	= 920,
    FNABSDo	= 921,
    FNABSS	= 922,
    FNABSSo	= 923,
    FNEGD	= 924,
    FNEGDo	= 925,
    FNEGS	= 926,
    FNEGSo	= 927,
    FNMADD	= 928,
    FNMADDS	= 929,
    FNMADDSo	= 930,
    FNMADDo	= 931,
    FNMSUB	= 932,
    FNMSUBS	= 933,
    FNMSUBSo	= 934,
    FNMSUBo	= 935,
    FRE	= 936,
    FRES	= 937,
    FRESo	= 938,
    FREo	= 939,
    FRIMD	= 940,
    FRIMDo	= 941,
    FRIMS	= 942,
    FRIMSo	= 943,
    FRIND	= 944,
    FRINDo	= 945,
    FRINS	= 946,
    FRINSo	= 947,
    FRIPD	= 948,
    FRIPDo	= 949,
    FRIPS	= 950,
    FRIPSo	= 951,
    FRIZD	= 952,
    FRIZDo	= 953,
    FRIZS	= 954,
    FRIZSo	= 955,
    FRSP	= 956,
    FRSPo	= 957,
    FRSQRTE	= 958,
    FRSQRTES	= 959,
    FRSQRTESo	= 960,
    FRSQRTEo	= 961,
    FSELD	= 962,
    FSELDo	= 963,
    FSELS	= 964,
    FSELSo	= 965,
    FSQRT	= 966,
    FSQRTS	= 967,
    FSQRTSo	= 968,
    FSQRTo	= 969,
    FSUB	= 970,
    FSUBS	= 971,
    FSUBSo	= 972,
    FSUBo	= 973,
    FTDIV	= 974,
    FTSQRT	= 975,
    GETtlsADDR	= 976,
    GETtlsADDR32	= 977,
    GETtlsldADDR	= 978,
    GETtlsldADDR32	= 979,
    HRFID	= 980,
    ICBI	= 981,
    ICBIEP	= 982,
    ICBLC	= 983,
    ICBLQ	= 984,
    ICBT	= 985,
    ICBTLS	= 986,
    ICCCI	= 987,
    ISEL	= 988,
    ISEL8	= 989,
    ISYNC	= 990,
    LA	= 991,
    LBARX	= 992,
    LBARXL	= 993,
    LBEPX	= 994,
    LBZ	= 995,
    LBZ8	= 996,
    LBZCIX	= 997,
    LBZU	= 998,
    LBZU8	= 999,
    LBZUX	= 1000,
    LBZUX8	= 1001,
    LBZX	= 1002,
    LBZX8	= 1003,
    LBZXTLS	= 1004,
    LBZXTLS_	= 1005,
    LBZXTLS_32	= 1006,
    LD	= 1007,
    LDARX	= 1008,
    LDARXL	= 1009,
    LDAT	= 1010,
    LDBRX	= 1011,
    LDCIX	= 1012,
    LDMX	= 1013,
    LDU	= 1014,
    LDUX	= 1015,
    LDX	= 1016,
    LDXTLS	= 1017,
    LDXTLS_	= 1018,
    LDgotTprelL	= 1019,
    LDgotTprelL32	= 1020,
    LDtoc	= 1021,
    LDtocBA	= 1022,
    LDtocCPT	= 1023,
    LDtocJTI	= 1024,
    LDtocL	= 1025,
    LFD	= 1026,
    LFDEPX	= 1027,
    LFDU	= 1028,
    LFDUX	= 1029,
    LFDX	= 1030,
    LFIWAX	= 1031,
    LFIWZX	= 1032,
    LFS	= 1033,
    LFSU	= 1034,
    LFSUX	= 1035,
    LFSX	= 1036,
    LHA	= 1037,
    LHA8	= 1038,
    LHARX	= 1039,
    LHARXL	= 1040,
    LHAU	= 1041,
    LHAU8	= 1042,
    LHAUX	= 1043,
    LHAUX8	= 1044,
    LHAX	= 1045,
    LHAX8	= 1046,
    LHBRX	= 1047,
    LHBRX8	= 1048,
    LHEPX	= 1049,
    LHZ	= 1050,
    LHZ8	= 1051,
    LHZCIX	= 1052,
    LHZU	= 1053,
    LHZU8	= 1054,
    LHZUX	= 1055,
    LHZUX8	= 1056,
    LHZX	= 1057,
    LHZX8	= 1058,
    LHZXTLS	= 1059,
    LHZXTLS_	= 1060,
    LHZXTLS_32	= 1061,
    LI	= 1062,
    LI8	= 1063,
    LIS	= 1064,
    LIS8	= 1065,
    LMW	= 1066,
    LSWI	= 1067,
    LVEBX	= 1068,
    LVEHX	= 1069,
    LVEWX	= 1070,
    LVSL	= 1071,
    LVSR	= 1072,
    LVX	= 1073,
    LVXL	= 1074,
    LWA	= 1075,
    LWARX	= 1076,
    LWARXL	= 1077,
    LWAT	= 1078,
    LWAUX	= 1079,
    LWAX	= 1080,
    LWAX_32	= 1081,
    LWA_32	= 1082,
    LWBRX	= 1083,
    LWBRX8	= 1084,
    LWEPX	= 1085,
    LWZ	= 1086,
    LWZ8	= 1087,
    LWZCIX	= 1088,
    LWZU	= 1089,
    LWZU8	= 1090,
    LWZUX	= 1091,
    LWZUX8	= 1092,
    LWZX	= 1093,
    LWZX8	= 1094,
    LWZXTLS	= 1095,
    LWZXTLS_	= 1096,
    LWZXTLS_32	= 1097,
    LWZtoc	= 1098,
    LXSD	= 1099,
    LXSDX	= 1100,
    LXSIBZX	= 1101,
    LXSIHZX	= 1102,
    LXSIWAX	= 1103,
    LXSIWZX	= 1104,
    LXSSP	= 1105,
    LXSSPX	= 1106,
    LXV	= 1107,
    LXVB16X	= 1108,
    LXVD2X	= 1109,
    LXVDSX	= 1110,
    LXVH8X	= 1111,
    LXVL	= 1112,
    LXVLL	= 1113,
    LXVW4X	= 1114,
    LXVWSX	= 1115,
    LXVX	= 1116,
    MADDHD	= 1117,
    MADDHDU	= 1118,
    MADDLD	= 1119,
    MADDLD8	= 1120,
    MBAR	= 1121,
    MCRF	= 1122,
    MCRFS	= 1123,
    MCRXRX	= 1124,
    MFBHRBE	= 1125,
    MFCR	= 1126,
    MFCR8	= 1127,
    MFCTR	= 1128,
    MFCTR8	= 1129,
    MFDCR	= 1130,
    MFFS	= 1131,
    MFFSCDRN	= 1132,
    MFFSCDRNI	= 1133,
    MFFSCE	= 1134,
    MFFSCRN	= 1135,
    MFFSCRNI	= 1136,
    MFFSL	= 1137,
    MFFSo	= 1138,
    MFLR	= 1139,
    MFLR8	= 1140,
    MFMSR	= 1141,
    MFOCRF	= 1142,
    MFOCRF8	= 1143,
    MFPMR	= 1144,
    MFSPR	= 1145,
    MFSPR8	= 1146,
    MFSR	= 1147,
    MFSRIN	= 1148,
    MFTB	= 1149,
    MFTB8	= 1150,
    MFVRD	= 1151,
    MFVRSAVE	= 1152,
    MFVRSAVEv	= 1153,
    MFVSCR	= 1154,
    MFVSRD	= 1155,
    MFVSRLD	= 1156,
    MFVSRWZ	= 1157,
    MODSD	= 1158,
    MODSW	= 1159,
    MODUD	= 1160,
    MODUW	= 1161,
    MSGSYNC	= 1162,
    MSYNC	= 1163,
    MTCRF	= 1164,
    MTCRF8	= 1165,
    MTCTR	= 1166,
    MTCTR8	= 1167,
    MTCTR8loop	= 1168,
    MTCTRloop	= 1169,
    MTDCR	= 1170,
    MTFSB0	= 1171,
    MTFSB1	= 1172,
    MTFSF	= 1173,
    MTFSFI	= 1174,
    MTFSFIo	= 1175,
    MTFSFb	= 1176,
    MTFSFo	= 1177,
    MTLR	= 1178,
    MTLR8	= 1179,
    MTMSR	= 1180,
    MTMSRD	= 1181,
    MTOCRF	= 1182,
    MTOCRF8	= 1183,
    MTPMR	= 1184,
    MTSPR	= 1185,
    MTSPR8	= 1186,
    MTSR	= 1187,
    MTSRIN	= 1188,
    MTVRSAVE	= 1189,
    MTVRSAVEv	= 1190,
    MTVSCR	= 1191,
    MTVSRD	= 1192,
    MTVSRDD	= 1193,
    MTVSRWA	= 1194,
    MTVSRWS	= 1195,
    MTVSRWZ	= 1196,
    MULHD	= 1197,
    MULHDU	= 1198,
    MULHDUo	= 1199,
    MULHDo	= 1200,
    MULHW	= 1201,
    MULHWU	= 1202,
    MULHWUo	= 1203,
    MULHWo	= 1204,
    MULLD	= 1205,
    MULLDO	= 1206,
    MULLDOo	= 1207,
    MULLDo	= 1208,
    MULLI	= 1209,
    MULLI8	= 1210,
    MULLW	= 1211,
    MULLWO	= 1212,
    MULLWOo	= 1213,
    MULLWo	= 1214,
    MoveGOTtoLR	= 1215,
    MovePCtoLR	= 1216,
    MovePCtoLR8	= 1217,
    NAND	= 1218,
    NAND8	= 1219,
    NAND8o	= 1220,
    NANDo	= 1221,
    NAP	= 1222,
    NEG	= 1223,
    NEG8	= 1224,
    NEG8O	= 1225,
    NEG8Oo	= 1226,
    NEG8o	= 1227,
    NEGO	= 1228,
    NEGOo	= 1229,
    NEGo	= 1230,
    NOP	= 1231,
    NOP_GT_PWR6	= 1232,
    NOP_GT_PWR7	= 1233,
    NOR	= 1234,
    NOR8	= 1235,
    NOR8o	= 1236,
    NORo	= 1237,
    OR	= 1238,
    OR8	= 1239,
    OR8o	= 1240,
    ORC	= 1241,
    ORC8	= 1242,
    ORC8o	= 1243,
    ORCo	= 1244,
    ORI	= 1245,
    ORI8	= 1246,
    ORIS	= 1247,
    ORIS8	= 1248,
    ORo	= 1249,
    POPCNTB	= 1250,
    POPCNTD	= 1251,
    POPCNTW	= 1252,
    PPC32GOT	= 1253,
    PPC32PICGOT	= 1254,
    QVALIGNI	= 1255,
    QVALIGNIb	= 1256,
    QVALIGNIs	= 1257,
    QVESPLATI	= 1258,
    QVESPLATIb	= 1259,
    QVESPLATIs	= 1260,
    QVFABS	= 1261,
    QVFABSs	= 1262,
    QVFADD	= 1263,
    QVFADDS	= 1264,
    QVFADDSs	= 1265,
    QVFCFID	= 1266,
    QVFCFIDS	= 1267,
    QVFCFIDU	= 1268,
    QVFCFIDUS	= 1269,
    QVFCFIDb	= 1270,
    QVFCMPEQ	= 1271,
    QVFCMPEQb	= 1272,
    QVFCMPEQbs	= 1273,
    QVFCMPGT	= 1274,
    QVFCMPGTb	= 1275,
    QVFCMPGTbs	= 1276,
    QVFCMPLT	= 1277,
    QVFCMPLTb	= 1278,
    QVFCMPLTbs	= 1279,
    QVFCPSGN	= 1280,
    QVFCPSGNs	= 1281,
    QVFCTID	= 1282,
    QVFCTIDU	= 1283,
    QVFCTIDUZ	= 1284,
    QVFCTIDZ	= 1285,
    QVFCTIDb	= 1286,
    QVFCTIW	= 1287,
    QVFCTIWU	= 1288,
    QVFCTIWUZ	= 1289,
    QVFCTIWZ	= 1290,
    QVFLOGICAL	= 1291,
    QVFLOGICALb	= 1292,
    QVFLOGICALs	= 1293,
    QVFMADD	= 1294,
    QVFMADDS	= 1295,
    QVFMADDSs	= 1296,
    QVFMR	= 1297,
    QVFMRb	= 1298,
    QVFMRs	= 1299,
    QVFMSUB	= 1300,
    QVFMSUBS	= 1301,
    QVFMSUBSs	= 1302,
    QVFMUL	= 1303,
    QVFMULS	= 1304,
    QVFMULSs	= 1305,
    QVFNABS	= 1306,
    QVFNABSs	= 1307,
    QVFNEG	= 1308,
    QVFNEGs	= 1309,
    QVFNMADD	= 1310,
    QVFNMADDS	= 1311,
    QVFNMADDSs	= 1312,
    QVFNMSUB	= 1313,
    QVFNMSUBS	= 1314,
    QVFNMSUBSs	= 1315,
    QVFPERM	= 1316,
    QVFPERMs	= 1317,
    QVFRE	= 1318,
    QVFRES	= 1319,
    QVFRESs	= 1320,
    QVFRIM	= 1321,
    QVFRIMs	= 1322,
    QVFRIN	= 1323,
    QVFRINs	= 1324,
    QVFRIP	= 1325,
    QVFRIPs	= 1326,
    QVFRIZ	= 1327,
    QVFRIZs	= 1328,
    QVFRSP	= 1329,
    QVFRSPs	= 1330,
    QVFRSQRTE	= 1331,
    QVFRSQRTES	= 1332,
    QVFRSQRTESs	= 1333,
    QVFSEL	= 1334,
    QVFSELb	= 1335,
    QVFSELbb	= 1336,
    QVFSELbs	= 1337,
    QVFSUB	= 1338,
    QVFSUBS	= 1339,
    QVFSUBSs	= 1340,
    QVFTSTNAN	= 1341,
    QVFTSTNANb	= 1342,
    QVFTSTNANbs	= 1343,
    QVFXMADD	= 1344,
    QVFXMADDS	= 1345,
    QVFXMUL	= 1346,
    QVFXMULS	= 1347,
    QVFXXCPNMADD	= 1348,
    QVFXXCPNMADDS	= 1349,
    QVFXXMADD	= 1350,
    QVFXXMADDS	= 1351,
    QVFXXNPMADD	= 1352,
    QVFXXNPMADDS	= 1353,
    QVGPCI	= 1354,
    QVLFCDUX	= 1355,
    QVLFCDUXA	= 1356,
    QVLFCDX	= 1357,
    QVLFCDXA	= 1358,
    QVLFCSUX	= 1359,
    QVLFCSUXA	= 1360,
    QVLFCSX	= 1361,
    QVLFCSXA	= 1362,
    QVLFCSXs	= 1363,
    QVLFDUX	= 1364,
    QVLFDUXA	= 1365,
    QVLFDX	= 1366,
    QVLFDXA	= 1367,
    QVLFDXb	= 1368,
    QVLFIWAX	= 1369,
    QVLFIWAXA	= 1370,
    QVLFIWZX	= 1371,
    QVLFIWZXA	= 1372,
    QVLFSUX	= 1373,
    QVLFSUXA	= 1374,
    QVLFSX	= 1375,
    QVLFSXA	= 1376,
    QVLFSXb	= 1377,
    QVLFSXs	= 1378,
    QVLPCLDX	= 1379,
    QVLPCLSX	= 1380,
    QVLPCLSXint	= 1381,
    QVLPCRDX	= 1382,
    QVLPCRSX	= 1383,
    QVSTFCDUX	= 1384,
    QVSTFCDUXA	= 1385,
    QVSTFCDUXI	= 1386,
    QVSTFCDUXIA	= 1387,
    QVSTFCDX	= 1388,
    QVSTFCDXA	= 1389,
    QVSTFCDXI	= 1390,
    QVSTFCDXIA	= 1391,
    QVSTFCSUX	= 1392,
    QVSTFCSUXA	= 1393,
    QVSTFCSUXI	= 1394,
    QVSTFCSUXIA	= 1395,
    QVSTFCSX	= 1396,
    QVSTFCSXA	= 1397,
    QVSTFCSXI	= 1398,
    QVSTFCSXIA	= 1399,
    QVSTFCSXs	= 1400,
    QVSTFDUX	= 1401,
    QVSTFDUXA	= 1402,
    QVSTFDUXI	= 1403,
    QVSTFDUXIA	= 1404,
    QVSTFDX	= 1405,
    QVSTFDXA	= 1406,
    QVSTFDXI	= 1407,
    QVSTFDXIA	= 1408,
    QVSTFDXb	= 1409,
    QVSTFIWX	= 1410,
    QVSTFIWXA	= 1411,
    QVSTFSUX	= 1412,
    QVSTFSUXA	= 1413,
    QVSTFSUXI	= 1414,
    QVSTFSUXIA	= 1415,
    QVSTFSUXs	= 1416,
    QVSTFSX	= 1417,
    QVSTFSXA	= 1418,
    QVSTFSXI	= 1419,
    QVSTFSXIA	= 1420,
    QVSTFSXs	= 1421,
    RESTORE_CR	= 1422,
    RESTORE_CRBIT	= 1423,
    RESTORE_VRSAVE	= 1424,
    RFCI	= 1425,
    RFDI	= 1426,
    RFEBB	= 1427,
    RFI	= 1428,
    RFID	= 1429,
    RFMCI	= 1430,
    RLDCL	= 1431,
    RLDCLo	= 1432,
    RLDCR	= 1433,
    RLDCRo	= 1434,
    RLDIC	= 1435,
    RLDICL	= 1436,
    RLDICL_32	= 1437,
    RLDICL_32_64	= 1438,
    RLDICL_32o	= 1439,
    RLDICLo	= 1440,
    RLDICR	= 1441,
    RLDICR_32	= 1442,
    RLDICRo	= 1443,
    RLDICo	= 1444,
    RLDIMI	= 1445,
    RLDIMIo	= 1446,
    RLWIMI	= 1447,
    RLWIMI8	= 1448,
    RLWIMI8o	= 1449,
    RLWIMIo	= 1450,
    RLWINM	= 1451,
    RLWINM8	= 1452,
    RLWINM8o	= 1453,
    RLWINMo	= 1454,
    RLWNM	= 1455,
    RLWNM8	= 1456,
    RLWNM8o	= 1457,
    RLWNMo	= 1458,
    ReadTB	= 1459,
    SC	= 1460,
    SELECT_CC_F16	= 1461,
    SELECT_CC_F4	= 1462,
    SELECT_CC_F8	= 1463,
    SELECT_CC_I4	= 1464,
    SELECT_CC_I8	= 1465,
    SELECT_CC_QBRC	= 1466,
    SELECT_CC_QFRC	= 1467,
    SELECT_CC_QSRC	= 1468,
    SELECT_CC_SPE	= 1469,
    SELECT_CC_SPE4	= 1470,
    SELECT_CC_VRRC	= 1471,
    SELECT_CC_VSFRC	= 1472,
    SELECT_CC_VSRC	= 1473,
    SELECT_CC_VSSRC	= 1474,
    SELECT_F16	= 1475,
    SELECT_F4	= 1476,
    SELECT_F8	= 1477,
    SELECT_I4	= 1478,
    SELECT_I8	= 1479,
    SELECT_QBRC	= 1480,
    SELECT_QFRC	= 1481,
    SELECT_QSRC	= 1482,
    SELECT_SPE	= 1483,
    SELECT_SPE4	= 1484,
    SELECT_VRRC	= 1485,
    SELECT_VSFRC	= 1486,
    SELECT_VSRC	= 1487,
    SELECT_VSSRC	= 1488,
    SETB	= 1489,
    SETB8	= 1490,
    SETRND	= 1491,
    SETRNDi	= 1492,
    SLBFEEo	= 1493,
    SLBIA	= 1494,
    SLBIE	= 1495,
    SLBIEG	= 1496,
    SLBMFEE	= 1497,
    SLBMFEV	= 1498,
    SLBMTE	= 1499,
    SLBSYNC	= 1500,
    SLD	= 1501,
    SLDo	= 1502,
    SLW	= 1503,
    SLW8	= 1504,
    SLW8o	= 1505,
    SLWo	= 1506,
    SPELWZ	= 1507,
    SPELWZX	= 1508,
    SPESTW	= 1509,
    SPESTWX	= 1510,
    SPILL_CR	= 1511,
    SPILL_CRBIT	= 1512,
    SPILL_VRSAVE	= 1513,
    SRAD	= 1514,
    SRADI	= 1515,
    SRADI_32	= 1516,
    SRADIo	= 1517,
    SRADo	= 1518,
    SRAW	= 1519,
    SRAWI	= 1520,
    SRAWIo	= 1521,
    SRAWo	= 1522,
    SRD	= 1523,
    SRDo	= 1524,
    SRW	= 1525,
    SRW8	= 1526,
    SRW8o	= 1527,
    SRWo	= 1528,
    STB	= 1529,
    STB8	= 1530,
    STBCIX	= 1531,
    STBCX	= 1532,
    STBEPX	= 1533,
    STBU	= 1534,
    STBU8	= 1535,
    STBUX	= 1536,
    STBUX8	= 1537,
    STBX	= 1538,
    STBX8	= 1539,
    STBXTLS	= 1540,
    STBXTLS_	= 1541,
    STBXTLS_32	= 1542,
    STD	= 1543,
    STDAT	= 1544,
    STDBRX	= 1545,
    STDCIX	= 1546,
    STDCX	= 1547,
    STDU	= 1548,
    STDUX	= 1549,
    STDX	= 1550,
    STDXTLS	= 1551,
    STDXTLS_	= 1552,
    STFD	= 1553,
    STFDEPX	= 1554,
    STFDU	= 1555,
    STFDUX	= 1556,
    STFDX	= 1557,
    STFIWX	= 1558,
    STFS	= 1559,
    STFSU	= 1560,
    STFSUX	= 1561,
    STFSX	= 1562,
    STH	= 1563,
    STH8	= 1564,
    STHBRX	= 1565,
    STHCIX	= 1566,
    STHCX	= 1567,
    STHEPX	= 1568,
    STHU	= 1569,
    STHU8	= 1570,
    STHUX	= 1571,
    STHUX8	= 1572,
    STHX	= 1573,
    STHX8	= 1574,
    STHXTLS	= 1575,
    STHXTLS_	= 1576,
    STHXTLS_32	= 1577,
    STMW	= 1578,
    STOP	= 1579,
    STSWI	= 1580,
    STVEBX	= 1581,
    STVEHX	= 1582,
    STVEWX	= 1583,
    STVX	= 1584,
    STVXL	= 1585,
    STW	= 1586,
    STW8	= 1587,
    STWAT	= 1588,
    STWBRX	= 1589,
    STWCIX	= 1590,
    STWCX	= 1591,
    STWEPX	= 1592,
    STWU	= 1593,
    STWU8	= 1594,
    STWUX	= 1595,
    STWUX8	= 1596,
    STWX	= 1597,
    STWX8	= 1598,
    STWXTLS	= 1599,
    STWXTLS_	= 1600,
    STWXTLS_32	= 1601,
    STXSD	= 1602,
    STXSDX	= 1603,
    STXSIBX	= 1604,
    STXSIBXv	= 1605,
    STXSIHX	= 1606,
    STXSIHXv	= 1607,
    STXSIWX	= 1608,
    STXSSP	= 1609,
    STXSSPX	= 1610,
    STXV	= 1611,
    STXVB16X	= 1612,
    STXVD2X	= 1613,
    STXVH8X	= 1614,
    STXVL	= 1615,
    STXVLL	= 1616,
    STXVW4X	= 1617,
    STXVX	= 1618,
    SUBF	= 1619,
    SUBF8	= 1620,
    SUBF8O	= 1621,
    SUBF8Oo	= 1622,
    SUBF8o	= 1623,
    SUBFC	= 1624,
    SUBFC8	= 1625,
    SUBFC8O	= 1626,
    SUBFC8Oo	= 1627,
    SUBFC8o	= 1628,
    SUBFCO	= 1629,
    SUBFCOo	= 1630,
    SUBFCo	= 1631,
    SUBFE	= 1632,
    SUBFE8	= 1633,
    SUBFE8O	= 1634,
    SUBFE8Oo	= 1635,
    SUBFE8o	= 1636,
    SUBFEO	= 1637,
    SUBFEOo	= 1638,
    SUBFEo	= 1639,
    SUBFIC	= 1640,
    SUBFIC8	= 1641,
    SUBFME	= 1642,
    SUBFME8	= 1643,
    SUBFME8O	= 1644,
    SUBFME8Oo	= 1645,
    SUBFME8o	= 1646,
    SUBFMEO	= 1647,
    SUBFMEOo	= 1648,
    SUBFMEo	= 1649,
    SUBFO	= 1650,
    SUBFOo	= 1651,
    SUBFZE	= 1652,
    SUBFZE8	= 1653,
    SUBFZE8O	= 1654,
    SUBFZE8Oo	= 1655,
    SUBFZE8o	= 1656,
    SUBFZEO	= 1657,
    SUBFZEOo	= 1658,
    SUBFZEo	= 1659,
    SUBFo	= 1660,
    SYNC	= 1661,
    TABORT	= 1662,
    TABORTDC	= 1663,
    TABORTDCI	= 1664,
    TABORTWC	= 1665,
    TABORTWCI	= 1666,
    TAILB	= 1667,
    TAILB8	= 1668,
    TAILBA	= 1669,
    TAILBA8	= 1670,
    TAILBCTR	= 1671,
    TAILBCTR8	= 1672,
    TBEGIN	= 1673,
    TBEGIN_RET	= 1674,
    TCHECK	= 1675,
    TCHECK_RET	= 1676,
    TCRETURNai	= 1677,
    TCRETURNai8	= 1678,
    TCRETURNdi	= 1679,
    TCRETURNdi8	= 1680,
    TCRETURNri	= 1681,
    TCRETURNri8	= 1682,
    TD	= 1683,
    TDI	= 1684,
    TEND	= 1685,
    TLBIA	= 1686,
    TLBIE	= 1687,
    TLBIEL	= 1688,
    TLBIVAX	= 1689,
    TLBLD	= 1690,
    TLBLI	= 1691,
    TLBRE	= 1692,
    TLBRE2	= 1693,
    TLBSX	= 1694,
    TLBSX2	= 1695,
    TLBSX2D	= 1696,
    TLBSYNC	= 1697,
    TLBWE	= 1698,
    TLBWE2	= 1699,
    TRAP	= 1700,
    TRECHKPT	= 1701,
    TRECLAIM	= 1702,
    TSR	= 1703,
    TW	= 1704,
    TWI	= 1705,
    UPDATE_VRSAVE	= 1706,
    UpdateGBR	= 1707,
    VABSDUB	= 1708,
    VABSDUH	= 1709,
    VABSDUW	= 1710,
    VADDCUQ	= 1711,
    VADDCUW	= 1712,
    VADDECUQ	= 1713,
    VADDEUQM	= 1714,
    VADDFP	= 1715,
    VADDSBS	= 1716,
    VADDSHS	= 1717,
    VADDSWS	= 1718,
    VADDUBM	= 1719,
    VADDUBS	= 1720,
    VADDUDM	= 1721,
    VADDUHM	= 1722,
    VADDUHS	= 1723,
    VADDUQM	= 1724,
    VADDUWM	= 1725,
    VADDUWS	= 1726,
    VAND	= 1727,
    VANDC	= 1728,
    VAVGSB	= 1729,
    VAVGSH	= 1730,
    VAVGSW	= 1731,
    VAVGUB	= 1732,
    VAVGUH	= 1733,
    VAVGUW	= 1734,
    VBPERMD	= 1735,
    VBPERMQ	= 1736,
    VCFSX	= 1737,
    VCFSX_0	= 1738,
    VCFUX	= 1739,
    VCFUX_0	= 1740,
    VCIPHER	= 1741,
    VCIPHERLAST	= 1742,
    VCLZB	= 1743,
    VCLZD	= 1744,
    VCLZH	= 1745,
    VCLZLSBB	= 1746,
    VCLZW	= 1747,
    VCMPBFP	= 1748,
    VCMPBFPo	= 1749,
    VCMPEQFP	= 1750,
    VCMPEQFPo	= 1751,
    VCMPEQUB	= 1752,
    VCMPEQUBo	= 1753,
    VCMPEQUD	= 1754,
    VCMPEQUDo	= 1755,
    VCMPEQUH	= 1756,
    VCMPEQUHo	= 1757,
    VCMPEQUW	= 1758,
    VCMPEQUWo	= 1759,
    VCMPGEFP	= 1760,
    VCMPGEFPo	= 1761,
    VCMPGTFP	= 1762,
    VCMPGTFPo	= 1763,
    VCMPGTSB	= 1764,
    VCMPGTSBo	= 1765,
    VCMPGTSD	= 1766,
    VCMPGTSDo	= 1767,
    VCMPGTSH	= 1768,
    VCMPGTSHo	= 1769,
    VCMPGTSW	= 1770,
    VCMPGTSWo	= 1771,
    VCMPGTUB	= 1772,
    VCMPGTUBo	= 1773,
    VCMPGTUD	= 1774,
    VCMPGTUDo	= 1775,
    VCMPGTUH	= 1776,
    VCMPGTUHo	= 1777,
    VCMPGTUW	= 1778,
    VCMPGTUWo	= 1779,
    VCMPNEB	= 1780,
    VCMPNEBo	= 1781,
    VCMPNEH	= 1782,
    VCMPNEHo	= 1783,
    VCMPNEW	= 1784,
    VCMPNEWo	= 1785,
    VCMPNEZB	= 1786,
    VCMPNEZBo	= 1787,
    VCMPNEZH	= 1788,
    VCMPNEZHo	= 1789,
    VCMPNEZW	= 1790,
    VCMPNEZWo	= 1791,
    VCTSXS	= 1792,
    VCTSXS_0	= 1793,
    VCTUXS	= 1794,
    VCTUXS_0	= 1795,
    VCTZB	= 1796,
    VCTZD	= 1797,
    VCTZH	= 1798,
    VCTZLSBB	= 1799,
    VCTZW	= 1800,
    VEQV	= 1801,
    VEXPTEFP	= 1802,
    VEXTRACTD	= 1803,
    VEXTRACTUB	= 1804,
    VEXTRACTUH	= 1805,
    VEXTRACTUW	= 1806,
    VEXTSB2D	= 1807,
    VEXTSB2Ds	= 1808,
    VEXTSB2W	= 1809,
    VEXTSB2Ws	= 1810,
    VEXTSH2D	= 1811,
    VEXTSH2Ds	= 1812,
    VEXTSH2W	= 1813,
    VEXTSH2Ws	= 1814,
    VEXTSW2D	= 1815,
    VEXTSW2Ds	= 1816,
    VEXTUBLX	= 1817,
    VEXTUBRX	= 1818,
    VEXTUHLX	= 1819,
    VEXTUHRX	= 1820,
    VEXTUWLX	= 1821,
    VEXTUWRX	= 1822,
    VGBBD	= 1823,
    VINSERTB	= 1824,
    VINSERTD	= 1825,
    VINSERTH	= 1826,
    VINSERTW	= 1827,
    VLOGEFP	= 1828,
    VMADDFP	= 1829,
    VMAXFP	= 1830,
    VMAXSB	= 1831,
    VMAXSD	= 1832,
    VMAXSH	= 1833,
    VMAXSW	= 1834,
    VMAXUB	= 1835,
    VMAXUD	= 1836,
    VMAXUH	= 1837,
    VMAXUW	= 1838,
    VMHADDSHS	= 1839,
    VMHRADDSHS	= 1840,
    VMINFP	= 1841,
    VMINSB	= 1842,
    VMINSD	= 1843,
    VMINSH	= 1844,
    VMINSW	= 1845,
    VMINUB	= 1846,
    VMINUD	= 1847,
    VMINUH	= 1848,
    VMINUW	= 1849,
    VMLADDUHM	= 1850,
    VMRGEW	= 1851,
    VMRGHB	= 1852,
    VMRGHH	= 1853,
    VMRGHW	= 1854,
    VMRGLB	= 1855,
    VMRGLH	= 1856,
    VMRGLW	= 1857,
    VMRGOW	= 1858,
    VMSUMMBM	= 1859,
    VMSUMSHM	= 1860,
    VMSUMSHS	= 1861,
    VMSUMUBM	= 1862,
    VMSUMUHM	= 1863,
    VMSUMUHS	= 1864,
    VMUL10CUQ	= 1865,
    VMUL10ECUQ	= 1866,
    VMUL10EUQ	= 1867,
    VMUL10UQ	= 1868,
    VMULESB	= 1869,
    VMULESH	= 1870,
    VMULESW	= 1871,
    VMULEUB	= 1872,
    VMULEUH	= 1873,
    VMULEUW	= 1874,
    VMULOSB	= 1875,
    VMULOSH	= 1876,
    VMULOSW	= 1877,
    VMULOUB	= 1878,
    VMULOUH	= 1879,
    VMULOUW	= 1880,
    VMULUWM	= 1881,
    VNAND	= 1882,
    VNCIPHER	= 1883,
    VNCIPHERLAST	= 1884,
    VNEGD	= 1885,
    VNEGW	= 1886,
    VNMSUBFP	= 1887,
    VNOR	= 1888,
    VOR	= 1889,
    VORC	= 1890,
    VPERM	= 1891,
    VPERMR	= 1892,
    VPERMXOR	= 1893,
    VPKPX	= 1894,
    VPKSDSS	= 1895,
    VPKSDUS	= 1896,
    VPKSHSS	= 1897,
    VPKSHUS	= 1898,
    VPKSWSS	= 1899,
    VPKSWUS	= 1900,
    VPKUDUM	= 1901,
    VPKUDUS	= 1902,
    VPKUHUM	= 1903,
    VPKUHUS	= 1904,
    VPKUWUM	= 1905,
    VPKUWUS	= 1906,
    VPMSUMB	= 1907,
    VPMSUMD	= 1908,
    VPMSUMH	= 1909,
    VPMSUMW	= 1910,
    VPOPCNTB	= 1911,
    VPOPCNTD	= 1912,
    VPOPCNTH	= 1913,
    VPOPCNTW	= 1914,
    VPRTYBD	= 1915,
    VPRTYBQ	= 1916,
    VPRTYBW	= 1917,
    VREFP	= 1918,
    VRFIM	= 1919,
    VRFIN	= 1920,
    VRFIP	= 1921,
    VRFIZ	= 1922,
    VRLB	= 1923,
    VRLD	= 1924,
    VRLDMI	= 1925,
    VRLDNM	= 1926,
    VRLH	= 1927,
    VRLW	= 1928,
    VRLWMI	= 1929,
    VRLWNM	= 1930,
    VRSQRTEFP	= 1931,
    VSBOX	= 1932,
    VSEL	= 1933,
    VSHASIGMAD	= 1934,
    VSHASIGMAW	= 1935,
    VSL	= 1936,
    VSLB	= 1937,
    VSLD	= 1938,
    VSLDOI	= 1939,
    VSLH	= 1940,
    VSLO	= 1941,
    VSLV	= 1942,
    VSLW	= 1943,
    VSPLTB	= 1944,
    VSPLTBs	= 1945,
    VSPLTH	= 1946,
    VSPLTHs	= 1947,
    VSPLTISB	= 1948,
    VSPLTISH	= 1949,
    VSPLTISW	= 1950,
    VSPLTW	= 1951,
    VSR	= 1952,
    VSRAB	= 1953,
    VSRAD	= 1954,
    VSRAH	= 1955,
    VSRAW	= 1956,
    VSRB	= 1957,
    VSRD	= 1958,
    VSRH	= 1959,
    VSRO	= 1960,
    VSRV	= 1961,
    VSRW	= 1962,
    VSUBCUQ	= 1963,
    VSUBCUW	= 1964,
    VSUBECUQ	= 1965,
    VSUBEUQM	= 1966,
    VSUBFP	= 1967,
    VSUBSBS	= 1968,
    VSUBSHS	= 1969,
    VSUBSWS	= 1970,
    VSUBUBM	= 1971,
    VSUBUBS	= 1972,
    VSUBUDM	= 1973,
    VSUBUHM	= 1974,
    VSUBUHS	= 1975,
    VSUBUQM	= 1976,
    VSUBUWM	= 1977,
    VSUBUWS	= 1978,
    VSUM2SWS	= 1979,
    VSUM4SBS	= 1980,
    VSUM4SHS	= 1981,
    VSUM4UBS	= 1982,
    VSUMSWS	= 1983,
    VUPKHPX	= 1984,
    VUPKHSB	= 1985,
    VUPKHSH	= 1986,
    VUPKHSW	= 1987,
    VUPKLPX	= 1988,
    VUPKLSB	= 1989,
    VUPKLSH	= 1990,
    VUPKLSW	= 1991,
    VXOR	= 1992,
    V_SET0	= 1993,
    V_SET0B	= 1994,
    V_SET0H	= 1995,
    V_SETALLONES	= 1996,
    V_SETALLONESB	= 1997,
    V_SETALLONESH	= 1998,
    WAIT	= 1999,
    WRTEE	= 2000,
    WRTEEI	= 2001,
    XOR	= 2002,
    XOR8	= 2003,
    XOR8o	= 2004,
    XORI	= 2005,
    XORI8	= 2006,
    XORIS	= 2007,
    XORIS8	= 2008,
    XORo	= 2009,
    XSABSDP	= 2010,
    XSABSQP	= 2011,
    XSADDDP	= 2012,
    XSADDQP	= 2013,
    XSADDQPO	= 2014,
    XSADDSP	= 2015,
    XSCMPEQDP	= 2016,
    XSCMPEXPDP	= 2017,
    XSCMPEXPQP	= 2018,
    XSCMPGEDP	= 2019,
    XSCMPGTDP	= 2020,
    XSCMPODP	= 2021,
    XSCMPOQP	= 2022,
    XSCMPUDP	= 2023,
    XSCMPUQP	= 2024,
    XSCPSGNDP	= 2025,
    XSCPSGNQP	= 2026,
    XSCVDPHP	= 2027,
    XSCVDPQP	= 2028,
    XSCVDPSP	= 2029,
    XSCVDPSPN	= 2030,
    XSCVDPSXDS	= 2031,
    XSCVDPSXDSs	= 2032,
    XSCVDPSXWS	= 2033,
    XSCVDPSXWSs	= 2034,
    XSCVDPUXDS	= 2035,
    XSCVDPUXDSs	= 2036,
    XSCVDPUXWS	= 2037,
    XSCVDPUXWSs	= 2038,
    XSCVHPDP	= 2039,
    XSCVQPDP	= 2040,
    XSCVQPDPO	= 2041,
    XSCVQPSDZ	= 2042,
    XSCVQPSWZ	= 2043,
    XSCVQPUDZ	= 2044,
    XSCVQPUWZ	= 2045,
    XSCVSDQP	= 2046,
    XSCVSPDP	= 2047,
    XSCVSPDPN	= 2048,
    XSCVSXDDP	= 2049,
    XSCVSXDSP	= 2050,
    XSCVUDQP	= 2051,
    XSCVUXDDP	= 2052,
    XSCVUXDSP	= 2053,
    XSDIVDP	= 2054,
    XSDIVQP	= 2055,
    XSDIVQPO	= 2056,
    XSDIVSP	= 2057,
    XSIEXPDP	= 2058,
    XSIEXPQP	= 2059,
    XSMADDADP	= 2060,
    XSMADDASP	= 2061,
    XSMADDMDP	= 2062,
    XSMADDMSP	= 2063,
    XSMADDQP	= 2064,
    XSMADDQPO	= 2065,
    XSMAXCDP	= 2066,
    XSMAXDP	= 2067,
    XSMAXJDP	= 2068,
    XSMINCDP	= 2069,
    XSMINDP	= 2070,
    XSMINJDP	= 2071,
    XSMSUBADP	= 2072,
    XSMSUBASP	= 2073,
    XSMSUBMDP	= 2074,
    XSMSUBMSP	= 2075,
    XSMSUBQP	= 2076,
    XSMSUBQPO	= 2077,
    XSMULDP	= 2078,
    XSMULQP	= 2079,
    XSMULQPO	= 2080,
    XSMULSP	= 2081,
    XSNABSDP	= 2082,
    XSNABSQP	= 2083,
    XSNEGDP	= 2084,
    XSNEGQP	= 2085,
    XSNMADDADP	= 2086,
    XSNMADDASP	= 2087,
    XSNMADDMDP	= 2088,
    XSNMADDMSP	= 2089,
    XSNMADDQP	= 2090,
    XSNMADDQPO	= 2091,
    XSNMSUBADP	= 2092,
    XSNMSUBASP	= 2093,
    XSNMSUBMDP	= 2094,
    XSNMSUBMSP	= 2095,
    XSNMSUBQP	= 2096,
    XSNMSUBQPO	= 2097,
    XSRDPI	= 2098,
    XSRDPIC	= 2099,
    XSRDPIM	= 2100,
    XSRDPIP	= 2101,
    XSRDPIZ	= 2102,
    XSREDP	= 2103,
    XSRESP	= 2104,
    XSRQPI	= 2105,
    XSRQPIX	= 2106,
    XSRQPXP	= 2107,
    XSRSP	= 2108,
    XSRSQRTEDP	= 2109,
    XSRSQRTESP	= 2110,
    XSSQRTDP	= 2111,
    XSSQRTQP	= 2112,
    XSSQRTQPO	= 2113,
    XSSQRTSP	= 2114,
    XSSUBDP	= 2115,
    XSSUBQP	= 2116,
    XSSUBQPO	= 2117,
    XSSUBSP	= 2118,
    XSTDIVDP	= 2119,
    XSTSQRTDP	= 2120,
    XSTSTDCDP	= 2121,
    XSTSTDCQP	= 2122,
    XSTSTDCSP	= 2123,
    XSXEXPDP	= 2124,
    XSXEXPQP	= 2125,
    XSXSIGDP	= 2126,
    XSXSIGQP	= 2127,
    XVABSDP	= 2128,
    XVABSSP	= 2129,
    XVADDDP	= 2130,
    XVADDSP	= 2131,
    XVCMPEQDP	= 2132,
    XVCMPEQDPo	= 2133,
    XVCMPEQSP	= 2134,
    XVCMPEQSPo	= 2135,
    XVCMPGEDP	= 2136,
    XVCMPGEDPo	= 2137,
    XVCMPGESP	= 2138,
    XVCMPGESPo	= 2139,
    XVCMPGTDP	= 2140,
    XVCMPGTDPo	= 2141,
    XVCMPGTSP	= 2142,
    XVCMPGTSPo	= 2143,
    XVCPSGNDP	= 2144,
    XVCPSGNSP	= 2145,
    XVCVDPSP	= 2146,
    XVCVDPSXDS	= 2147,
    XVCVDPSXWS	= 2148,
    XVCVDPUXDS	= 2149,
    XVCVDPUXWS	= 2150,
    XVCVHPSP	= 2151,
    XVCVSPDP	= 2152,
    XVCVSPHP	= 2153,
    XVCVSPSXDS	= 2154,
    XVCVSPSXWS	= 2155,
    XVCVSPUXDS	= 2156,
    XVCVSPUXWS	= 2157,
    XVCVSXDDP	= 2158,
    XVCVSXDSP	= 2159,
    XVCVSXWDP	= 2160,
    XVCVSXWSP	= 2161,
    XVCVUXDDP	= 2162,
    XVCVUXDSP	= 2163,
    XVCVUXWDP	= 2164,
    XVCVUXWSP	= 2165,
    XVDIVDP	= 2166,
    XVDIVSP	= 2167,
    XVIEXPDP	= 2168,
    XVIEXPSP	= 2169,
    XVMADDADP	= 2170,
    XVMADDASP	= 2171,
    XVMADDMDP	= 2172,
    XVMADDMSP	= 2173,
    XVMAXDP	= 2174,
    XVMAXSP	= 2175,
    XVMINDP	= 2176,
    XVMINSP	= 2177,
    XVMSUBADP	= 2178,
    XVMSUBASP	= 2179,
    XVMSUBMDP	= 2180,
    XVMSUBMSP	= 2181,
    XVMULDP	= 2182,
    XVMULSP	= 2183,
    XVNABSDP	= 2184,
    XVNABSSP	= 2185,
    XVNEGDP	= 2186,
    XVNEGSP	= 2187,
    XVNMADDADP	= 2188,
    XVNMADDASP	= 2189,
    XVNMADDMDP	= 2190,
    XVNMADDMSP	= 2191,
    XVNMSUBADP	= 2192,
    XVNMSUBASP	= 2193,
    XVNMSUBMDP	= 2194,
    XVNMSUBMSP	= 2195,
    XVRDPI	= 2196,
    XVRDPIC	= 2197,
    XVRDPIM	= 2198,
    XVRDPIP	= 2199,
    XVRDPIZ	= 2200,
    XVREDP	= 2201,
    XVRESP	= 2202,
    XVRSPI	= 2203,
    XVRSPIC	= 2204,
    XVRSPIM	= 2205,
    XVRSPIP	= 2206,
    XVRSPIZ	= 2207,
    XVRSQRTEDP	= 2208,
    XVRSQRTESP	= 2209,
    XVSQRTDP	= 2210,
    XVSQRTSP	= 2211,
    XVSUBDP	= 2212,
    XVSUBSP	= 2213,
    XVTDIVDP	= 2214,
    XVTDIVSP	= 2215,
    XVTSQRTDP	= 2216,
    XVTSQRTSP	= 2217,
    XVTSTDCDP	= 2218,
    XVTSTDCSP	= 2219,
    XVXEXPDP	= 2220,
    XVXEXPSP	= 2221,
    XVXSIGDP	= 2222,
    XVXSIGSP	= 2223,
    XXBRD	= 2224,
    XXBRH	= 2225,
    XXBRQ	= 2226,
    XXBRW	= 2227,
    XXEXTRACTUW	= 2228,
    XXINSERTW	= 2229,
    XXLAND	= 2230,
    XXLANDC	= 2231,
    XXLEQV	= 2232,
    XXLNAND	= 2233,
    XXLNOR	= 2234,
    XXLOR	= 2235,
    XXLORC	= 2236,
    XXLORf	= 2237,
    XXLXOR	= 2238,
    XXLXORdpz	= 2239,
    XXLXORspz	= 2240,
    XXLXORz	= 2241,
    XXMRGHW	= 2242,
    XXMRGLW	= 2243,
    XXPERM	= 2244,
    XXPERMDI	= 2245,
    XXPERMDIs	= 2246,
    XXPERMR	= 2247,
    XXSEL	= 2248,
    XXSLDWI	= 2249,
    XXSLDWIs	= 2250,
    XXSPLTIB	= 2251,
    XXSPLTW	= 2252,
    XXSPLTWs	= 2253,
    gBC	= 2254,
    gBCA	= 2255,
    gBCAat	= 2256,
    gBCCTR	= 2257,
    gBCCTRL	= 2258,
    gBCL	= 2259,
    gBCLA	= 2260,
    gBCLAat	= 2261,
    gBCLR	= 2262,
    gBCLRL	= 2263,
    gBCLat	= 2264,
    gBCat	= 2265,
    INSTRUCTION_LIST_END = 2266
  };

} // end PPC namespace
} // end llvm namespace
#endif // GET_INSTRINFO_ENUM

#ifdef GET_INSTRINFO_SCHED_ENUM
#undef GET_INSTRINFO_SCHED_ENUM
namespace llvm {

namespace PPC {
namespace Sched {
  enum {
    NoInstrModel	= 0,
    IIC_LdStSync	= 1,
    IIC_IntSimple	= 2,
    IIC_IntGeneral	= 3,
    IIC_BrB	= 4,
    IIC_VecFP	= 5,
    IIC_IntCompare	= 6,
    IIC_SprABORT	= 7,
    IIC_LdStCOPY	= 8,
    IIC_LdStPASTE	= 9,
    IIC_BrCR	= 10,
    IIC_LdStLD	= 11,
    IIC_LdStDCBF	= 12,
    IIC_LdStLoad	= 13,
    IIC_IntDivD	= 14,
    IIC_IntDivW	= 15,
    IIC_FPDGeneral	= 16,
    IIC_FPAddSub	= 17,
    IIC_FPDivD	= 18,
    IIC_FPSGeneral	= 19,
    IIC_FPCompare	= 20,
    IIC_FPGeneral	= 21,
    IIC_VecGeneral	= 22,
    IIC_VecComplex	= 23,
    IIC_LdStStore	= 24,
    IIC_IntRotateDI	= 25,
    IIC_FPDivS	= 26,
    IIC_FPFused	= 27,
    IIC_FPSqrtD	= 28,
    IIC_FPSqrtS	= 29,
    IIC_LdStICBI	= 30,
    IIC_IntISEL	= 31,
    IIC_SprISYNC	= 32,
    IIC_LdStLWARX	= 33,
    IIC_LdStLoadUpd	= 34,
    IIC_LdStLoadUpdX	= 35,
    IIC_LdStLDARX	= 36,
    IIC_LdStLDU	= 37,
    IIC_LdStLDUX	= 38,
    IIC_LdStLFD	= 39,
    IIC_LdStLFDU	= 40,
    IIC_LdStLFDUX	= 41,
    IIC_LdStLHA	= 42,
    IIC_LdStLHAU	= 43,
    IIC_LdStLHAUX	= 44,
    IIC_LdStLMW	= 45,
    IIC_LdStLWA	= 46,
    IIC_IntMulHD	= 47,
    IIC_BrMCR	= 48,
    IIC_BrMCRX	= 49,
    IIC_SprMFCR	= 50,
    IIC_SprMFSPR	= 51,
    IIC_IntMFFS	= 52,
    IIC_SprMFMSR	= 53,
    IIC_SprMFCRF	= 54,
    IIC_SprMFPMR	= 55,
    IIC_SprMFSR	= 56,
    IIC_SprMFTB	= 57,
    IIC_SprMSGSYNC	= 58,
    IIC_SprMTSPR	= 59,
    IIC_IntMTFSB0	= 60,
    IIC_SprMTMSR	= 61,
    IIC_SprMTMSRD	= 62,
    IIC_SprMTPMR	= 63,
    IIC_SprMTSR	= 64,
    IIC_IntMulHW	= 65,
    IIC_IntMulHWU	= 66,
    IIC_IntMulLI	= 67,
    IIC_VecPerm	= 68,
    IIC_LdStSTFD	= 69,
    IIC_LdStSTFDU	= 70,
    IIC_SprRFI	= 71,
    IIC_IntRFID	= 72,
    IIC_IntRotateD	= 73,
    IIC_IntRotate	= 74,
    IIC_SprSLBFEE	= 75,
    IIC_SprSLBIA	= 76,
    IIC_SprSLBIE	= 77,
    IIC_SprSLBIEG	= 78,
    IIC_SprSLBMFEE	= 79,
    IIC_SprSLBMFEV	= 80,
    IIC_SprSLBMTE	= 81,
    IIC_SprSLBSYNC	= 82,
    IIC_IntShift	= 83,
    IIC_LdStSTWCX	= 84,
    IIC_LdStSTU	= 85,
    IIC_LdStSTUX	= 86,
    IIC_LdStSTD	= 87,
    IIC_LdStSTDCX	= 88,
    IIC_SprSTOP	= 89,
    IIC_IntTrapD	= 90,
    IIC_SprTLBIA	= 91,
    IIC_SprTLBIE	= 92,
    IIC_SprTLBIEL	= 93,
    IIC_SprTLBSYNC	= 94,
    IIC_IntTrapW	= 95,
    IIC_VecFPCompare	= 96,
    VADDUBM_VADDUDM_VADDUHM_VADDUWM_VEXTSB2D_VEXTSB2Ds_VEXTSB2W_VEXTSB2Ws_VEXTSH2D_VEXTSH2Ds_VEXTSH2W_VEXTSH2Ws_VEXTSW2D_VEXTSW2Ds_VSLD_VSRD_VSUBUBM_VSUBUDM_VSUBUHM_VSUBUWM_VPOPCNTB_VPOPCNTH_VSRAD_MTVSRDD_VEQV_VNAND_VNEGD_VNEGW_VORC_XXLAND_XXLANDC_XXLEQV_XXLNAND_XXLNOR_XXLOR_XXLORf_XXLORC_XXLXOR_XXLXORdpz_XXLXORspz_XXLXORz	= 97,
    VAND_VANDC_V_SET0_V_SET0B_V_SET0H_VSLB_VSLH_VSLW_VSRB_VSRH_VSRW_VRLB_VRLD_VRLH_VRLW_VSRAB_VSRAH_VSRAW_XVABSDP_XVABSSP_XVNABSDP_XVNABSSP_XVCPSGNDP_XVCPSGNSP_XVIEXPDP_XVIEXPSP_XVXEXPDP_XVXEXPSP_VRLDMI_VRLDNM_VRLWMI_VRLWNM_VMRGEW_VMRGOW_VNOR_VOR_VSEL_VXOR_XVNEGDP_XVNEGSP_XSABSQP_XSCPSGNQP_XSIEXPQP_XSNABSQP_XSNEGQP_XSXEXPQP	= 98,
    XXSEL	= 99,
    TABORTDC_TABORTDCI_TABORTWC_TABORTWCI	= 100,
    MTFSB0_MTFSB1	= 101,
    MFFSCDRN_MFFSCDRNI_MFFSCRN_MFFSCRNI	= 102,
    CMPRB_CMPRB8_CMPEQB	= 103,
    TD_TDI	= 104,
    TW_TWI	= 105,
    FCMPUD_FCMPUS_FTDIV_FTSQRT	= 106,
    XSTSTDCDP_XSTSTDCSP	= 107,
    XSMAXCDP_XSMAXDP_XSMAXJDP_XSMINCDP_XSMINDP_XSMINJDP_XSXSIGDP_XSCVSPDPN	= 108,
    XSCMPEQDP_XSCMPEXPDP_XSCMPGEDP_XSCMPGTDP_XSCMPODP_XSCMPUDP_XSTDIVDP_XSTSQRTDP	= 109,
    CNTLZD_CNTLZDo_CNTLZW_CNTLZW8_CNTLZW8o_CNTLZWo_CNTTZD_CNTTZDo_CNTTZW_CNTTZW8_CNTTZW8o_CNTTZWo_POPCNTD_POPCNTW_CMPB_CMPB8_SETB_SETB8_BPERMD	= 110,
    SLD_SRD_SRAD	= 111,
    SRADI_EXTSWSLI_32_64_EXTSWSLI_SRADI_32_RLDIC	= 112,
    MFVRD_MFVSRD_MTVSRD_MTVSRWA_MTVSRWZ_MFVSRWZ	= 113,
    CMPLW_CMPLWI_CMPW_CMPWI_CMPD_CMPDI_CMPLD_CMPLDI	= 114,
    SUBFC_SUBFC8_SUBFC8O_SUBFCO_SUBFIC_SUBFIC8_ANDISo_ANDISo8_ANDIo_ANDIo8_ADDC_ADDC8_ADDC8O_ADDCO_ADDIC_ADDIC8_ADDICo_ADDE_ADDE8_ADDE8O_ADDE8Oo_ADDE8o_ADDEO_ADDEOo_ADDEo_ADDME_ADDME8_ADDME8O_ADDME8Oo_ADDME8o_ADDMEO_ADDMEOo_ADDMEo_ADDZE_ADDZE8_ADDZE8O_ADDZE8Oo_ADDZE8o_ADDZEO_ADDZEOo_ADDZEo_SUBF_SUBF8_SUBF8O_SUBF8Oo_SUBF8o_SUBFE_SUBFE8_SUBFE8O_SUBFE8Oo_SUBFE8o_SUBFEO_SUBFEOo_SUBFEo_SUBFME_SUBFME8_SUBFME8O_SUBFME8Oo_SUBFME8o_SUBFMEO_SUBFMEOo_SUBFMEo_SUBFO_SUBFOo_SUBFZE_SUBFZE8_SUBFZE8O_SUBFZE8Oo_SUBFZE8o_SUBFZEO_SUBFZEOo_SUBFZEo_SUBFo_POPCNTB_LA	= 115,
    ADD4_ADD4O_ADD4Oo_ADD4o_ADD8_ADD8O_ADD8Oo_ADD8o_NEG_NEG8_NEG8O_NEG8Oo_NEG8o_NEGO_NEGOo_NEGo_ADDI_ADDI8_ADDIS_ADDIS8_LI_LI8_LIS_LIS8_OR_OR8_OR8o_ORI_ORI8_ORIS_ORIS8_ORo_XOR_XOR8_XOR8o_XORI_XORI8_XORIS_XORIS8_XORo_NAND_NAND8_NAND8o_NANDo_AND_AND8_AND8o_ANDC_ANDC8_ANDC8o_ANDCo_ANDo_NOR_NOR8_NOR8o_NORo_ORC_ORC8_ORC8o_ORCo_EQV_EQV8_EQV8o_EQVo_EXTSB_EXTSB8_EXTSB8_32_64_EXTSB8o_EXTSBo_EXTSH_EXTSH8_EXTSH8_32_64_EXTSH8o_EXTSHo_EXTSW_EXTSW_32_EXTSW_32_64_EXTSW_32_64o_EXTSWo_ADD4TLS_ADD8TLS_ADD8TLS__NOP	= 116,
    ADDIStocHA_ADDItocL_COPY	= 117,
    MCRF	= 118,
    MCRXRX	= 119,
    XSNABSDP_XSXEXPDP_XSABSDP_XSNEGDP_XSCPSGNDP	= 120,
    RFEBB	= 121,
    TBEGIN_TRECHKPT	= 122,
    WAIT	= 123,
    RLDCL_RLDCR	= 124,
    RLWIMI_RLWIMI8	= 125,
    RLDICL_RLDICL_32_RLDICL_32_64_RLDICR_RLDICR_32_RLDIMI	= 126,
    MFOCRF_MFOCRF8	= 127,
    MTOCRF_MTOCRF8	= 128,
    CR6SET_CR6UNSET_CRSET_CRUNSET_CRAND_CRANDC_CRNAND_CRNOR_CROR_CRORC_CREQV_CRXOR	= 129,
    SLW_SLW8_SRW_SRW8_RLWINM_RLWINM8_RLWNM_RLWNM8	= 130,
    FABSD_FABSS_FNABSD_FNABSS_FNEGD_FNEGS_FCPSGND_FCPSGNS_FMR	= 131,
    SRAW_SRAWI	= 132,
    ISEL_ISEL8	= 133,
    XSIEXPDP	= 134,
    TRECLAIM_TSR_TABORT	= 135,
    MFVSCR	= 136,
    MTVSCR	= 137,
    VCMPNEZB_VCMPNEZH_VCMPNEZW_VCMPEQUB_VCMPEQUD_VCMPEQUH_VCMPEQUW_VCMPNEB_VCMPNEH_VCMPNEW_VCMPEQFP_VCMPEQFPo_VCMPGEFP_VCMPGEFPo_VCMPGTFP_VCMPGTFPo_VCMPBFP_VCMPBFPo_VCMPGTSB_VCMPGTSBo_VCMPGTSD_VCMPGTSDo_VCMPGTSH_VCMPGTSHo_VCMPGTSW_VCMPGTSWo_VCMPGTUB_VCMPGTUBo_VCMPGTUD_VCMPGTUDo_VCMPGTUH_VCMPGTUHo_VCMPGTUW_VCMPGTUWo_VCMPNEBo_VCMPNEHo_VCMPNEWo_VCMPNEZBo_VCMPNEZHo_VCMPNEZWo_VCMPEQUBo_VCMPEQUDo_VCMPEQUHo_VCMPEQUWo_XVCMPEQDP_XVCMPEQDPo_XVCMPEQSP_XVCMPEQSPo_XVCMPGEDP_XVCMPGEDPo_XVCMPGESP_XVCMPGESPo_XVCMPGTDP_XVCMPGTDPo_XVCMPGTSP_XVCMPGTSPo	= 138,
    VABSDUB_VABSDUH_VABSDUW_VCLZB_VCLZD_VCLZH_VCLZW_VCTZB_VCTZD_VCTZH_VCTZW_VPOPCNTW_VPOPCNTD_VPRTYBD_VPRTYBW	= 139,
    VADDUBS_VADDUHS_VADDUWS_VAVGSB_VAVGSH_VAVGSW_VAVGUB_VAVGUH_VAVGUW_VADDSBS_VADDSHS_VADDSWS_VMAXFP_VMINFP_VMAXSB_VMAXSD_VMAXSH_VMAXSW_VMAXUB_VMAXUD_VMAXUH_VMAXUW_VMINSB_VMINSD_VMINSH_VMINSW_VMINUB_VMINUD_VMINUH_VMINUW_VBPERMD_VADDCUW_VSHASIGMAD_VSHASIGMAW_VSUBSBS_VSUBSHS_VSUBSWS_VSUBUBS_VSUBUHS_VSUBUWS_VSUBCUW_XVMAXDP_XVMAXSP_XVMINDP_XVMINSP_XVTSTDCDP_XVTSTDCSP_XVXSIGDP_XVXSIGSP	= 140,
    XVTDIVDP_XVTDIVSP_XVTSQRTDP_XVTSQRTSP	= 141,
    VADDFP_VCTSXS_VCTSXS_0_VCTUXS_VCTUXS_0_VEXPTEFP_VLOGEFP_VMADDFP_VMHADDSHS_VNMSUBFP_VREFP_VRFIM_VRFIN_VRFIP_VRFIZ_VRSQRTEFP_XVADDDP_XVADDSP_XVCVDPSP_XVCVDPSXDS_XVCVDPSXWS_XVCVDPUXDS_XVCVDPUXWS_XVCVHPSP_XVCVSPDP_XVCVSPHP_XVCVSPSXDS_XVCVSPSXWS_XVCVSPUXDS_XVCVSPUXWS_XVCVSXDDP_XVCVSXDSP_XVCVSXWDP_XVCVSXWSP_XVCVUXDDP_XVCVUXDSP_XVCVUXWDP_XVCVUXWSP_XVMADDADP_XVMADDASP_XVMADDMDP_XVMADDMSP_XVMSUBADP_XVMSUBASP_XVMSUBMDP_XVMSUBMSP_XVMULDP_XVMULSP_XVNMADDADP_XVNMADDASP_XVNMADDMDP_XVNMADDMSP_XVNMSUBADP_XVNMSUBASP_XVNMSUBMDP_XVNMSUBMSP_XVRDPI_XVRDPIC_XVRDPIM_XVRDPIP_XVRDPIZ_XVREDP_XVRESP_XVRSPI_XVRSPIC_XVRSPIM_XVRSPIP_XVRSPIZ_XVRSQRTEDP_XVRSQRTESP_XVSUBDP_XVSUBSP_VCFSX_VCFSX_0_VCFUX_VCFUX_0_VMHRADDSHS_VMLADDUHM_VMSUMMBM_VMSUMSHM_VMSUMSHS_VMSUMUBM_VMSUMUHM_VMSUMUHS_VMULESB_VMULESH_VMULESW_VMULEUB_VMULEUH_VMULEUW_VMULOSB_VMULOSH_VMULOSW_VMULOUB_VMULOUH_VMULOUW_VSUM2SWS_VSUM4SBS_VSUM4SHS_VSUM4UBS_VSUMSWS	= 142,
    VSUBFP_VMULUWM	= 143,
    MADDHD_MADDHDU_MADDLD_MADDLD8_MULLD_MULLDO	= 144,
    MULHD_MULHW_MULLW_MULLWO	= 145,
    MULHDU_MULHWU	= 146,
    MULLI_MULLI8	= 147,
    FRSP_FRIMD_FRIMS_FRIND_FRINS_FRIPD_FRIPS_FRIZD_FRIZS_FRE_FRES_FADDS_FMSUBS_FMADDS_FSUBS_FCFID_FCFIDS_FCFIDU_FCFIDUS_FCTID_FCTIDU_FCTIDUZ_FCTIDZ_FCTIW_FCTIWU_FCTIWUZ_FCTIWZ_FRSQRTE_FRSQRTES_FNMADDS_FNMSUBS_FSELD_FSELS_FMULS	= 148,
    FADD_FSUB	= 149,
    FMSUB_FMADD_FNMADD_FNMSUB_FMUL	= 150,
    XSMADDADP_XSMADDASP_XSMADDMDP_XSMADDMSP_XSMSUBADP_XSMSUBASP_XSMSUBMDP_XSMSUBMSP_XSMULDP_XSMULSP_XSNMADDADP_XSNMADDASP_XSNMADDMDP_XSNMADDMSP_XSNMSUBADP_XSNMSUBASP_XSNMSUBMDP_XSNMSUBMSP	= 151,
    FSELDo_FSELSo	= 152,
    MULHDUo_MULHWUo	= 153,
    MULHDo_MULHWo_MULLWOo_MULLWo	= 154,
    MULLDOo_MULLDo	= 155,
    FRIMDo_FRIMSo_FRINDo_FRINSo_FRIPDo_FRIPSo_FRIZDo_FRIZSo_FRESo_FREo_FADDSo_FSUBSo_FMSUBSo_FNMSUBSo_FMADDSo_FNMADDSo_FCFIDSo_FCFIDUSo_FCFIDUo_FCFIDo_FCTIDUZo_FCTIDUo_FCTIDZo_FCTIDo_FCTIWUZo_FCTIWUo_FCTIWZo_FCTIWo_FMULSo_FRSQRTESo_FRSQRTEo_FRSPo	= 156,
    FADDo_FSUBo	= 157,
    FMSUBo_FNMSUBo_FMADDo_FNMADDo_FMULo	= 158,
    XSADDDP_XSADDSP_XSCVDPHP_XSCVDPSP_XSCVDPSXDS_XSCVDPSXDSs_XSCVDPSXWS_XSCVDPUXDS_XSCVDPUXDSs_XSCVDPUXWS_XSCVDPSXWSs_XSCVDPUXWSs_XSCVHPDP_XSCVSPDP_XSCVSXDDP_XSCVSXDSP_XSCVUXDDP_XSCVUXDSP_XSRDPI_XSRDPIC_XSRDPIM_XSRDPIP_XSRDPIZ_XSREDP_XSRESP_XSRSQRTEDP_XSRSQRTESP_XSSUBDP_XSSUBSP_XSCVDPSPN_XSRSP	= 159,
    LVSL_LVSR	= 160,
    VSPLTISB_VSPLTISH_VSPLTISW_VSPLTB_VSPLTBs_VSPLTH_VSPLTHs_VSPLTW_XXMRGHW_XXMRGLW_XXPERM_XXPERMR_XXSLDWI_XXSLDWIs_XXSPLTIB_XXSPLTW_XXSPLTWs_XXPERMDI_XXPERMDIs	= 161,
    V_SETALLONES_V_SETALLONESB_V_SETALLONESH_VBPERMQ_VGBBD_VMRGHB_VMRGHH_VMRGHW_VMRGLB_VMRGLH_VMRGLW_VPERM_VPERMR_VPERMXOR_VPKPX_VPKSDSS_VPKSDUS_VPKSHSS_VPKSHUS_VPKSWSS_VPKSWUS_VPKUDUM_VPKUDUS_VPKUHUM_VPKUHUS_VPKUWUM_VPKUWUS_VSL_VSLDOI_VSLO_VSLV_VSR_VSRO_VSRV_VUPKHPX_VUPKHSB_VUPKHSH_VUPKHSW_VUPKLPX_VUPKLSB_VUPKLSH_VUPKLSW_XXBRD_XXBRH_XXBRQ_XXBRW_XXEXTRACTUW_XXINSERTW_VADDCUQ_VADDECUQ_VADDEUQM_VMUL10CUQ_VMUL10ECUQ_VMUL10EUQ_VMUL10UQ_VSUBCUQ_VSUBECUQ_VSUBEUQM_XSTSTDCQP_XSXSIGQP_BCDCFNo_BCDCFZo_BCDCPSGNo_BCDCTNo_BCDCTZo_BCDSETSGNo_BCDSo_BCDTRUNCo_BCDUSo_BCDUTRUNCo	= 162,
    VEXTRACTUB_VEXTRACTUH_VEXTRACTUW_VINSERTB_VINSERTD_VINSERTH_VINSERTW_MFVSRLD_MTVSRWS_VCLZLSBB_VCTZLSBB_VEXTRACTD_VEXTUBLX_VEXTUBRX_VEXTUHLX_VEXTUHRX_VEXTUWLX_VEXTUWRX_VPRTYBQ_VADDUQM_VSUBUQM	= 163,
    XSCMPEXPQP_XSCMPOQP_XSCMPUQP	= 164,
    BCDSRo_XSADDQP_XSADDQPO_XSCVDPQP_XSCVQPDP_XSCVQPDPO_XSCVQPSDZ_XSCVQPSWZ_XSCVQPUDZ_XSCVQPUWZ_XSCVSDQP_XSCVUDQP_XSRQPI_XSRQPIX_XSRQPXP_XSSUBQP_XSSUBQPO	= 165,
    BCDCTSQo	= 166,
    XSMADDQP_XSMADDQPO_XSMSUBQP_XSMSUBQPO_XSMULQP_XSMULQPO_XSNMADDQP_XSNMADDQPO_XSNMSUBQP_XSNMSUBQPO	= 167,
    BCDCFSQo	= 168,
    XSDIVQP_XSDIVQPO	= 169,
    XSSQRTQP_XSSQRTQPO	= 170,
    LXVL_LXVLL	= 171,
    LVEBX_LVEHX_LVEWX_LVX_LVXL	= 172,
    LXSIBZX_LXSIHZX_LXSDX_LXVB16X_LXVD2X_LXVWSX_LXSIWZX_LXV_LXVX_LXSD	= 173,
    DFLOADf64_XFLOADf64_LIWZX	= 174,
    DCBF_DCBFEP_DCBST_DCBSTEP_DCBT_DCBTEP_DCBZ_DCBZEP_DCBZL_DCBZLEP_DCBTST_DCBTSTEP	= 175,
    CP_COPY_CP_COPY8	= 176,
    CP_PASTE_CP_PASTE8	= 177,
    ICBI_ICBIEP	= 178,
    ICBT_ICBTLS_LBZ_LBZ8_LBZCIX_LBZX_LBZX8_LBZXTLS_LBZXTLS__LBZXTLS_32_LDBRX_LDCIX_LHBRX_LHBRX8_LHZ_LHZ8_LHZCIX_LHZX_LHZX8_LHZXTLS_LHZXTLS__LHZXTLS_32_LWBRX_LWBRX8_LWZ_LWZ8_LWZCIX_LWZX_LWZX8_LWZXTLS_LWZXTLS__LWZXTLS_32_EnforceIEIO_LSWI	= 179,
    LBARX_LBARXL_LHARX_LHARXL_LWARX_LWARXL	= 180,
    LD_LDX_LDXTLS_LDXTLS__DARN	= 181,
    LDARX_LDARXL	= 182,
    CP_ABORT	= 183,
    ISYNC	= 184,
    MSGSYNC	= 185,
    TLBSYNC	= 186,
    SYNC	= 187,
    LMW	= 188,
    LFIWZX_LFDX_LFD	= 189,
    SLBIA	= 190,
    SLBIE	= 191,
    SLBMFEE	= 192,
    SLBMFEV	= 193,
    SLBMTE	= 194,
    TLBIEL	= 195,
    LHZU_LHZU8_LWZU_LWZU8	= 196,
    LHZUX_LHZUX8_LWZUX_LWZUX8	= 197,
    TEND	= 198,
    STBCX_STHCX_STWCX	= 199,
    STDCX	= 200,
    LDMX	= 201,
    LHA_LHA8_LHAX_LHAX8_LWAX_LWAX_32	= 202,
    CP_PASTE8o_CP_PASTEo	= 203,
    LWA_LWA_32	= 204,
    TCHECK	= 205,
    LFIWAX	= 206,
    LXSIWAX	= 207,
    LIWAX	= 208,
    LFSX_LFS	= 209,
    LXSSP_LXSSPX	= 210,
    XFLOADf32_DFLOADf32	= 211,
    LHAU_LHAU8	= 212,
    LHAUX_LHAUX8_LWAUX	= 213,
    LXVH8X_LXVDSX_LXVW4X	= 214,
    STFD_STFDX_STFIWX_STFS_STFSX_STXSD_STXSDX_STXSIBX_STXSIBXv_STXSIHX_STXSIHXv_STXSIWX_STXSSP_STXSSPX	= 215,
    STW_STW8_STDBRX_STHBRX_STWBRX_STB_STB8_STH_STH8_STBX_STBX8_STBXTLS_STBXTLS__STBXTLS_32_STHX_STHX8_STHXTLS_STHXTLS__STHXTLS_32_STWX_STWX8_STWXTLS_STWXTLS__STWXTLS_32	= 216,
    DFSTOREf32_DFSTOREf64_XFSTOREf32_XFSTOREf64_STIWX	= 217,
    STD_STDX_STDXTLS_STDXTLS_	= 218,
    STBCIX_STDCIX_STHCIX_STWCIX_STSWI	= 219,
    SLBIEG	= 220,
    STMW	= 221,
    TLBIE	= 222,
    STVEBX_STVEHX_STVEWX_STVX_STVXL	= 223,
    STXV_STXVB16X_STXVD2X_STXVH8X_STXVW4X_STXVX	= 224,
    STXVL_STXVLL	= 225,
    MTCTR_MTCTR8_MTCTR8loop_MTCTRloop_MTLR_MTLR8	= 226,
    MFVRSAVE_MFVRSAVEv_MTVRSAVE_MTVRSAVEv	= 227,
    MFPMR	= 228,
    MTPMR	= 229,
    MFTB_MFTB8	= 230,
    MFCTR_MFCTR8_MFLR_MFLR8_MFSPR_MFSPR8	= 231,
    MFMSR	= 232,
    MTMSR	= 233,
    MTMSRD	= 234,
    MTSPR_MTSPR8	= 235,
    DIVW_DIVWO_DIVWU_DIVWUO_MODSW	= 236,
    DIVWE_DIVWEO_DIVWEU_DIVWEUO_MODSD_MODUD_MODUW	= 237,
    DIVD_DIVDO_DIVDU_DIVDUO	= 238,
    DIVDE_DIVDEO_DIVDEU_DIVDEUO	= 239,
    DIVWOo_DIVWUOo_DIVWUo_DIVWo	= 240,
    DIVDo_DIVDOo_DIVDUo_DIVDUOo	= 241,
    DIVWEo_DIVWEOo_DIVWEUo_DIVWEUOo	= 242,
    DIVDEo_DIVDEOo_DIVDEUo_DIVDEUOo	= 243,
    MTCRF_MTCRF8	= 244,
    ADDC8Oo_ADDC8o_ADDCOo_ADDCo_SUBFC8Oo_SUBFC8o_SUBFCOo_SUBFCo	= 245,
    FABSDo_FABSSo_FNABSDo_FNABSSo_FCPSGNDo_FCPSGNSo_FNEGDo_FNEGSo_FMRo	= 246,
    MCRFS	= 247,
    MTFSF_MTFSFo_MTFSFI_MTFSFIo	= 248,
    MTFSFb	= 249,
    RLDCLo_RLDCRo	= 250,
    RLDICLo_RLDICRo_RLDICL_32o_RLDIMIo	= 251,
    RLWIMI8o_RLWIMIo	= 252,
    RLWINM8o_RLWINMo_RLWNM8o_RLWNMo_SLW8o_SLWo_SRW8o_SRWo	= 253,
    SRAWIo_SRAWo	= 254,
    MFFS_MFFSCE_MFFSL_MFFSo	= 255,
    MFCR_MFCR8	= 256,
    EXTSWSLI_32_64o_SRADIo_EXTSWSLIo_RLDICo	= 257,
    SRADo_SLDo_SRDo	= 258,
    FDIV	= 259,
    FDIVo	= 260,
    XSSQRTDP	= 261,
    FSQRT	= 262,
    XVSQRTDP	= 263,
    XVSQRTSP	= 264,
    FSQRTo	= 265,
    XSSQRTSP	= 266,
    FSQRTS	= 267,
    FSQRTSo	= 268,
    XSDIVDP	= 269,
    FDIVS	= 270,
    FDIVSo	= 271,
    XSDIVSP	= 272,
    XVDIVSP	= 273,
    XVDIVDP	= 274,
    LFSU	= 275,
    LFSUX	= 276,
    STFDU_STFDUX_STFSU_STFSUX	= 277,
    STBU_STBU8_STDU_STHU_STHU8_STWU_STWU8	= 278,
    STBUX_STBUX8_STDUX_STHUX_STHUX8_STWUX_STWUX8	= 279,
    LBZU_LBZU8	= 280,
    LBZUX_LBZUX8	= 281,
    LDU	= 282,
    LDUX	= 283,
    LFDU	= 284,
    LFDUX	= 285,
    VPMSUMB_VPMSUMD_VPMSUMH_VPMSUMW_VCIPHER_VCIPHERLAST_VNCIPHER_VNCIPHERLAST_VSBOX	= 286,
    BCCCTR_BCCCTR8_BCCCTRL_BCCCTRL8_BCCL_BCCLA_BCCLR_BCCLRL_BCCTR_BCCTR8_BCCTR8n_BCCTRL_BCCTRL8_BCCTRL8n_BCCTRLn_BCCTRn_BDNZ_BDNZ8_BDNZA_BDNZAm_BDNZAp_BDNZm_BDNZp_BDZ_BDZ8_BDZA_BDZAm_BDZAp_BDZm_BDZp_BDNZL_BDNZLA_BDNZLAm_BDNZLAp_BDNZLR_BDNZLR8_BDNZLRL_BDNZLRLm_BDNZLRLp_BDNZLRm_BDNZLRp_BDNZLm_BDNZLp_BDZL_BDZLA_BDZLAm_BDZLAp_BDZLR_BDZLR8_BDZLRL_BDZLRLm_BDZLRLp_BDZLRm_BDZLRp_BDZLm_BDZLp_BL_BL_NOP_BL_TLS_BL8_BL8_NOP_BL8_NOP_TLS_BL8_TLS_BL8_TLS__BLA_BLA8_BLA8_NOP_BLR_BLR8_BLRL_TAILB_TAILB8_TAILBA_TAILBA8_TAILBCTR_TAILBCTR8_gBC_gBCA_gBCAat_gBCCTR_gBCCTRL_gBCL_gBCLA_gBCLAat_gBCLR_gBCLRL_gBCLat_gBCat_BCLR_BCLRL_BCLRLn_BCLRn_BCTR_BCTR8_BCTRL_BCTRL8_B_BA_BC_BCC_BCCA_BCL_BCLalways_BCLn_BCTRL8_LDinto_toc_BCn_CTRL_DEP	= 287,
    ADDPCIS	= 288,
    LDAT_LWAT	= 289,
    STDAT_STWAT	= 290,
    BRINC	= 291,
    EVABS_EVEQV_EVNAND_EVNEG_EVADDIW_EVADDW_EVAND_EVANDC_EVCMPEQ_EVCMPGTS_EVCMPGTU_EVCMPLTS_EVCMPLTU_EVCNTLSW_EVCNTLZW_EVEXTSB_EVEXTSH_EVMERGEHI_EVMERGEHILO_EVMERGELO_EVMERGELOHI_EVNOR_EVOR_EVORC_EVXOR_EVRLW_EVRLWI_EVRNDW_EVSLW_EVSLWI_EVSPLATFI_EVSPLATI_EVSRWIS_EVSRWIU_EVSRWS_EVSRWU_EVSUBFW_EVSUBIFW	= 292,
    EVMRA_EVADDSMIAAW_EVADDSSIAAW_EVADDUMIAAW_EVADDUSIAAW_EVDIVWS_EVDIVWU_EVMHEGSMFAA_EVMHEGSMFAN_EVMHEGSMIAA_EVMHEGSMIAN_EVMHEGUMIAA_EVMHEGUMIAN_EVMHESMF_EVMHESMFA_EVMHESMFAAW_EVMHESMFANW_EVMHESMI_EVMHESMIA_EVMHESMIAAW_EVMHESMIANW_EVMHESSF_EVMHESSFA_EVMHESSFAAW_EVMHESSFANW_EVMHESSIAAW_EVMHESSIANW_EVMHEUMI_EVMHEUMIA_EVMHEUMIAAW_EVMHEUMIANW_EVMHEUSIAAW_EVMHEUSIANW_EVMHOGSMFAA_EVMHOGSMFAN_EVMHOGSMIAA_EVMHOGSMIAN_EVMHOGUMIAA_EVMHOGUMIAN_EVMHOSMF_EVMHOSMFA_EVMHOSMFAAW_EVMHOSMFANW_EVMHOSMI_EVMHOSMIA_EVMHOSMIAAW_EVMHOSMIANW_EVMHOSSF_EVMHOSSFA_EVMHOSSFAAW_EVMHOSSFANW_EVMHOSSIAAW_EVMHOSSIANW_EVMHOUMI_EVMHOUMIA_EVMHOUMIAAW_EVMHOUMIANW_EVMHOUSIAAW_EVMHOUSIANW_EVMWHSMF_EVMWHSMFA_EVMWHSMI_EVMWHSMIA_EVMWHSSF_EVMWHSSFA_EVMWHUMI_EVMWHUMIA_EVMWLSMIAAW_EVMWLSMIANW_EVMWLSSIAAW_EVMWLSSIANW_EVMWLUMI_EVMWLUMIA_EVMWLUMIAAW_EVMWLUMIANW_EVMWLUSIAAW_EVMWLUSIANW_EVMWSMF_EVMWSMFA_EVMWSMFAA_EVMWSMFAN_EVMWSMI_EVMWSMIA_EVMWSMIAA_EVMWSMIAN_EVMWSSF_EVMWSSFA_EVMWSSFAA_EVMWSSFAN_EVMWUMI_EVMWUMIA_EVMWUMIAA_EVMWUMIAN_EVSUBFSMIAAW_EVSUBFSSIAAW_EVSUBFUMIAAW_EVSUBFUSIAAW	= 293,
    EVLDD_EVLDDX_EVLDH_EVLDHX_EVLDW_EVLDWX_EVLHHESPLAT_EVLHHESPLATX_EVLHHOSSPLAT_EVLHHOSSPLATX_EVLHHOUSPLAT_EVLHHOUSPLATX_EVLWHE_EVLWHEX_EVLWHOS_EVLWHOSX_EVLWHOU_EVLWHOUX_EVLWHSPLAT_EVLWHSPLATX_EVLWWSPLAT_EVLWWSPLATX	= 294,
    EVSTDD_EVSTDDX_EVSTDH_EVSTDHX_EVSTDW_EVSTDWX_EVSTWHE_EVSTWHEX_EVSTWHO_EVSTWHOX_EVSTWWE_EVSTWWEX_EVSTWWO_EVSTWWOX	= 295,
    HRFID_ATTN_CLRBHRB_MFBHRBE_NAP_RFCI_RFDI_RFMCI_SC	= 296,
    RFI	= 297,
    RFID	= 298,
    DSS_DSSALL_DST_DST64_DSTST_DSTST64_DSTSTT_DSTSTT64_DSTT_DSTT64_ICBLQ_LBEPX_LHEPX_LWEPX_TLBIVAX_TLBLD_TLBLI_TLBRE_TLBRE2_TLBSX_TLBSX2_TLBSX2D_TLBWE_TLBWE2_MBAR_TRAP_DCCCI_ICCCI	= 299,
    ICBLC_STBEPX_STHEPX_STWEPX	= 300,
    LFDEPX	= 301,
    STFDEPX	= 302,
    MFSR_MFSRIN	= 303,
    MTSR_MTSRIN	= 304,
    MFDCR	= 305,
    MTDCR	= 306,
    NOP_GT_PWR6_NOP_GT_PWR7	= 307,
    TLBIA	= 308,
    WRTEE_WRTEEI	= 309,
    MSYNC	= 310,
    SLBSYNC	= 311,
    SLBFEEo	= 312,
    STOP	= 313,
    DCBA_DCBI	= 314,
    SCHED_LIST_END = 315
  };
} // end Sched namespace
} // end PPC namespace
} // end llvm namespace
#endif // GET_INSTRINFO_SCHED_ENUM

#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const MCPhysReg ImplicitList1[] = { PPC::CR7, 0 };
static const MCPhysReg ImplicitList2[] = { PPC::RM, 0 };
static const MCPhysReg ImplicitList3[] = { PPC::XER, 0 };
static const MCPhysReg ImplicitList4[] = { PPC::XER, PPC::CR0, 0 };
static const MCPhysReg ImplicitList5[] = { PPC::CR0, 0 };
static const MCPhysReg ImplicitList6[] = { PPC::CARRY, 0 };
static const MCPhysReg ImplicitList7[] = { PPC::CARRY, PPC::XER, 0 };
static const MCPhysReg ImplicitList8[] = { PPC::CARRY, PPC::XER, PPC::CR0, 0 };
static const MCPhysReg ImplicitList9[] = { PPC::CARRY, PPC::CR0, 0 };
static const MCPhysReg ImplicitList10[] = { PPC::X0, PPC::X3, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X11, PPC::X12, PPC::LR8, PPC::CTR8, PPC::CR0, PPC::CR1, PPC::CR5, PPC::CR6, PPC::CR7, 0 };
static const MCPhysReg ImplicitList11[] = { PPC::R0, PPC::R3, PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R11, PPC::R12, PPC::LR, PPC::CTR, PPC::CR0, PPC::CR1, PPC::CR5, PPC::CR6, PPC::CR7, 0 };
static const MCPhysReg ImplicitList12[] = { PPC::R1, 0 };
static const MCPhysReg ImplicitList13[] = { PPC::CTR, 0 };
static const MCPhysReg ImplicitList14[] = { PPC::CTR8, 0 };
static const MCPhysReg ImplicitList15[] = { PPC::CTR, PPC::RM, 0 };
static const MCPhysReg ImplicitList16[] = { PPC::LR, 0 };
static const MCPhysReg ImplicitList17[] = { PPC::CTR8, PPC::RM, 0 };
static const MCPhysReg ImplicitList18[] = { PPC::LR8, 0 };
static const MCPhysReg ImplicitList19[] = { PPC::LR, PPC::RM, 0 };
static const MCPhysReg ImplicitList20[] = { PPC::CR6, 0 };
static const MCPhysReg ImplicitList21[] = { PPC::LR8, PPC::X2, 0 };
static const MCPhysReg ImplicitList22[] = { PPC::CTR, PPC::LR, PPC::RM, 0 };
static const MCPhysReg ImplicitList23[] = { PPC::CTR8, PPC::LR8, PPC::RM, 0 };
static const MCPhysReg ImplicitList24[] = { PPC::LR8, PPC::RM, 0 };
static const MCPhysReg ImplicitList25[] = { PPC::CR1EQ, 0 };
static const MCPhysReg ImplicitList26[] = { PPC::X1, 0 };
static const MCPhysReg ImplicitList27[] = { PPC::CR1, 0 };
static const MCPhysReg ImplicitList28[] = { PPC::X0, PPC::X4, PPC::X5, PPC::X6, PPC::X7, PPC::X8, PPC::X9, PPC::X10, PPC::X11, PPC::X12, PPC::LR8, PPC::CTR8, PPC::CR0, PPC::CR1, PPC::CR5, PPC::CR6, PPC::CR7, 0 };
static const MCPhysReg ImplicitList29[] = { PPC::R0, PPC::R4, PPC::R5, PPC::R6, PPC::R7, PPC::R8, PPC::R9, PPC::R10, PPC::R11, PPC::R12, PPC::LR, PPC::CTR, PPC::CR0, PPC::CR1, PPC::CR5, PPC::CR6, PPC::CR7, 0 };
static const MCPhysReg ImplicitList30[] = { PPC::LR, PPC::CTR, 0 };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo10[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_2, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_2, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_2, 0 }, };
static const MCOperandInfo OperandInfo31[] = { { -1, 0, MCOI::OPERAND_GENERIC_0, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_1, 0 }, { -1, 0, MCOI::OPERAND_GENERIC_2, 0 }, };
static const MCOperandInfo OperandInfo32[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo33[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo34[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo35[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo36[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo37[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo38[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo39[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo40[] = { { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo41[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo42[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo43[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo44[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo45[] = { { PPC::SPILLTOVSRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo46[] = { { PPC::SPILLTOVSRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo47[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo48[] = { { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo49[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo50[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo51[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo52[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo53[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo54[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo55[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo56[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo57[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo58[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo59[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo60[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo61[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo62[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo63[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo64[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo65[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo66[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo67[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo68[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo69[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo70[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo71[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo72[] = { { -1, 0, MCOI::OPERAND_PCREL, 0 }, };
static const MCOperandInfo OperandInfo73[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo74[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo75[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo76[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo77[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo78[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo79[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo80[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo81[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo82[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo83[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo84[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo85[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo86[] = { { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo87[] = { { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo88[] = { { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo89[] = { { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo90[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo91[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo92[] = { { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo93[] = { { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo94[] = { { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo95[] = { { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo96[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo97[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo98[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo99[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo100[] = { { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo101[] = { { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo102[] = { { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo103[] = { { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo104[] = { { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo105[] = { { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo106[] = { { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo107[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo108[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo109[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo110[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo111[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo112[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo113[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo114[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo115[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo116[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo117[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo118[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo119[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo120[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo121[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo122[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo123[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo124[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo125[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo126[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo127[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo128[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo129[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo130[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo131[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo132[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo133[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo134[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo135[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo136[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo137[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo138[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo139[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo140[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo141[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo142[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo143[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo144[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo145[] = { { PPC::VFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo146[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo147[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo148[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo149[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo150[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo151[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo152[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo153[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo154[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo155[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo156[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo157[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo158[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo159[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo160[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo161[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo162[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo163[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo164[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo165[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo166[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo167[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo168[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo169[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo170[] = { { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo171[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo172[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo173[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo174[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo175[] = { { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo176[] = { { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo177[] = { { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo178[] = { { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo179[] = { { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo180[] = { { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo181[] = { { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo182[] = { { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo183[] = { { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo184[] = { { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo185[] = { { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo186[] = { { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo187[] = { { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo188[] = { { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo189[] = { { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo190[] = { { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo191[] = { { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo192[] = { { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo193[] = { { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo194[] = { { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo195[] = { { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo196[] = { { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo197[] = { { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo198[] = { { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo199[] = { { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo200[] = { { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo201[] = { { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo202[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo203[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo204[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo205[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo206[] = { { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo207[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo208[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo209[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo210[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo211[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo212[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo213[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo214[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo215[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo216[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo217[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo218[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo219[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo220[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo221[] = { { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo222[] = { { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo223[] = { { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo224[] = { { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo225[] = { { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo226[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo227[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo228[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo229[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo230[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo231[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo232[] = { { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QBRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo233[] = { { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo234[] = { { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::QSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo235[] = { { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo236[] = { { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo237[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo238[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo239[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo240[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo241[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo242[] = { { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo243[] = { { PPC::SPE4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo244[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo245[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo246[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo247[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo248[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo249[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo250[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo251[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo252[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo253[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo254[] = { { -1, 0, MCOI::OPERAND_PCREL, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo255[] = { { PPC::CTRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo256[] = { { PPC::CTRRC8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo257[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo258[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo259[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo260[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo261[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo262[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo263[] = { { PPC::VFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo264[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo265[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo266[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo267[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo268[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo269[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo270[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo271[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo272[] = { { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo273[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo274[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo275[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo276[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo277[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo278[] = { { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo279[] = { { PPC::VFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo280[] = { { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo281[] = { { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo282[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo283[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo284[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo285[] = { { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo286[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo287[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo288[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo289[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo290[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo291[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo292[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo293[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo294[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo295[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo296[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo297[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo298[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo299[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo300[] = { { PPC::VSSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo301[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo302[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo303[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo304[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo305[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo306[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo307[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo308[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo309[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };

extern const MCInstrDesc PPCInsts[] = {
  { 0,	1,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #0 = PHI
  { 1,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1 = INLINEASM
  { 2,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #2 = INLINEASM_BR
  { 3,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::NotDuplicable), 0x0ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #3 = CFI_INSTRUCTION
  { 4,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::NotDuplicable), 0x0ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #4 = EH_LABEL
  { 5,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::NotDuplicable), 0x0ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #5 = GC_LABEL
  { 6,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::NotDuplicable), 0x0ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #6 = ANNOTATION_LABEL
  { 7,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #7 = KILL
  { 8,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo4, -1 ,nullptr },  // Inst #8 = EXTRACT_SUBREG
  { 9,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo5, -1 ,nullptr },  // Inst #9 = INSERT_SUBREG
  { 10,	1,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #10 = IMPLICIT_DEF
  { 11,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo6, -1 ,nullptr },  // Inst #11 = SUBREG_TO_REG
  { 12,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo4, -1 ,nullptr },  // Inst #12 = COPY_TO_REGCLASS
  { 13,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #13 = DBG_VALUE
  { 14,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #14 = DBG_LABEL
  { 15,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #15 = REG_SEQUENCE
  { 16,	2,	1,	0,	117,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo7, -1 ,nullptr },  // Inst #16 = COPY
  { 17,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #17 = BUNDLE
  { 18,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #18 = LIFETIME_START
  { 19,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #19 = LIFETIME_END
  { 20,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo8, -1 ,nullptr },  // Inst #20 = STACKMAP
  { 21,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #21 = FENTRY_CALL
  { 22,	6,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo9, -1 ,nullptr },  // Inst #22 = PATCHPOINT
  { 23,	1,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::Rematerializable), 0x0ULL, nullptr, nullptr, OperandInfo10, -1 ,nullptr },  // Inst #23 = LOAD_STACK_GUARD
  { 24,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #24 = STATEPOINT
  { 25,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo11, -1 ,nullptr },  // Inst #25 = LOCAL_ESCAPE
  { 26,	1,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Branch)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #26 = FAULTING_OP
  { 27,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #27 = PATCHABLE_OP
  { 28,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #28 = PATCHABLE_FUNCTION_ENTER
  { 29,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #29 = PATCHABLE_RET
  { 30,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #30 = PATCHABLE_FUNCTION_EXIT
  { 31,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Return)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #31 = PATCHABLE_TAIL_CALL
  { 32,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo11, -1 ,nullptr },  // Inst #32 = PATCHABLE_EVENT_CALL
  { 33,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Call)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12, -1 ,nullptr },  // Inst #33 = PATCHABLE_TYPED_EVENT_CALL
  { 34,	0,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #34 = ICALL_BRANCH_FUNNEL
  { 35,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #35 = G_ADD
  { 36,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #36 = G_SUB
  { 37,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #37 = G_MUL
  { 38,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #38 = G_SDIV
  { 39,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #39 = G_UDIV
  { 40,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #40 = G_SREM
  { 41,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #41 = G_UREM
  { 42,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #42 = G_AND
  { 43,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #43 = G_OR
  { 44,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #44 = G_XOR
  { 45,	1,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo14, -1 ,nullptr },  // Inst #45 = G_IMPLICIT_DEF
  { 46,	1,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, OperandInfo14, -1 ,nullptr },  // Inst #46 = G_PHI
  { 47,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo15, -1 ,nullptr },  // Inst #47 = G_FRAME_INDEX
  { 48,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo15, -1 ,nullptr },  // Inst #48 = G_GLOBAL_VALUE
  { 49,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo16, -1 ,nullptr },  // Inst #49 = G_EXTRACT
  { 50,	2,	2,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #50 = G_UNMERGE_VALUES
  { 51,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo18, -1 ,nullptr },  // Inst #51 = G_INSERT
  { 52,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #52 = G_MERGE_VALUES
  { 53,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #53 = G_BUILD_VECTOR
  { 54,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #54 = G_BUILD_VECTOR_TRUNC
  { 55,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #55 = G_CONCAT_VECTORS
  { 56,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #56 = G_PTRTOINT
  { 57,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #57 = G_INTTOPTR
  { 58,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #58 = G_BITCAST
  { 59,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #59 = G_INTRINSIC_TRUNC
  { 60,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #60 = G_INTRINSIC_ROUND
  { 61,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #61 = G_LOAD
  { 62,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #62 = G_SEXTLOAD
  { 63,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #63 = G_ZEXTLOAD
  { 64,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #64 = G_STORE
  { 65,	5,	2,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo20, -1 ,nullptr },  // Inst #65 = G_ATOMIC_CMPXCHG_WITH_SUCCESS
  { 66,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo21, -1 ,nullptr },  // Inst #66 = G_ATOMIC_CMPXCHG
  { 67,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo22, -1 ,nullptr },  // Inst #67 = G_ATOMICRMW_XCHG
  { 68,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo22, -1 ,nullptr },  // Inst #68 = G_ATOMICRMW_ADD
  { 69,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo22, -1 ,nullptr },  // Inst #69 = G_ATOMICRMW_SUB
  { 70,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo22, -1 ,nullptr },  // Inst #70 = G_ATOMICRMW_AND
  { 71,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo22, -1 ,nullptr },  // Inst #71 = G_ATOMICRMW_NAND
  { 72,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo22, -1 ,nullptr },  // Inst #72 = G_ATOMICRMW_OR
  { 73,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo22, -1 ,nullptr },  // Inst #73 = G_ATOMICRMW_XOR
  { 74,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo22, -1 ,nullptr },  // Inst #74 = G_ATOMICRMW_MAX
  { 75,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo22, -1 ,nullptr },  // Inst #75 = G_ATOMICRMW_MIN
  { 76,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo22, -1 ,nullptr },  // Inst #76 = G_ATOMICRMW_UMAX
  { 77,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo22, -1 ,nullptr },  // Inst #77 = G_ATOMICRMW_UMIN
  { 78,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo8, -1 ,nullptr },  // Inst #78 = G_FENCE
  { 79,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, nullptr, OperandInfo15, -1 ,nullptr },  // Inst #79 = G_BRCOND
  { 80,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, nullptr, OperandInfo14, -1 ,nullptr },  // Inst #80 = G_BRINDIRECT
  { 81,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Variadic), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #81 = G_INTRINSIC
  { 82,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::Variadic)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #82 = G_INTRINSIC_W_SIDE_EFFECTS
  { 83,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #83 = G_ANYEXT
  { 84,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #84 = G_TRUNC
  { 85,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo15, -1 ,nullptr },  // Inst #85 = G_CONSTANT
  { 86,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo15, -1 ,nullptr },  // Inst #86 = G_FCONSTANT
  { 87,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo14, -1 ,nullptr },  // Inst #87 = G_VASTART
  { 88,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo16, -1 ,nullptr },  // Inst #88 = G_VAARG
  { 89,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #89 = G_SEXT
  { 90,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #90 = G_ZEXT
  { 91,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo23, -1 ,nullptr },  // Inst #91 = G_SHL
  { 92,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo23, -1 ,nullptr },  // Inst #92 = G_LSHR
  { 93,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo23, -1 ,nullptr },  // Inst #93 = G_ASHR
  { 94,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo24, -1 ,nullptr },  // Inst #94 = G_ICMP
  { 95,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo24, -1 ,nullptr },  // Inst #95 = G_FCMP
  { 96,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo21, -1 ,nullptr },  // Inst #96 = G_SELECT
  { 97,	4,	2,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo21, -1 ,nullptr },  // Inst #97 = G_UADDO
  { 98,	5,	2,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo25, -1 ,nullptr },  // Inst #98 = G_UADDE
  { 99,	4,	2,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo21, -1 ,nullptr },  // Inst #99 = G_USUBO
  { 100,	5,	2,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo25, -1 ,nullptr },  // Inst #100 = G_USUBE
  { 101,	4,	2,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo21, -1 ,nullptr },  // Inst #101 = G_SADDO
  { 102,	5,	2,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo25, -1 ,nullptr },  // Inst #102 = G_SADDE
  { 103,	4,	2,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo21, -1 ,nullptr },  // Inst #103 = G_SSUBO
  { 104,	5,	2,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo25, -1 ,nullptr },  // Inst #104 = G_SSUBE
  { 105,	4,	2,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo21, -1 ,nullptr },  // Inst #105 = G_UMULO
  { 106,	4,	2,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo21, -1 ,nullptr },  // Inst #106 = G_SMULO
  { 107,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #107 = G_UMULH
  { 108,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #108 = G_SMULH
  { 109,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #109 = G_FADD
  { 110,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #110 = G_FSUB
  { 111,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #111 = G_FMUL
  { 112,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo26, -1 ,nullptr },  // Inst #112 = G_FMA
  { 113,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #113 = G_FDIV
  { 114,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #114 = G_FREM
  { 115,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #115 = G_FPOW
  { 116,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #116 = G_FEXP
  { 117,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #117 = G_FEXP2
  { 118,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #118 = G_FLOG
  { 119,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #119 = G_FLOG2
  { 120,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #120 = G_FLOG10
  { 121,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #121 = G_FNEG
  { 122,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #122 = G_FPEXT
  { 123,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #123 = G_FPTRUNC
  { 124,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #124 = G_FPTOSI
  { 125,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #125 = G_FPTOUI
  { 126,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #126 = G_SITOFP
  { 127,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #127 = G_UITOFP
  { 128,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #128 = G_FABS
  { 129,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo23, -1 ,nullptr },  // Inst #129 = G_FCOPYSIGN
  { 130,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #130 = G_FCANONICALIZE
  { 131,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #131 = G_FMINNUM
  { 132,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #132 = G_FMAXNUM
  { 133,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #133 = G_FMINNUM_IEEE
  { 134,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #134 = G_FMAXNUM_IEEE
  { 135,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #135 = G_FMINIMUM
  { 136,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #136 = G_FMAXIMUM
  { 137,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo23, -1 ,nullptr },  // Inst #137 = G_GEP
  { 138,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo27, -1 ,nullptr },  // Inst #138 = G_PTR_MASK
  { 139,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #139 = G_SMIN
  { 140,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #140 = G_SMAX
  { 141,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #141 = G_UMIN
  { 142,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo13, -1 ,nullptr },  // Inst #142 = G_UMAX
  { 143,	1,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #143 = G_BR
  { 144,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x0ULL, nullptr, nullptr, OperandInfo28, -1 ,nullptr },  // Inst #144 = G_BRJT
  { 145,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo29, -1 ,nullptr },  // Inst #145 = G_INSERT_VECTOR_ELT
  { 146,	3,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo30, -1 ,nullptr },  // Inst #146 = G_EXTRACT_VECTOR_ELT
  { 147,	4,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo31, -1 ,nullptr },  // Inst #147 = G_SHUFFLE_VECTOR
  { 148,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #148 = G_CTTZ
  { 149,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #149 = G_CTTZ_ZERO_UNDEF
  { 150,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #150 = G_CTLZ
  { 151,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #151 = G_CTLZ_ZERO_UNDEF
  { 152,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #152 = G_CTPOP
  { 153,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #153 = G_BSWAP
  { 154,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #154 = G_FCEIL
  { 155,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #155 = G_FCOS
  { 156,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #156 = G_FSIN
  { 157,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #157 = G_FSQRT
  { 158,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #158 = G_FFLOOR
  { 159,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #159 = G_FRINT
  { 160,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo19, -1 ,nullptr },  // Inst #160 = G_FNEARBYINT
  { 161,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo17, -1 ,nullptr },  // Inst #161 = G_ADDRSPACE_CAST
  { 162,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo15, -1 ,nullptr },  // Inst #162 = G_BLOCK_ADDR
  { 163,	2,	1,	0,	0,	0|(1ULL<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo15, -1 ,nullptr },  // Inst #163 = G_JUMP_TABLE
  { 164,	1,	0,	4,	1,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList1, OperandInfo32, -1 ,nullptr },  // Inst #164 = CFENCE8
  { 165,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33, -1 ,nullptr },  // Inst #165 = CLRLSLDI
  { 166,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33, -1 ,nullptr },  // Inst #166 = CLRLSLDIo
  { 167,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34, -1 ,nullptr },  // Inst #167 = CLRLSLWI
  { 168,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34, -1 ,nullptr },  // Inst #168 = CLRLSLWIo
  { 169,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #169 = CLRRDI
  { 170,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #170 = CLRRDIo
  { 171,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #171 = CLRRWI
  { 172,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #172 = CLRRWIo
  { 173,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #173 = CP_COPY_FIRST
  { 174,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #174 = CP_COPYx
  { 175,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #175 = CP_PASTE_LAST
  { 176,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #176 = CP_PASTEx
  { 177,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #177 = DCBFL
  { 178,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #178 = DCBFLP
  { 179,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #179 = DCBFx
  { 180,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39, -1 ,nullptr },  // Inst #180 = DCBTCT
  { 181,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39, -1 ,nullptr },  // Inst #181 = DCBTDS
  { 182,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39, -1 ,nullptr },  // Inst #182 = DCBTSTCT
  { 183,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39, -1 ,nullptr },  // Inst #183 = DCBTSTDS
  { 184,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #184 = DCBTSTT
  { 185,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #185 = DCBTSTx
  { 186,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #186 = DCBTT
  { 187,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #187 = DCBTx
  { 188,	3,	1,	4,	211,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo40, -1 ,nullptr },  // Inst #188 = DFLOADf32
  { 189,	3,	1,	4,	174,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo41, -1 ,nullptr },  // Inst #189 = DFLOADf64
  { 190,	3,	0,	4,	217,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo40, -1 ,nullptr },  // Inst #190 = DFSTOREf32
  { 191,	3,	0,	4,	217,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo41, -1 ,nullptr },  // Inst #191 = DFSTOREf64
  { 192,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33, -1 ,nullptr },  // Inst #192 = EXTLDI
  { 193,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33, -1 ,nullptr },  // Inst #193 = EXTLDIo
  { 194,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34, -1 ,nullptr },  // Inst #194 = EXTLWI
  { 195,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34, -1 ,nullptr },  // Inst #195 = EXTLWIo
  { 196,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33, -1 ,nullptr },  // Inst #196 = EXTRDI
  { 197,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33, -1 ,nullptr },  // Inst #197 = EXTRDIo
  { 198,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34, -1 ,nullptr },  // Inst #198 = EXTRWI
  { 199,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34, -1 ,nullptr },  // Inst #199 = EXTRWIo
  { 200,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34, -1 ,nullptr },  // Inst #200 = INSLWI
  { 201,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34, -1 ,nullptr },  // Inst #201 = INSLWIo
  { 202,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33, -1 ,nullptr },  // Inst #202 = INSRDI
  { 203,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo33, -1 ,nullptr },  // Inst #203 = INSRDIo
  { 204,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34, -1 ,nullptr },  // Inst #204 = INSRWI
  { 205,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo34, -1 ,nullptr },  // Inst #205 = INSRWIo
  { 206,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42, -1 ,nullptr },  // Inst #206 = LAx
  { 207,	3,	1,	4,	208,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo43, -1 ,nullptr },  // Inst #207 = LIWAX
  { 208,	3,	1,	4,	174,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo43, -1 ,nullptr },  // Inst #208 = LIWZX
  { 209,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44, -1 ,nullptr },  // Inst #209 = RLWIMIbm
  { 210,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44, -1 ,nullptr },  // Inst #210 = RLWIMIobm
  { 211,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44, -1 ,nullptr },  // Inst #211 = RLWINMbm
  { 212,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44, -1 ,nullptr },  // Inst #212 = RLWINMobm
  { 213,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44, -1 ,nullptr },  // Inst #213 = RLWNMbm
  { 214,	4,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo44, -1 ,nullptr },  // Inst #214 = RLWNMobm
  { 215,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #215 = ROTRDI
  { 216,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #216 = ROTRDIo
  { 217,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #217 = ROTRWI
  { 218,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #218 = ROTRWIo
  { 219,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #219 = SLDI
  { 220,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #220 = SLDIo
  { 221,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #221 = SLWI
  { 222,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #222 = SLWIo
  { 223,	3,	1,	4,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo45, -1 ,nullptr },  // Inst #223 = SPILLTOVSR_LD
  { 224,	3,	1,	4,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo46, -1 ,nullptr },  // Inst #224 = SPILLTOVSR_LDX
  { 225,	3,	0,	4,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo45, -1 ,nullptr },  // Inst #225 = SPILLTOVSR_ST
  { 226,	3,	0,	4,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo46, -1 ,nullptr },  // Inst #226 = SPILLTOVSR_STX
  { 227,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #227 = SRDI
  { 228,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #228 = SRDIo
  { 229,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #229 = SRWI
  { 230,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #230 = SRWIo
  { 231,	3,	0,	4,	217,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, nullptr, OperandInfo43, -1 ,nullptr },  // Inst #231 = STIWX
  { 232,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #232 = SUBI
  { 233,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #233 = SUBIC
  { 234,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #234 = SUBICo
  { 235,	3,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #235 = SUBIS
  { 236,	2,	0,	0,	0,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo47, -1 ,nullptr },  // Inst #236 = SUBPCIS
  { 237,	3,	1,	4,	211,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo48, -1 ,nullptr },  // Inst #237 = XFLOADf32
  { 238,	3,	1,	4,	174,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayLoad), 0x80ULL, ImplicitList2, nullptr, OperandInfo43, -1 ,nullptr },  // Inst #238 = XFLOADf64
  { 239,	3,	0,	4,	217,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, nullptr, OperandInfo48, -1 ,nullptr },  // Inst #239 = XFSTOREf32
  { 240,	3,	0,	4,	217,	0|(1ULL<<MCID::Pseudo)|(1ULL<<MCID::MayStore), 0x80ULL, ImplicitList2, nullptr, OperandInfo43, -1 ,nullptr },  // Inst #240 = XFSTOREf64
  { 241,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #241 = ADD4
  { 242,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList3, OperandInfo49, -1 ,nullptr },  // Inst #242 = ADD4O
  { 243,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList4, OperandInfo49, -1 ,nullptr },  // Inst #243 = ADD4Oo
  { 244,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #244 = ADD4TLS
  { 245,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #245 = ADD4o
  { 246,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #246 = ADD8
  { 247,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList3, OperandInfo50, -1 ,nullptr },  // Inst #247 = ADD8O
  { 248,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList4, OperandInfo50, -1 ,nullptr },  // Inst #248 = ADD8Oo
  { 249,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo51, -1 ,nullptr },  // Inst #249 = ADD8TLS
  { 250,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #250 = ADD8TLS_
  { 251,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #251 = ADD8o
  { 252,	3,	1,	4,	115,	0|(1ULL<<MCID::Commutable), 0xcULL, nullptr, ImplicitList6, OperandInfo49, -1 ,nullptr },  // Inst #252 = ADDC
  { 253,	3,	1,	4,	115,	0|(1ULL<<MCID::Commutable), 0xcULL, nullptr, ImplicitList6, OperandInfo50, -1 ,nullptr },  // Inst #253 = ADDC8
  { 254,	3,	1,	4,	115,	0|(1ULL<<MCID::Commutable), 0xcULL, nullptr, ImplicitList7, OperandInfo50, -1 ,nullptr },  // Inst #254 = ADDC8O
  { 255,	3,	1,	4,	245,	0|(1ULL<<MCID::Commutable), 0xcULL, nullptr, ImplicitList8, OperandInfo50, -1 ,nullptr },  // Inst #255 = ADDC8Oo
  { 256,	3,	1,	4,	245,	0|(1ULL<<MCID::Commutable), 0xcULL, nullptr, ImplicitList9, OperandInfo50, -1 ,nullptr },  // Inst #256 = ADDC8o
  { 257,	3,	1,	4,	115,	0|(1ULL<<MCID::Commutable), 0xcULL, nullptr, ImplicitList7, OperandInfo49, -1 ,nullptr },  // Inst #257 = ADDCO
  { 258,	3,	1,	4,	245,	0|(1ULL<<MCID::Commutable), 0xcULL, nullptr, ImplicitList8, OperandInfo49, -1 ,nullptr },  // Inst #258 = ADDCOo
  { 259,	3,	1,	4,	245,	0|(1ULL<<MCID::Commutable), 0xcULL, nullptr, ImplicitList9, OperandInfo49, -1 ,nullptr },  // Inst #259 = ADDCo
  { 260,	3,	1,	4,	115,	0|(1ULL<<MCID::Commutable), 0x8ULL, ImplicitList6, ImplicitList6, OperandInfo49, -1 ,nullptr },  // Inst #260 = ADDE
  { 261,	3,	1,	4,	115,	0|(1ULL<<MCID::Commutable), 0x8ULL, ImplicitList6, ImplicitList6, OperandInfo50, -1 ,nullptr },  // Inst #261 = ADDE8
  { 262,	3,	1,	4,	115,	0|(1ULL<<MCID::Commutable), 0x8ULL, ImplicitList6, ImplicitList7, OperandInfo50, -1 ,nullptr },  // Inst #262 = ADDE8O
  { 263,	3,	1,	4,	115,	0|(1ULL<<MCID::Commutable), 0x8ULL, ImplicitList6, ImplicitList8, OperandInfo50, -1 ,nullptr },  // Inst #263 = ADDE8Oo
  { 264,	3,	1,	4,	115,	0|(1ULL<<MCID::Commutable), 0x8ULL, ImplicitList6, ImplicitList9, OperandInfo50, -1 ,nullptr },  // Inst #264 = ADDE8o
  { 265,	3,	1,	4,	115,	0|(1ULL<<MCID::Commutable), 0x8ULL, ImplicitList6, ImplicitList7, OperandInfo49, -1 ,nullptr },  // Inst #265 = ADDEO
  { 266,	3,	1,	4,	115,	0|(1ULL<<MCID::Commutable), 0x8ULL, ImplicitList6, ImplicitList8, OperandInfo49, -1 ,nullptr },  // Inst #266 = ADDEOo
  { 267,	3,	1,	4,	115,	0|(1ULL<<MCID::Commutable), 0x8ULL, ImplicitList6, ImplicitList9, OperandInfo49, -1 ,nullptr },  // Inst #267 = ADDEo
  { 268,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo52, -1 ,nullptr },  // Inst #268 = ADDI
  { 269,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo51, -1 ,nullptr },  // Inst #269 = ADDI8
  { 270,	3,	1,	4,	115,	0, 0xcULL, nullptr, ImplicitList6, OperandInfo36, -1 ,nullptr },  // Inst #270 = ADDIC
  { 271,	3,	1,	4,	115,	0, 0x8ULL, nullptr, ImplicitList6, OperandInfo35, -1 ,nullptr },  // Inst #271 = ADDIC8
  { 272,	3,	1,	4,	115,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, ImplicitList9, OperandInfo36, -1 ,nullptr },  // Inst #272 = ADDICo
  { 273,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo52, -1 ,nullptr },  // Inst #273 = ADDIS
  { 274,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo51, -1 ,nullptr },  // Inst #274 = ADDIS8
  { 275,	3,	1,	4,	0,	0, 0x0ULL, nullptr, nullptr, OperandInfo51, -1 ,nullptr },  // Inst #275 = ADDISdtprelHA
  { 276,	3,	1,	4,	0,	0, 0x0ULL, nullptr, nullptr, OperandInfo52, -1 ,nullptr },  // Inst #276 = ADDISdtprelHA32
  { 277,	3,	1,	4,	0,	0, 0x0ULL, nullptr, nullptr, OperandInfo51, -1 ,nullptr },  // Inst #277 = ADDISgotTprelHA
  { 278,	3,	1,	4,	0,	0, 0x0ULL, nullptr, nullptr, OperandInfo51, -1 ,nullptr },  // Inst #278 = ADDIStlsgdHA
  { 279,	3,	1,	4,	0,	0, 0x0ULL, nullptr, nullptr, OperandInfo51, -1 ,nullptr },  // Inst #279 = ADDIStlsldHA
  { 280,	3,	1,	4,	117,	0|(1ULL<<MCID::Rematerializable), 0x0ULL, nullptr, nullptr, OperandInfo51, -1 ,nullptr },  // Inst #280 = ADDIStocHA
  { 281,	3,	1,	4,	0,	0, 0x0ULL, nullptr, nullptr, OperandInfo51, -1 ,nullptr },  // Inst #281 = ADDIdtprelL
  { 282,	3,	1,	4,	0,	0, 0x0ULL, nullptr, nullptr, OperandInfo52, -1 ,nullptr },  // Inst #282 = ADDIdtprelL32
  { 283,	3,	1,	4,	0,	0, 0x0ULL, nullptr, nullptr, OperandInfo51, -1 ,nullptr },  // Inst #283 = ADDItlsgdL
  { 284,	3,	1,	4,	0,	0, 0x0ULL, nullptr, nullptr, OperandInfo52, -1 ,nullptr },  // Inst #284 = ADDItlsgdL32
  { 285,	4,	1,	4,	0,	0|(1ULL<<MCID::ExtraSrcRegAllocReq)|(1ULL<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList10, OperandInfo53, -1 ,nullptr },  // Inst #285 = ADDItlsgdLADDR
  { 286,	4,	1,	4,	0,	0|(1ULL<<MCID::ExtraSrcRegAllocReq)|(1ULL<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList11, OperandInfo54, -1 ,nullptr },  // Inst #286 = ADDItlsgdLADDR32
  { 287,	3,	1,	4,	0,	0, 0x0ULL, nullptr, nullptr, OperandInfo51, -1 ,nullptr },  // Inst #287 = ADDItlsldL
  { 288,	3,	1,	4,	0,	0, 0x0ULL, nullptr, nullptr, OperandInfo52, -1 ,nullptr },  // Inst #288 = ADDItlsldL32
  { 289,	4,	1,	4,	0,	0|(1ULL<<MCID::ExtraSrcRegAllocReq)|(1ULL<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList10, OperandInfo53, -1 ,nullptr },  // Inst #289 = ADDItlsldLADDR
  { 290,	4,	1,	4,	0,	0|(1ULL<<MCID::ExtraSrcRegAllocReq)|(1ULL<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList11, OperandInfo54, -1 ,nullptr },  // Inst #290 = ADDItlsldLADDR32
  { 291,	3,	1,	4,	117,	0|(1ULL<<MCID::Rematerializable), 0x0ULL, nullptr, nullptr, OperandInfo51, -1 ,nullptr },  // Inst #291 = ADDItocL
  { 292,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList6, OperandInfo37, -1 ,nullptr },  // Inst #292 = ADDME
  { 293,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList6, OperandInfo55, -1 ,nullptr },  // Inst #293 = ADDME8
  { 294,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList7, OperandInfo55, -1 ,nullptr },  // Inst #294 = ADDME8O
  { 295,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList8, OperandInfo55, -1 ,nullptr },  // Inst #295 = ADDME8Oo
  { 296,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList9, OperandInfo55, -1 ,nullptr },  // Inst #296 = ADDME8o
  { 297,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList7, OperandInfo37, -1 ,nullptr },  // Inst #297 = ADDMEO
  { 298,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList8, OperandInfo37, -1 ,nullptr },  // Inst #298 = ADDMEOo
  { 299,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList9, OperandInfo37, -1 ,nullptr },  // Inst #299 = ADDMEo
  { 300,	2,	1,	4,	288,	0, 0x8ULL, nullptr, nullptr, OperandInfo56, -1 ,nullptr },  // Inst #300 = ADDPCIS
  { 301,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList6, OperandInfo37, -1 ,nullptr },  // Inst #301 = ADDZE
  { 302,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList6, OperandInfo55, -1 ,nullptr },  // Inst #302 = ADDZE8
  { 303,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList7, OperandInfo55, -1 ,nullptr },  // Inst #303 = ADDZE8O
  { 304,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList8, OperandInfo55, -1 ,nullptr },  // Inst #304 = ADDZE8Oo
  { 305,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList9, OperandInfo55, -1 ,nullptr },  // Inst #305 = ADDZE8o
  { 306,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList7, OperandInfo37, -1 ,nullptr },  // Inst #306 = ADDZEO
  { 307,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList8, OperandInfo37, -1 ,nullptr },  // Inst #307 = ADDZEOo
  { 308,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList9, OperandInfo37, -1 ,nullptr },  // Inst #308 = ADDZEo
  { 309,	2,	0,	4,	0,	0, 0x0ULL, ImplicitList12, ImplicitList12, OperandInfo7, -1 ,nullptr },  // Inst #309 = ADJCALLSTACKDOWN
  { 310,	2,	0,	4,	0,	0, 0x0ULL, ImplicitList12, ImplicitList12, OperandInfo7, -1 ,nullptr },  // Inst #310 = ADJCALLSTACKUP
  { 311,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #311 = AND
  { 312,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #312 = AND8
  { 313,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #313 = AND8o
  { 314,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #314 = ANDC
  { 315,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #315 = ANDC8
  { 316,	3,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #316 = ANDC8o
  { 317,	3,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #317 = ANDCo
  { 318,	3,	1,	4,	115,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo36, -1 ,nullptr },  // Inst #318 = ANDISo
  { 319,	3,	1,	4,	115,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo35, -1 ,nullptr },  // Inst #319 = ANDISo8
  { 320,	3,	1,	4,	115,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo36, -1 ,nullptr },  // Inst #320 = ANDIo
  { 321,	3,	1,	4,	115,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo35, -1 ,nullptr },  // Inst #321 = ANDIo8
  { 322,	2,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo57, -1 ,nullptr },  // Inst #322 = ANDIo_1_EQ_BIT
  { 323,	2,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo58, -1 ,nullptr },  // Inst #323 = ANDIo_1_EQ_BIT8
  { 324,	2,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo57, -1 ,nullptr },  // Inst #324 = ANDIo_1_GT_BIT
  { 325,	2,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo58, -1 ,nullptr },  // Inst #325 = ANDIo_1_GT_BIT8
  { 326,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #326 = ANDo
  { 327,	5,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo59, -1 ,nullptr },  // Inst #327 = ATOMIC_CMP_SWAP_I16
  { 328,	5,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo59, -1 ,nullptr },  // Inst #328 = ATOMIC_CMP_SWAP_I32
  { 329,	5,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo60, -1 ,nullptr },  // Inst #329 = ATOMIC_CMP_SWAP_I64
  { 330,	5,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo59, -1 ,nullptr },  // Inst #330 = ATOMIC_CMP_SWAP_I8
  { 331,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #331 = ATOMIC_LOAD_ADD_I16
  { 332,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #332 = ATOMIC_LOAD_ADD_I32
  { 333,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo62, -1 ,nullptr },  // Inst #333 = ATOMIC_LOAD_ADD_I64
  { 334,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #334 = ATOMIC_LOAD_ADD_I8
  { 335,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #335 = ATOMIC_LOAD_AND_I16
  { 336,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #336 = ATOMIC_LOAD_AND_I32
  { 337,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo62, -1 ,nullptr },  // Inst #337 = ATOMIC_LOAD_AND_I64
  { 338,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #338 = ATOMIC_LOAD_AND_I8
  { 339,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #339 = ATOMIC_LOAD_MAX_I16
  { 340,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #340 = ATOMIC_LOAD_MAX_I32
  { 341,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo62, -1 ,nullptr },  // Inst #341 = ATOMIC_LOAD_MAX_I64
  { 342,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #342 = ATOMIC_LOAD_MAX_I8
  { 343,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #343 = ATOMIC_LOAD_MIN_I16
  { 344,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #344 = ATOMIC_LOAD_MIN_I32
  { 345,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo62, -1 ,nullptr },  // Inst #345 = ATOMIC_LOAD_MIN_I64
  { 346,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #346 = ATOMIC_LOAD_MIN_I8
  { 347,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #347 = ATOMIC_LOAD_NAND_I16
  { 348,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #348 = ATOMIC_LOAD_NAND_I32
  { 349,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo62, -1 ,nullptr },  // Inst #349 = ATOMIC_LOAD_NAND_I64
  { 350,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #350 = ATOMIC_LOAD_NAND_I8
  { 351,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #351 = ATOMIC_LOAD_OR_I16
  { 352,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #352 = ATOMIC_LOAD_OR_I32
  { 353,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo62, -1 ,nullptr },  // Inst #353 = ATOMIC_LOAD_OR_I64
  { 354,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #354 = ATOMIC_LOAD_OR_I8
  { 355,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #355 = ATOMIC_LOAD_SUB_I16
  { 356,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #356 = ATOMIC_LOAD_SUB_I32
  { 357,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo62, -1 ,nullptr },  // Inst #357 = ATOMIC_LOAD_SUB_I64
  { 358,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #358 = ATOMIC_LOAD_SUB_I8
  { 359,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #359 = ATOMIC_LOAD_UMAX_I16
  { 360,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #360 = ATOMIC_LOAD_UMAX_I32
  { 361,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo62, -1 ,nullptr },  // Inst #361 = ATOMIC_LOAD_UMAX_I64
  { 362,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #362 = ATOMIC_LOAD_UMAX_I8
  { 363,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #363 = ATOMIC_LOAD_UMIN_I16
  { 364,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #364 = ATOMIC_LOAD_UMIN_I32
  { 365,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo62, -1 ,nullptr },  // Inst #365 = ATOMIC_LOAD_UMIN_I64
  { 366,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #366 = ATOMIC_LOAD_UMIN_I8
  { 367,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #367 = ATOMIC_LOAD_XOR_I16
  { 368,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #368 = ATOMIC_LOAD_XOR_I32
  { 369,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo62, -1 ,nullptr },  // Inst #369 = ATOMIC_LOAD_XOR_I64
  { 370,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #370 = ATOMIC_LOAD_XOR_I8
  { 371,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #371 = ATOMIC_SWAP_I16
  { 372,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #372 = ATOMIC_SWAP_I32
  { 373,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo62, -1 ,nullptr },  // Inst #373 = ATOMIC_SWAP_I64
  { 374,	4,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList5, OperandInfo61, -1 ,nullptr },  // Inst #374 = ATOMIC_SWAP_I8
  { 375,	0,	0,	4,	296,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #375 = ATTN
  { 376,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #376 = B
  { 377,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #377 = BA
  { 378,	2,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo63, -1 ,nullptr },  // Inst #378 = BC
  { 379,	3,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo64, -1 ,nullptr },  // Inst #379 = BCC
  { 380,	3,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo64, -1 ,nullptr },  // Inst #380 = BCCA
  { 381,	2,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, nullptr, OperandInfo65, -1 ,nullptr },  // Inst #381 = BCCCTR
  { 382,	2,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, nullptr, OperandInfo65, -1 ,nullptr },  // Inst #382 = BCCCTR8
  { 383,	2,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList16, OperandInfo65, -1 ,nullptr },  // Inst #383 = BCCCTRL
  { 384,	2,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList17, ImplicitList18, OperandInfo65, -1 ,nullptr },  // Inst #384 = BCCCTRL8
  { 385,	3,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList2, ImplicitList16, OperandInfo64, -1 ,nullptr },  // Inst #385 = BCCL
  { 386,	3,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList2, ImplicitList16, OperandInfo64, -1 ,nullptr },  // Inst #386 = BCCLA
  { 387,	2,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList19, nullptr, OperandInfo65, -1 ,nullptr },  // Inst #387 = BCCLR
  { 388,	2,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList19, ImplicitList16, OperandInfo65, -1 ,nullptr },  // Inst #388 = BCCLRL
  { 389,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, nullptr, OperandInfo66, -1 ,nullptr },  // Inst #389 = BCCTR
  { 390,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, nullptr, OperandInfo66, -1 ,nullptr },  // Inst #390 = BCCTR8
  { 391,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, nullptr, OperandInfo66, -1 ,nullptr },  // Inst #391 = BCCTR8n
  { 392,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList16, OperandInfo66, -1 ,nullptr },  // Inst #392 = BCCTRL
  { 393,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList17, ImplicitList18, OperandInfo66, -1 ,nullptr },  // Inst #393 = BCCTRL8
  { 394,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList17, ImplicitList18, OperandInfo66, -1 ,nullptr },  // Inst #394 = BCCTRL8n
  { 395,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList16, OperandInfo66, -1 ,nullptr },  // Inst #395 = BCCTRLn
  { 396,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, nullptr, OperandInfo66, -1 ,nullptr },  // Inst #396 = BCCTRn
  { 397,	3,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList20, OperandInfo67, -1 ,nullptr },  // Inst #397 = BCDCFNo
  { 398,	3,	1,	4,	168,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList20, OperandInfo67, -1 ,nullptr },  // Inst #398 = BCDCFSQo
  { 399,	3,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList20, OperandInfo67, -1 ,nullptr },  // Inst #399 = BCDCFZo
  { 400,	3,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #400 = BCDCPSGNo
  { 401,	2,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList20, OperandInfo69, -1 ,nullptr },  // Inst #401 = BCDCTNo
  { 402,	2,	1,	4,	166,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList20, OperandInfo69, -1 ,nullptr },  // Inst #402 = BCDCTSQo
  { 403,	3,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList20, OperandInfo67, -1 ,nullptr },  // Inst #403 = BCDCTZo
  { 404,	3,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList20, OperandInfo67, -1 ,nullptr },  // Inst #404 = BCDSETSGNo
  { 405,	4,	1,	4,	165,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList20, OperandInfo70, -1 ,nullptr },  // Inst #405 = BCDSRo
  { 406,	4,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList20, OperandInfo70, -1 ,nullptr },  // Inst #406 = BCDSo
  { 407,	4,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList20, OperandInfo70, -1 ,nullptr },  // Inst #407 = BCDTRUNCo
  { 408,	3,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #408 = BCDUSo
  { 409,	3,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #409 = BCDUTRUNCo
  { 410,	2,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList2, ImplicitList16, OperandInfo63, -1 ,nullptr },  // Inst #410 = BCL
  { 411,	1,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList19, nullptr, OperandInfo66, -1 ,nullptr },  // Inst #411 = BCLR
  { 412,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList19, ImplicitList16, OperandInfo66, -1 ,nullptr },  // Inst #412 = BCLRL
  { 413,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList19, ImplicitList16, OperandInfo66, -1 ,nullptr },  // Inst #413 = BCLRLn
  { 414,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo66, -1 ,nullptr },  // Inst #414 = BCLRn
  { 415,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList2, ImplicitList16, OperandInfo2, -1 ,nullptr },  // Inst #415 = BCLalways
  { 416,	2,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList2, ImplicitList16, OperandInfo63, -1 ,nullptr },  // Inst #416 = BCLn
  { 417,	0,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, nullptr, nullptr, -1 ,nullptr },  // Inst #417 = BCTR
  { 418,	0,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, nullptr, nullptr, -1 ,nullptr },  // Inst #418 = BCTR8
  { 419,	0,	0,	4,	287,	0|(1ULL<<MCID::Call), 0x38ULL, ImplicitList15, ImplicitList16, nullptr, -1 ,nullptr },  // Inst #419 = BCTRL
  { 420,	0,	0,	4,	287,	0|(1ULL<<MCID::Call), 0x38ULL, ImplicitList17, ImplicitList18, nullptr, -1 ,nullptr },  // Inst #420 = BCTRL8
  { 421,	2,	0,	8,	287,	0|(1ULL<<MCID::Call), 0x38ULL, ImplicitList17, ImplicitList21, OperandInfo71, -1 ,nullptr },  // Inst #421 = BCTRL8_LDinto_toc
  { 422,	2,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo63, -1 ,nullptr },  // Inst #422 = BCn
  { 423,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #423 = BDNZ
  { 424,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList14, OperandInfo2, -1 ,nullptr },  // Inst #424 = BDNZ8
  { 425,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #425 = BDNZA
  { 426,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #426 = BDNZAm
  { 427,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #427 = BDNZAp
  { 428,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #428 = BDNZL
  { 429,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #429 = BDNZLA
  { 430,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #430 = BDNZLAm
  { 431,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #431 = BDNZLAp
  { 432,	0,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList13, nullptr, -1 ,nullptr },  // Inst #432 = BDNZLR
  { 433,	0,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList23, ImplicitList14, nullptr, -1 ,nullptr },  // Inst #433 = BDNZLR8
  { 434,	0,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList13, nullptr, -1 ,nullptr },  // Inst #434 = BDNZLRL
  { 435,	0,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList13, nullptr, -1 ,nullptr },  // Inst #435 = BDNZLRLm
  { 436,	0,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList13, nullptr, -1 ,nullptr },  // Inst #436 = BDNZLRLp
  { 437,	0,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList13, nullptr, -1 ,nullptr },  // Inst #437 = BDNZLRm
  { 438,	0,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList13, nullptr, -1 ,nullptr },  // Inst #438 = BDNZLRp
  { 439,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #439 = BDNZLm
  { 440,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #440 = BDNZLp
  { 441,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #441 = BDNZm
  { 442,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #442 = BDNZp
  { 443,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #443 = BDZ
  { 444,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList14, OperandInfo2, -1 ,nullptr },  // Inst #444 = BDZ8
  { 445,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #445 = BDZA
  { 446,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #446 = BDZAm
  { 447,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #447 = BDZAp
  { 448,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #448 = BDZL
  { 449,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #449 = BDZLA
  { 450,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #450 = BDZLAm
  { 451,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #451 = BDZLAp
  { 452,	0,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList13, nullptr, -1 ,nullptr },  // Inst #452 = BDZLR
  { 453,	0,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList23, ImplicitList14, nullptr, -1 ,nullptr },  // Inst #453 = BDZLR8
  { 454,	0,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList13, nullptr, -1 ,nullptr },  // Inst #454 = BDZLRL
  { 455,	0,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList13, nullptr, -1 ,nullptr },  // Inst #455 = BDZLRLm
  { 456,	0,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList13, nullptr, -1 ,nullptr },  // Inst #456 = BDZLRLp
  { 457,	0,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList13, nullptr, -1 ,nullptr },  // Inst #457 = BDZLRm
  { 458,	0,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList13, nullptr, -1 ,nullptr },  // Inst #458 = BDZLRp
  { 459,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #459 = BDZLm
  { 460,	1,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #460 = BDZLp
  { 461,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #461 = BDZm
  { 462,	1,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList13, OperandInfo2, -1 ,nullptr },  // Inst #462 = BDZp
  { 463,	1,	0,	4,	287,	0|(1ULL<<MCID::Call), 0x38ULL, ImplicitList2, ImplicitList16, OperandInfo72, -1 ,nullptr },  // Inst #463 = BL
  { 464,	1,	0,	4,	287,	0|(1ULL<<MCID::Call), 0x38ULL, ImplicitList2, ImplicitList18, OperandInfo72, -1 ,nullptr },  // Inst #464 = BL8
  { 465,	1,	0,	8,	287,	0|(1ULL<<MCID::Call), 0x38ULL, ImplicitList2, ImplicitList18, OperandInfo72, -1 ,nullptr },  // Inst #465 = BL8_NOP
  { 466,	2,	0,	8,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList2, ImplicitList18, OperandInfo7, -1 ,nullptr },  // Inst #466 = BL8_NOP_TLS
  { 467,	2,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList2, ImplicitList18, OperandInfo7, -1 ,nullptr },  // Inst #467 = BL8_TLS
  { 468,	2,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList2, ImplicitList18, OperandInfo7, -1 ,nullptr },  // Inst #468 = BL8_TLS_
  { 469,	1,	0,	4,	287,	0|(1ULL<<MCID::Call), 0x38ULL, ImplicitList2, ImplicitList16, OperandInfo2, -1 ,nullptr },  // Inst #469 = BLA
  { 470,	1,	0,	4,	287,	0|(1ULL<<MCID::Call), 0x38ULL, ImplicitList2, ImplicitList18, OperandInfo2, -1 ,nullptr },  // Inst #470 = BLA8
  { 471,	1,	0,	8,	287,	0|(1ULL<<MCID::Call), 0x38ULL, ImplicitList2, ImplicitList18, OperandInfo2, -1 ,nullptr },  // Inst #471 = BLA8_NOP
  { 472,	0,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x38ULL, ImplicitList19, nullptr, nullptr, -1 ,nullptr },  // Inst #472 = BLR
  { 473,	0,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator), 0x38ULL, ImplicitList24, nullptr, nullptr, -1 ,nullptr },  // Inst #473 = BLR8
  { 474,	0,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList19, ImplicitList16, nullptr, -1 ,nullptr },  // Inst #474 = BLRL
  { 475,	1,	0,	8,	287,	0|(1ULL<<MCID::Call), 0x38ULL, ImplicitList2, ImplicitList16, OperandInfo72, -1 ,nullptr },  // Inst #475 = BL_NOP
  { 476,	2,	0,	4,	287,	0|(1ULL<<MCID::Call)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList2, ImplicitList16, OperandInfo7, -1 ,nullptr },  // Inst #476 = BL_TLS
  { 477,	3,	1,	4,	110,	0, 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #477 = BPERMD
  { 478,	3,	1,	4,	291,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #478 = BRINC
  { 479,	0,	0,	4,	296,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #479 = CLRBHRB
  { 480,	3,	1,	4,	110,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #480 = CMPB
  { 481,	3,	1,	4,	110,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #481 = CMPB8
  { 482,	3,	1,	4,	114,	0|(1ULL<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo73, -1 ,nullptr },  // Inst #482 = CMPD
  { 483,	3,	1,	4,	114,	0|(1ULL<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo74, -1 ,nullptr },  // Inst #483 = CMPDI
  { 484,	3,	1,	4,	103,	0|(1ULL<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo75, -1 ,nullptr },  // Inst #484 = CMPEQB
  { 485,	3,	1,	4,	114,	0|(1ULL<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo73, -1 ,nullptr },  // Inst #485 = CMPLD
  { 486,	3,	1,	4,	114,	0|(1ULL<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo74, -1 ,nullptr },  // Inst #486 = CMPLDI
  { 487,	3,	1,	4,	114,	0|(1ULL<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo76, -1 ,nullptr },  // Inst #487 = CMPLW
  { 488,	3,	1,	4,	114,	0|(1ULL<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo77, -1 ,nullptr },  // Inst #488 = CMPLWI
  { 489,	4,	1,	4,	103,	0|(1ULL<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo78, -1 ,nullptr },  // Inst #489 = CMPRB
  { 490,	4,	1,	4,	103,	0|(1ULL<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo78, -1 ,nullptr },  // Inst #490 = CMPRB8
  { 491,	3,	1,	4,	114,	0|(1ULL<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo76, -1 ,nullptr },  // Inst #491 = CMPW
  { 492,	3,	1,	4,	114,	0|(1ULL<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo77, -1 ,nullptr },  // Inst #492 = CMPWI
  { 493,	2,	1,	4,	110,	0, 0x8ULL, nullptr, nullptr, OperandInfo55, -1 ,nullptr },  // Inst #493 = CNTLZD
  { 494,	2,	1,	4,	110,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo55, -1 ,nullptr },  // Inst #494 = CNTLZDo
  { 495,	2,	1,	4,	110,	0, 0x8ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #495 = CNTLZW
  { 496,	2,	1,	4,	110,	0, 0x8ULL, nullptr, nullptr, OperandInfo55, -1 ,nullptr },  // Inst #496 = CNTLZW8
  { 497,	2,	1,	4,	110,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo55, -1 ,nullptr },  // Inst #497 = CNTLZW8o
  { 498,	2,	1,	4,	110,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo37, -1 ,nullptr },  // Inst #498 = CNTLZWo
  { 499,	2,	1,	4,	110,	0, 0x8ULL, nullptr, nullptr, OperandInfo55, -1 ,nullptr },  // Inst #499 = CNTTZD
  { 500,	2,	1,	4,	110,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo55, -1 ,nullptr },  // Inst #500 = CNTTZDo
  { 501,	2,	1,	4,	110,	0, 0x8ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #501 = CNTTZW
  { 502,	2,	1,	4,	110,	0, 0x8ULL, nullptr, nullptr, OperandInfo55, -1 ,nullptr },  // Inst #502 = CNTTZW8
  { 503,	2,	1,	4,	110,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo55, -1 ,nullptr },  // Inst #503 = CNTTZW8o
  { 504,	2,	1,	4,	110,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo37, -1 ,nullptr },  // Inst #504 = CNTTZWo
  { 505,	0,	0,	4,	183,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #505 = CP_ABORT
  { 506,	3,	0,	4,	176,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #506 = CP_COPY
  { 507,	3,	0,	4,	176,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #507 = CP_COPY8
  { 508,	3,	0,	4,	177,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #508 = CP_PASTE
  { 509,	3,	0,	4,	177,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #509 = CP_PASTE8
  { 510,	3,	0,	4,	203,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #510 = CP_PASTE8o
  { 511,	3,	0,	4,	203,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo36, -1 ,nullptr },  // Inst #511 = CP_PASTEo
  { 512,	0,	0,	4,	129,	0, 0x0ULL, nullptr, ImplicitList25, nullptr, -1 ,nullptr },  // Inst #512 = CR6SET
  { 513,	0,	0,	4,	129,	0, 0x0ULL, nullptr, ImplicitList25, nullptr, -1 ,nullptr },  // Inst #513 = CR6UNSET
  { 514,	3,	1,	4,	129,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo79, -1 ,nullptr },  // Inst #514 = CRAND
  { 515,	3,	1,	4,	129,	0, 0x0ULL, nullptr, nullptr, OperandInfo79, -1 ,nullptr },  // Inst #515 = CRANDC
  { 516,	3,	1,	4,	129,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo79, -1 ,nullptr },  // Inst #516 = CREQV
  { 517,	3,	1,	4,	129,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo79, -1 ,nullptr },  // Inst #517 = CRNAND
  { 518,	3,	1,	4,	129,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo79, -1 ,nullptr },  // Inst #518 = CRNOR
  { 519,	3,	1,	4,	129,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo79, -1 ,nullptr },  // Inst #519 = CROR
  { 520,	3,	1,	4,	129,	0, 0x0ULL, nullptr, nullptr, OperandInfo79, -1 ,nullptr },  // Inst #520 = CRORC
  { 521,	1,	1,	4,	129,	0|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo66, -1 ,nullptr },  // Inst #521 = CRSET
  { 522,	1,	1,	4,	129,	0|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo66, -1 ,nullptr },  // Inst #522 = CRUNSET
  { 523,	3,	1,	4,	129,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo79, -1 ,nullptr },  // Inst #523 = CRXOR
  { 524,	3,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo64, -1 ,nullptr },  // Inst #524 = CTRL_DEP
  { 525,	2,	1,	4,	181,	0, 0x8ULL, nullptr, nullptr, OperandInfo56, -1 ,nullptr },  // Inst #525 = DARN
  { 526,	2,	0,	4,	314,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #526 = DCBA
  { 527,	3,	0,	4,	175,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo80, -1 ,nullptr },  // Inst #527 = DCBF
  { 528,	2,	0,	4,	175,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #528 = DCBFEP
  { 529,	2,	0,	4,	314,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #529 = DCBI
  { 530,	2,	0,	4,	175,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #530 = DCBST
  { 531,	2,	0,	4,	175,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #531 = DCBSTEP
  { 532,	3,	0,	4,	175,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x2ULL, nullptr, nullptr, OperandInfo80, -1 ,nullptr },  // Inst #532 = DCBT
  { 533,	3,	0,	4,	175,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39, -1 ,nullptr },  // Inst #533 = DCBTEP
  { 534,	3,	0,	4,	175,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x2ULL, nullptr, nullptr, OperandInfo80, -1 ,nullptr },  // Inst #534 = DCBTST
  { 535,	3,	0,	4,	175,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39, -1 ,nullptr },  // Inst #535 = DCBTSTEP
  { 536,	2,	0,	4,	175,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #536 = DCBZ
  { 537,	2,	0,	4,	175,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #537 = DCBZEP
  { 538,	2,	0,	4,	175,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #538 = DCBZL
  { 539,	2,	0,	4,	175,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #539 = DCBZLEP
  { 540,	2,	0,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #540 = DCCCI
  { 541,	3,	1,	4,	238,	0, 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #541 = DIVD
  { 542,	3,	1,	4,	239,	0, 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #542 = DIVDE
  { 543,	3,	1,	4,	239,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo50, -1 ,nullptr },  // Inst #543 = DIVDEO
  { 544,	3,	1,	4,	243,	0, 0x8ULL, nullptr, ImplicitList4, OperandInfo50, -1 ,nullptr },  // Inst #544 = DIVDEOo
  { 545,	3,	1,	4,	239,	0, 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #545 = DIVDEU
  { 546,	3,	1,	4,	239,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo50, -1 ,nullptr },  // Inst #546 = DIVDEUO
  { 547,	3,	1,	4,	243,	0, 0x8ULL, nullptr, ImplicitList4, OperandInfo50, -1 ,nullptr },  // Inst #547 = DIVDEUOo
  { 548,	3,	1,	4,	243,	0, 0xdULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #548 = DIVDEUo
  { 549,	3,	1,	4,	243,	0, 0xdULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #549 = DIVDEo
  { 550,	3,	1,	4,	238,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo50, -1 ,nullptr },  // Inst #550 = DIVDO
  { 551,	3,	1,	4,	241,	0, 0x8ULL, nullptr, ImplicitList4, OperandInfo50, -1 ,nullptr },  // Inst #551 = DIVDOo
  { 552,	3,	1,	4,	238,	0, 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #552 = DIVDU
  { 553,	3,	1,	4,	238,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo50, -1 ,nullptr },  // Inst #553 = DIVDUO
  { 554,	3,	1,	4,	241,	0, 0x8ULL, nullptr, ImplicitList4, OperandInfo50, -1 ,nullptr },  // Inst #554 = DIVDUOo
  { 555,	3,	1,	4,	241,	0, 0xdULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #555 = DIVDUo
  { 556,	3,	1,	4,	241,	0, 0xdULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #556 = DIVDo
  { 557,	3,	1,	4,	236,	0, 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #557 = DIVW
  { 558,	3,	1,	4,	237,	0, 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #558 = DIVWE
  { 559,	3,	1,	4,	237,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo49, -1 ,nullptr },  // Inst #559 = DIVWEO
  { 560,	3,	1,	4,	242,	0, 0x8ULL, nullptr, ImplicitList4, OperandInfo49, -1 ,nullptr },  // Inst #560 = DIVWEOo
  { 561,	3,	1,	4,	237,	0, 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #561 = DIVWEU
  { 562,	3,	1,	4,	237,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo49, -1 ,nullptr },  // Inst #562 = DIVWEUO
  { 563,	3,	1,	4,	242,	0, 0x8ULL, nullptr, ImplicitList4, OperandInfo49, -1 ,nullptr },  // Inst #563 = DIVWEUOo
  { 564,	3,	1,	4,	242,	0, 0xdULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #564 = DIVWEUo
  { 565,	3,	1,	4,	242,	0, 0xdULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #565 = DIVWEo
  { 566,	3,	1,	4,	236,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo49, -1 ,nullptr },  // Inst #566 = DIVWO
  { 567,	3,	1,	4,	240,	0, 0x8ULL, nullptr, ImplicitList4, OperandInfo49, -1 ,nullptr },  // Inst #567 = DIVWOo
  { 568,	3,	1,	4,	236,	0, 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #568 = DIVWU
  { 569,	3,	1,	4,	236,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo49, -1 ,nullptr },  // Inst #569 = DIVWUO
  { 570,	3,	1,	4,	240,	0, 0x8ULL, nullptr, ImplicitList4, OperandInfo49, -1 ,nullptr },  // Inst #570 = DIVWUOo
  { 571,	3,	1,	4,	240,	0, 0xdULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #571 = DIVWUo
  { 572,	3,	1,	4,	240,	0, 0xdULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #572 = DIVWo
  { 573,	1,	0,	4,	299,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2, PPC::DeprecatedDST ,nullptr },  // Inst #573 = DSS
  { 574,	0,	0,	4,	299,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, PPC::DeprecatedDST ,nullptr },  // Inst #574 = DSSALL
  { 575,	3,	0,	4,	299,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo81, PPC::DeprecatedDST ,nullptr },  // Inst #575 = DST
  { 576,	3,	0,	4,	299,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo82, PPC::DeprecatedDST ,nullptr },  // Inst #576 = DST64
  { 577,	3,	0,	4,	299,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo81, PPC::DeprecatedDST ,nullptr },  // Inst #577 = DSTST
  { 578,	3,	0,	4,	299,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo82, PPC::DeprecatedDST ,nullptr },  // Inst #578 = DSTST64
  { 579,	3,	0,	4,	299,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo81, PPC::DeprecatedDST ,nullptr },  // Inst #579 = DSTSTT
  { 580,	3,	0,	4,	299,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo82, PPC::DeprecatedDST ,nullptr },  // Inst #580 = DSTSTT64
  { 581,	3,	0,	4,	299,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo81, PPC::DeprecatedDST ,nullptr },  // Inst #581 = DSTT
  { 582,	3,	0,	4,	299,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo82, PPC::DeprecatedDST ,nullptr },  // Inst #582 = DSTT64
  { 583,	4,	1,	4,	0,	0, 0x0ULL, ImplicitList12, ImplicitList12, OperandInfo83, -1 ,nullptr },  // Inst #583 = DYNALLOC
  { 584,	4,	1,	4,	0,	0, 0x0ULL, ImplicitList26, ImplicitList26, OperandInfo84, -1 ,nullptr },  // Inst #584 = DYNALLOC8
  { 585,	3,	1,	4,	0,	0, 0x0ULL, nullptr, nullptr, OperandInfo85, -1 ,nullptr },  // Inst #585 = DYNAREAOFFSET
  { 586,	3,	1,	4,	0,	0, 0x0ULL, nullptr, nullptr, OperandInfo85, -1 ,nullptr },  // Inst #586 = DYNAREAOFFSET8
  { 587,	2,	1,	4,	16,	0, 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #587 = EFDABS
  { 588,	3,	1,	4,	17,	0, 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #588 = EFDADD
  { 589,	2,	1,	4,	16,	0, 0x0ULL, nullptr, nullptr, OperandInfo88, -1 ,nullptr },  // Inst #589 = EFDCFS
  { 590,	2,	1,	4,	16,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo88, -1 ,nullptr },  // Inst #590 = EFDCFSF
  { 591,	2,	1,	4,	16,	0, 0x0ULL, nullptr, nullptr, OperandInfo89, -1 ,nullptr },  // Inst #591 = EFDCFSI
  { 592,	2,	1,	4,	16,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo89, -1 ,nullptr },  // Inst #592 = EFDCFSID
  { 593,	2,	1,	4,	16,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo88, -1 ,nullptr },  // Inst #593 = EFDCFUF
  { 594,	2,	1,	4,	16,	0, 0x0ULL, nullptr, nullptr, OperandInfo89, -1 ,nullptr },  // Inst #594 = EFDCFUI
  { 595,	2,	1,	4,	16,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo89, -1 ,nullptr },  // Inst #595 = EFDCFUID
  { 596,	3,	1,	4,	16,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #596 = EFDCMPEQ
  { 597,	3,	1,	4,	16,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #597 = EFDCMPGT
  { 598,	3,	1,	4,	16,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #598 = EFDCMPLT
  { 599,	2,	1,	4,	16,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo88, -1 ,nullptr },  // Inst #599 = EFDCTSF
  { 600,	2,	1,	4,	16,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo91, -1 ,nullptr },  // Inst #600 = EFDCTSI
  { 601,	2,	1,	4,	16,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo91, -1 ,nullptr },  // Inst #601 = EFDCTSIDZ
  { 602,	2,	1,	4,	16,	0, 0x0ULL, nullptr, nullptr, OperandInfo91, -1 ,nullptr },  // Inst #602 = EFDCTSIZ
  { 603,	2,	1,	4,	16,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo88, -1 ,nullptr },  // Inst #603 = EFDCTUF
  { 604,	2,	1,	4,	16,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo91, -1 ,nullptr },  // Inst #604 = EFDCTUI
  { 605,	2,	1,	4,	16,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo91, -1 ,nullptr },  // Inst #605 = EFDCTUIDZ
  { 606,	2,	1,	4,	16,	0, 0x0ULL, nullptr, nullptr, OperandInfo91, -1 ,nullptr },  // Inst #606 = EFDCTUIZ
  { 607,	3,	1,	4,	18,	0, 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #607 = EFDDIV
  { 608,	3,	1,	4,	16,	0, 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #608 = EFDMUL
  { 609,	2,	1,	4,	16,	0, 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #609 = EFDNABS
  { 610,	2,	1,	4,	16,	0, 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #610 = EFDNEG
  { 611,	3,	1,	4,	16,	0, 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #611 = EFDSUB
  { 612,	3,	1,	4,	16,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #612 = EFDTSTEQ
  { 613,	3,	1,	4,	16,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #613 = EFDTSTGT
  { 614,	3,	1,	4,	16,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #614 = EFDTSTLT
  { 615,	2,	1,	4,	19,	0, 0x0ULL, nullptr, nullptr, OperandInfo92, -1 ,nullptr },  // Inst #615 = EFSABS
  { 616,	3,	1,	4,	17,	0, 0x0ULL, nullptr, nullptr, OperandInfo93, -1 ,nullptr },  // Inst #616 = EFSADD
  { 617,	2,	1,	4,	19,	0, 0x0ULL, nullptr, nullptr, OperandInfo94, -1 ,nullptr },  // Inst #617 = EFSCFD
  { 618,	2,	1,	4,	19,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo92, -1 ,nullptr },  // Inst #618 = EFSCFSF
  { 619,	2,	1,	4,	19,	0, 0x0ULL, nullptr, nullptr, OperandInfo95, -1 ,nullptr },  // Inst #619 = EFSCFSI
  { 620,	2,	1,	4,	19,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo92, -1 ,nullptr },  // Inst #620 = EFSCFUF
  { 621,	2,	1,	4,	19,	0, 0x0ULL, nullptr, nullptr, OperandInfo95, -1 ,nullptr },  // Inst #621 = EFSCFUI
  { 622,	3,	1,	4,	20,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo96, -1 ,nullptr },  // Inst #622 = EFSCMPEQ
  { 623,	3,	1,	4,	20,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo96, -1 ,nullptr },  // Inst #623 = EFSCMPGT
  { 624,	3,	1,	4,	20,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo96, -1 ,nullptr },  // Inst #624 = EFSCMPLT
  { 625,	2,	1,	4,	19,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo92, -1 ,nullptr },  // Inst #625 = EFSCTSF
  { 626,	2,	1,	4,	19,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo97, -1 ,nullptr },  // Inst #626 = EFSCTSI
  { 627,	2,	1,	4,	19,	0, 0x0ULL, nullptr, nullptr, OperandInfo97, -1 ,nullptr },  // Inst #627 = EFSCTSIZ
  { 628,	2,	1,	4,	19,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo88, -1 ,nullptr },  // Inst #628 = EFSCTUF
  { 629,	2,	1,	4,	19,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo97, -1 ,nullptr },  // Inst #629 = EFSCTUI
  { 630,	2,	1,	4,	19,	0, 0x0ULL, nullptr, nullptr, OperandInfo97, -1 ,nullptr },  // Inst #630 = EFSCTUIZ
  { 631,	3,	1,	4,	18,	0, 0x0ULL, nullptr, nullptr, OperandInfo93, -1 ,nullptr },  // Inst #631 = EFSDIV
  { 632,	3,	1,	4,	21,	0, 0x0ULL, nullptr, nullptr, OperandInfo93, -1 ,nullptr },  // Inst #632 = EFSMUL
  { 633,	2,	1,	4,	21,	0, 0x0ULL, nullptr, nullptr, OperandInfo92, -1 ,nullptr },  // Inst #633 = EFSNABS
  { 634,	2,	1,	4,	21,	0, 0x0ULL, nullptr, nullptr, OperandInfo92, -1 ,nullptr },  // Inst #634 = EFSNEG
  { 635,	3,	1,	4,	19,	0, 0x0ULL, nullptr, nullptr, OperandInfo93, -1 ,nullptr },  // Inst #635 = EFSSUB
  { 636,	3,	1,	4,	20,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #636 = EFSTSTEQ
  { 637,	3,	1,	4,	20,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #637 = EFSTSTGT
  { 638,	3,	1,	4,	20,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #638 = EFSTSTLT
  { 639,	1,	0,	4,	0,	0|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo98, -1 ,nullptr },  // Inst #639 = EH_SjLj_LongJmp32
  { 640,	1,	0,	4,	0,	0|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo98, -1 ,nullptr },  // Inst #640 = EH_SjLj_LongJmp64
  { 641,	2,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList13, OperandInfo99, -1 ,nullptr },  // Inst #641 = EH_SjLj_SetJmp32
  { 642,	2,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList14, OperandInfo99, -1 ,nullptr },  // Inst #642 = EH_SjLj_SetJmp64
  { 643,	1,	0,	0,	0,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #643 = EH_SjLj_Setup
  { 644,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #644 = EQV
  { 645,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #645 = EQV8
  { 646,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #646 = EQV8o
  { 647,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #647 = EQVo
  { 648,	2,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #648 = EVABS
  { 649,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo100, -1 ,nullptr },  // Inst #649 = EVADDIW
  { 650,	2,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #650 = EVADDSMIAAW
  { 651,	2,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #651 = EVADDSSIAAW
  { 652,	2,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #652 = EVADDUMIAAW
  { 653,	2,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #653 = EVADDUSIAAW
  { 654,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #654 = EVADDW
  { 655,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #655 = EVAND
  { 656,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #656 = EVANDC
  { 657,	3,	1,	4,	292,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #657 = EVCMPEQ
  { 658,	3,	1,	4,	292,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #658 = EVCMPGTS
  { 659,	3,	1,	4,	292,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #659 = EVCMPGTU
  { 660,	3,	1,	4,	292,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #660 = EVCMPLTS
  { 661,	3,	1,	4,	292,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #661 = EVCMPLTU
  { 662,	2,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #662 = EVCNTLSW
  { 663,	2,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #663 = EVCNTLZW
  { 664,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #664 = EVDIVWS
  { 665,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #665 = EVDIVWU
  { 666,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #666 = EVEQV
  { 667,	2,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #667 = EVEXTSB
  { 668,	2,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #668 = EVEXTSH
  { 669,	2,	1,	4,	22,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #669 = EVFSABS
  { 670,	3,	1,	4,	23,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #670 = EVFSADD
  { 671,	2,	1,	4,	23,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #671 = EVFSCFSF
  { 672,	2,	1,	4,	23,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #672 = EVFSCFSI
  { 673,	2,	1,	4,	23,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #673 = EVFSCFUF
  { 674,	2,	1,	4,	23,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #674 = EVFSCFUI
  { 675,	3,	1,	4,	19,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #675 = EVFSCMPEQ
  { 676,	3,	1,	4,	19,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #676 = EVFSCMPGT
  { 677,	3,	1,	4,	19,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #677 = EVFSCMPLT
  { 678,	2,	1,	4,	23,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #678 = EVFSCTSF
  { 679,	2,	1,	4,	23,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #679 = EVFSCTSI
  { 680,	2,	1,	4,	23,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #680 = EVFSCTSIZ
  { 681,	2,	1,	4,	23,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #681 = EVFSCTUF
  { 682,	2,	1,	4,	23,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #682 = EVFSCTUI
  { 683,	2,	1,	4,	23,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #683 = EVFSCTUIZ
  { 684,	3,	1,	4,	18,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #684 = EVFSDIV
  { 685,	3,	1,	4,	23,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #685 = EVFSMUL
  { 686,	2,	1,	4,	22,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #686 = EVFSNABS
  { 687,	2,	1,	4,	22,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #687 = EVFSNEG
  { 688,	3,	1,	4,	23,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #688 = EVFSSUB
  { 689,	3,	1,	4,	22,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #689 = EVFSTSTEQ
  { 690,	3,	1,	4,	22,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #690 = EVFSTSTGT
  { 691,	3,	1,	4,	22,	0|(1ULL<<MCID::Compare)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo90, -1 ,nullptr },  // Inst #691 = EVFSTSTLT
  { 692,	3,	1,	4,	294,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #692 = EVLDD
  { 693,	3,	1,	4,	294,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #693 = EVLDDX
  { 694,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #694 = EVLDH
  { 695,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #695 = EVLDHX
  { 696,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #696 = EVLDW
  { 697,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #697 = EVLDWX
  { 698,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #698 = EVLHHESPLAT
  { 699,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #699 = EVLHHESPLATX
  { 700,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #700 = EVLHHOSSPLAT
  { 701,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #701 = EVLHHOSSPLATX
  { 702,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #702 = EVLHHOUSPLAT
  { 703,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #703 = EVLHHOUSPLATX
  { 704,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #704 = EVLWHE
  { 705,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #705 = EVLWHEX
  { 706,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #706 = EVLWHOS
  { 707,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #707 = EVLWHOSX
  { 708,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #708 = EVLWHOU
  { 709,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #709 = EVLWHOUX
  { 710,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #710 = EVLWHSPLAT
  { 711,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #711 = EVLWHSPLATX
  { 712,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #712 = EVLWWSPLAT
  { 713,	3,	1,	4,	294,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #713 = EVLWWSPLATX
  { 714,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #714 = EVMERGEHI
  { 715,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #715 = EVMERGEHILO
  { 716,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo103, -1 ,nullptr },  // Inst #716 = EVMERGELO
  { 717,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #717 = EVMERGELOHI
  { 718,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #718 = EVMHEGSMFAA
  { 719,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #719 = EVMHEGSMFAN
  { 720,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #720 = EVMHEGSMIAA
  { 721,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #721 = EVMHEGSMIAN
  { 722,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #722 = EVMHEGUMIAA
  { 723,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #723 = EVMHEGUMIAN
  { 724,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #724 = EVMHESMF
  { 725,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #725 = EVMHESMFA
  { 726,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #726 = EVMHESMFAAW
  { 727,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #727 = EVMHESMFANW
  { 728,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #728 = EVMHESMI
  { 729,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #729 = EVMHESMIA
  { 730,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #730 = EVMHESMIAAW
  { 731,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #731 = EVMHESMIANW
  { 732,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #732 = EVMHESSF
  { 733,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #733 = EVMHESSFA
  { 734,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #734 = EVMHESSFAAW
  { 735,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #735 = EVMHESSFANW
  { 736,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #736 = EVMHESSIAAW
  { 737,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #737 = EVMHESSIANW
  { 738,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #738 = EVMHEUMI
  { 739,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #739 = EVMHEUMIA
  { 740,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #740 = EVMHEUMIAAW
  { 741,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #741 = EVMHEUMIANW
  { 742,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #742 = EVMHEUSIAAW
  { 743,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #743 = EVMHEUSIANW
  { 744,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #744 = EVMHOGSMFAA
  { 745,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #745 = EVMHOGSMFAN
  { 746,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #746 = EVMHOGSMIAA
  { 747,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #747 = EVMHOGSMIAN
  { 748,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #748 = EVMHOGUMIAA
  { 749,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #749 = EVMHOGUMIAN
  { 750,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #750 = EVMHOSMF
  { 751,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #751 = EVMHOSMFA
  { 752,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #752 = EVMHOSMFAAW
  { 753,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #753 = EVMHOSMFANW
  { 754,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #754 = EVMHOSMI
  { 755,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #755 = EVMHOSMIA
  { 756,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #756 = EVMHOSMIAAW
  { 757,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #757 = EVMHOSMIANW
  { 758,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #758 = EVMHOSSF
  { 759,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #759 = EVMHOSSFA
  { 760,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #760 = EVMHOSSFAAW
  { 761,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #761 = EVMHOSSFANW
  { 762,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #762 = EVMHOSSIAAW
  { 763,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #763 = EVMHOSSIANW
  { 764,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #764 = EVMHOUMI
  { 765,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #765 = EVMHOUMIA
  { 766,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #766 = EVMHOUMIAAW
  { 767,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #767 = EVMHOUMIANW
  { 768,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #768 = EVMHOUSIAAW
  { 769,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #769 = EVMHOUSIANW
  { 770,	2,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #770 = EVMRA
  { 771,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #771 = EVMWHSMF
  { 772,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #772 = EVMWHSMFA
  { 773,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #773 = EVMWHSMI
  { 774,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #774 = EVMWHSMIA
  { 775,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #775 = EVMWHSSF
  { 776,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #776 = EVMWHSSFA
  { 777,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #777 = EVMWHUMI
  { 778,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #778 = EVMWHUMIA
  { 779,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #779 = EVMWLSMIAAW
  { 780,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #780 = EVMWLSMIANW
  { 781,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #781 = EVMWLSSIAAW
  { 782,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #782 = EVMWLSSIANW
  { 783,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #783 = EVMWLUMI
  { 784,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #784 = EVMWLUMIA
  { 785,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #785 = EVMWLUMIAAW
  { 786,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #786 = EVMWLUMIANW
  { 787,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #787 = EVMWLUSIAAW
  { 788,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #788 = EVMWLUSIANW
  { 789,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #789 = EVMWSMF
  { 790,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #790 = EVMWSMFA
  { 791,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #791 = EVMWSMFAA
  { 792,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #792 = EVMWSMFAN
  { 793,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #793 = EVMWSMI
  { 794,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #794 = EVMWSMIA
  { 795,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #795 = EVMWSMIAA
  { 796,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #796 = EVMWSMIAN
  { 797,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #797 = EVMWSSF
  { 798,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #798 = EVMWSSFA
  { 799,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #799 = EVMWSSFAA
  { 800,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #800 = EVMWSSFAN
  { 801,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #801 = EVMWUMI
  { 802,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #802 = EVMWUMIA
  { 803,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #803 = EVMWUMIAA
  { 804,	3,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #804 = EVMWUMIAN
  { 805,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #805 = EVNAND
  { 806,	2,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #806 = EVNEG
  { 807,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #807 = EVNOR
  { 808,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #808 = EVOR
  { 809,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #809 = EVORC
  { 810,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #810 = EVRLW
  { 811,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo100, -1 ,nullptr },  // Inst #811 = EVRLWI
  { 812,	2,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #812 = EVRNDW
  { 813,	4,	1,	4,	22,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo104, -1 ,nullptr },  // Inst #813 = EVSEL
  { 814,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #814 = EVSLW
  { 815,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo100, -1 ,nullptr },  // Inst #815 = EVSLWI
  { 816,	2,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo105, -1 ,nullptr },  // Inst #816 = EVSPLATFI
  { 817,	2,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo105, -1 ,nullptr },  // Inst #817 = EVSPLATI
  { 818,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo100, -1 ,nullptr },  // Inst #818 = EVSRWIS
  { 819,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo100, -1 ,nullptr },  // Inst #819 = EVSRWIU
  { 820,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #820 = EVSRWS
  { 821,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #821 = EVSRWU
  { 822,	3,	0,	4,	295,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #822 = EVSTDD
  { 823,	3,	0,	4,	295,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #823 = EVSTDDX
  { 824,	3,	0,	4,	295,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #824 = EVSTDH
  { 825,	3,	0,	4,	295,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #825 = EVSTDHX
  { 826,	3,	0,	4,	295,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #826 = EVSTDW
  { 827,	3,	0,	4,	295,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #827 = EVSTDWX
  { 828,	3,	0,	4,	295,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #828 = EVSTWHE
  { 829,	3,	0,	4,	295,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #829 = EVSTWHEX
  { 830,	3,	0,	4,	295,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #830 = EVSTWHO
  { 831,	3,	0,	4,	295,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #831 = EVSTWHOX
  { 832,	3,	0,	4,	295,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #832 = EVSTWWE
  { 833,	3,	0,	4,	295,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #833 = EVSTWWEX
  { 834,	3,	0,	4,	295,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo101, -1 ,nullptr },  // Inst #834 = EVSTWWO
  { 835,	3,	0,	4,	295,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo102, -1 ,nullptr },  // Inst #835 = EVSTWWOX
  { 836,	2,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #836 = EVSUBFSMIAAW
  { 837,	2,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #837 = EVSUBFSSIAAW
  { 838,	2,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #838 = EVSUBFUMIAAW
  { 839,	2,	1,	4,	293,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86, -1 ,nullptr },  // Inst #839 = EVSUBFUSIAAW
  { 840,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #840 = EVSUBFW
  { 841,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo106, -1 ,nullptr },  // Inst #841 = EVSUBIFW
  { 842,	3,	1,	4,	292,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo87, -1 ,nullptr },  // Inst #842 = EVXOR
  { 843,	2,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #843 = EXTSB
  { 844,	2,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo55, -1 ,nullptr },  // Inst #844 = EXTSB8
  { 845,	2,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo107, -1 ,nullptr },  // Inst #845 = EXTSB8_32_64
  { 846,	2,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo55, -1 ,nullptr },  // Inst #846 = EXTSB8o
  { 847,	2,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo37, -1 ,nullptr },  // Inst #847 = EXTSBo
  { 848,	2,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #848 = EXTSH
  { 849,	2,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo55, -1 ,nullptr },  // Inst #849 = EXTSH8
  { 850,	2,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo107, -1 ,nullptr },  // Inst #850 = EXTSH8_32_64
  { 851,	2,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo55, -1 ,nullptr },  // Inst #851 = EXTSH8o
  { 852,	2,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo37, -1 ,nullptr },  // Inst #852 = EXTSHo
  { 853,	2,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo55, -1 ,nullptr },  // Inst #853 = EXTSW
  { 854,	3,	1,	4,	112,	0, 0x8ULL, nullptr, ImplicitList6, OperandInfo35, -1 ,nullptr },  // Inst #854 = EXTSWSLI
  { 855,	3,	1,	4,	112,	0, 0x8ULL, nullptr, nullptr, OperandInfo108, -1 ,nullptr },  // Inst #855 = EXTSWSLI_32_64
  { 856,	3,	1,	4,	257,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo108, -1 ,nullptr },  // Inst #856 = EXTSWSLI_32_64o
  { 857,	3,	1,	4,	257,	0, 0x8ULL, nullptr, ImplicitList9, OperandInfo35, -1 ,nullptr },  // Inst #857 = EXTSWSLIo
  { 858,	2,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #858 = EXTSW_32
  { 859,	2,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo107, -1 ,nullptr },  // Inst #859 = EXTSW_32_64
  { 860,	2,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo107, -1 ,nullptr },  // Inst #860 = EXTSW_32_64o
  { 861,	2,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo55, -1 ,nullptr },  // Inst #861 = EXTSWo
  { 862,	0,	0,	4,	179,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #862 = EnforceIEIO
  { 863,	2,	1,	4,	131,	0, 0x18ULL, nullptr, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #863 = FABSD
  { 864,	2,	1,	4,	246,	0, 0x18ULL, nullptr, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #864 = FABSDo
  { 865,	2,	1,	4,	131,	0, 0x18ULL, nullptr, nullptr, OperandInfo110, -1 ,nullptr },  // Inst #865 = FABSS
  { 866,	2,	1,	4,	246,	0, 0x18ULL, nullptr, ImplicitList27, OperandInfo110, -1 ,nullptr },  // Inst #866 = FABSSo
  { 867,	3,	1,	4,	149,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, nullptr, OperandInfo111, -1 ,nullptr },  // Inst #867 = FADD
  { 868,	3,	1,	4,	148,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, nullptr, OperandInfo112, -1 ,nullptr },  // Inst #868 = FADDS
  { 869,	3,	1,	4,	156,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo112, -1 ,nullptr },  // Inst #869 = FADDSo
  { 870,	3,	1,	4,	157,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo111, -1 ,nullptr },  // Inst #870 = FADDo
  { 871,	3,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, nullptr, OperandInfo111, -1 ,nullptr },  // Inst #871 = FADDrtz
  { 872,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #872 = FCFID
  { 873,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo113, -1 ,nullptr },  // Inst #873 = FCFIDS
  { 874,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo113, -1 ,nullptr },  // Inst #874 = FCFIDSo
  { 875,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #875 = FCFIDU
  { 876,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo113, -1 ,nullptr },  // Inst #876 = FCFIDUS
  { 877,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo113, -1 ,nullptr },  // Inst #877 = FCFIDUSo
  { 878,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #878 = FCFIDUo
  { 879,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #879 = FCFIDo
  { 880,	3,	1,	4,	106,	0|(1ULL<<MCID::Compare), 0x18ULL, nullptr, nullptr, OperandInfo114, -1 ,nullptr },  // Inst #880 = FCMPUD
  { 881,	3,	1,	4,	106,	0|(1ULL<<MCID::Compare), 0x18ULL, nullptr, nullptr, OperandInfo115, -1 ,nullptr },  // Inst #881 = FCMPUS
  { 882,	3,	1,	4,	131,	0, 0x18ULL, nullptr, nullptr, OperandInfo111, -1 ,nullptr },  // Inst #882 = FCPSGND
  { 883,	3,	1,	4,	246,	0, 0x18ULL, nullptr, ImplicitList27, OperandInfo111, -1 ,nullptr },  // Inst #883 = FCPSGNDo
  { 884,	3,	1,	4,	131,	0, 0x18ULL, nullptr, nullptr, OperandInfo112, -1 ,nullptr },  // Inst #884 = FCPSGNS
  { 885,	3,	1,	4,	246,	0, 0x18ULL, nullptr, ImplicitList27, OperandInfo112, -1 ,nullptr },  // Inst #885 = FCPSGNSo
  { 886,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #886 = FCTID
  { 887,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #887 = FCTIDU
  { 888,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #888 = FCTIDUZ
  { 889,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #889 = FCTIDUZo
  { 890,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #890 = FCTIDUo
  { 891,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #891 = FCTIDZ
  { 892,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #892 = FCTIDZo
  { 893,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #893 = FCTIDo
  { 894,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #894 = FCTIW
  { 895,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #895 = FCTIWU
  { 896,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #896 = FCTIWUZ
  { 897,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #897 = FCTIWUZo
  { 898,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #898 = FCTIWUo
  { 899,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #899 = FCTIWZ
  { 900,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #900 = FCTIWZo
  { 901,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #901 = FCTIWo
  { 902,	3,	1,	4,	259,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo111, -1 ,nullptr },  // Inst #902 = FDIV
  { 903,	3,	1,	4,	270,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo112, -1 ,nullptr },  // Inst #903 = FDIVS
  { 904,	3,	1,	4,	271,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo112, -1 ,nullptr },  // Inst #904 = FDIVSo
  { 905,	3,	1,	4,	260,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo111, -1 ,nullptr },  // Inst #905 = FDIVo
  { 906,	4,	1,	4,	150,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, nullptr, OperandInfo116, -1 ,nullptr },  // Inst #906 = FMADD
  { 907,	4,	1,	4,	148,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, nullptr, OperandInfo117, -1 ,nullptr },  // Inst #907 = FMADDS
  { 908,	4,	1,	4,	156,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo117, -1 ,nullptr },  // Inst #908 = FMADDSo
  { 909,	4,	1,	4,	158,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo116, -1 ,nullptr },  // Inst #909 = FMADDo
  { 910,	2,	1,	4,	131,	0, 0x0ULL, nullptr, nullptr, OperandInfo110, -1 ,nullptr },  // Inst #910 = FMR
  { 911,	2,	1,	4,	246,	0, 0x0ULL, nullptr, ImplicitList27, OperandInfo110, -1 ,nullptr },  // Inst #911 = FMRo
  { 912,	4,	1,	4,	150,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, nullptr, OperandInfo116, -1 ,nullptr },  // Inst #912 = FMSUB
  { 913,	4,	1,	4,	148,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, nullptr, OperandInfo117, -1 ,nullptr },  // Inst #913 = FMSUBS
  { 914,	4,	1,	4,	156,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo117, -1 ,nullptr },  // Inst #914 = FMSUBSo
  { 915,	4,	1,	4,	158,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo116, -1 ,nullptr },  // Inst #915 = FMSUBo
  { 916,	3,	1,	4,	150,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, nullptr, OperandInfo111, -1 ,nullptr },  // Inst #916 = FMUL
  { 917,	3,	1,	4,	148,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, nullptr, OperandInfo112, -1 ,nullptr },  // Inst #917 = FMULS
  { 918,	3,	1,	4,	156,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo112, -1 ,nullptr },  // Inst #918 = FMULSo
  { 919,	3,	1,	4,	158,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo111, -1 ,nullptr },  // Inst #919 = FMULo
  { 920,	2,	1,	4,	131,	0, 0x18ULL, nullptr, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #920 = FNABSD
  { 921,	2,	1,	4,	246,	0, 0x18ULL, nullptr, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #921 = FNABSDo
  { 922,	2,	1,	4,	131,	0, 0x18ULL, nullptr, nullptr, OperandInfo110, -1 ,nullptr },  // Inst #922 = FNABSS
  { 923,	2,	1,	4,	246,	0, 0x18ULL, nullptr, ImplicitList27, OperandInfo110, -1 ,nullptr },  // Inst #923 = FNABSSo
  { 924,	2,	1,	4,	131,	0, 0x18ULL, nullptr, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #924 = FNEGD
  { 925,	2,	1,	4,	246,	0, 0x18ULL, nullptr, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #925 = FNEGDo
  { 926,	2,	1,	4,	131,	0, 0x18ULL, nullptr, nullptr, OperandInfo110, -1 ,nullptr },  // Inst #926 = FNEGS
  { 927,	2,	1,	4,	246,	0, 0x18ULL, nullptr, ImplicitList27, OperandInfo110, -1 ,nullptr },  // Inst #927 = FNEGSo
  { 928,	4,	1,	4,	150,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, nullptr, OperandInfo116, -1 ,nullptr },  // Inst #928 = FNMADD
  { 929,	4,	1,	4,	148,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, nullptr, OperandInfo117, -1 ,nullptr },  // Inst #929 = FNMADDS
  { 930,	4,	1,	4,	156,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo117, -1 ,nullptr },  // Inst #930 = FNMADDSo
  { 931,	4,	1,	4,	158,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo116, -1 ,nullptr },  // Inst #931 = FNMADDo
  { 932,	4,	1,	4,	150,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, nullptr, OperandInfo116, -1 ,nullptr },  // Inst #932 = FNMSUB
  { 933,	4,	1,	4,	148,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, nullptr, OperandInfo117, -1 ,nullptr },  // Inst #933 = FNMSUBS
  { 934,	4,	1,	4,	156,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo117, -1 ,nullptr },  // Inst #934 = FNMSUBSo
  { 935,	4,	1,	4,	158,	0|(1ULL<<MCID::Commutable), 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo116, -1 ,nullptr },  // Inst #935 = FNMSUBo
  { 936,	2,	1,	4,	148,	0, 0x18ULL, nullptr, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #936 = FRE
  { 937,	2,	1,	4,	148,	0, 0x18ULL, nullptr, nullptr, OperandInfo110, -1 ,nullptr },  // Inst #937 = FRES
  { 938,	2,	1,	4,	156,	0, 0x18ULL, nullptr, ImplicitList27, OperandInfo110, -1 ,nullptr },  // Inst #938 = FRESo
  { 939,	2,	1,	4,	156,	0, 0x18ULL, nullptr, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #939 = FREo
  { 940,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #940 = FRIMD
  { 941,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #941 = FRIMDo
  { 942,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo110, -1 ,nullptr },  // Inst #942 = FRIMS
  { 943,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo110, -1 ,nullptr },  // Inst #943 = FRIMSo
  { 944,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #944 = FRIND
  { 945,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #945 = FRINDo
  { 946,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo110, -1 ,nullptr },  // Inst #946 = FRINS
  { 947,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo110, -1 ,nullptr },  // Inst #947 = FRINSo
  { 948,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #948 = FRIPD
  { 949,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #949 = FRIPDo
  { 950,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo110, -1 ,nullptr },  // Inst #950 = FRIPS
  { 951,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo110, -1 ,nullptr },  // Inst #951 = FRIPSo
  { 952,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #952 = FRIZD
  { 953,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #953 = FRIZDo
  { 954,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo110, -1 ,nullptr },  // Inst #954 = FRIZS
  { 955,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo110, -1 ,nullptr },  // Inst #955 = FRIZSo
  { 956,	2,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo113, -1 ,nullptr },  // Inst #956 = FRSP
  { 957,	2,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo113, -1 ,nullptr },  // Inst #957 = FRSPo
  { 958,	2,	1,	4,	148,	0, 0x18ULL, nullptr, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #958 = FRSQRTE
  { 959,	2,	1,	4,	148,	0, 0x18ULL, nullptr, nullptr, OperandInfo110, -1 ,nullptr },  // Inst #959 = FRSQRTES
  { 960,	2,	1,	4,	156,	0, 0x18ULL, nullptr, ImplicitList27, OperandInfo110, -1 ,nullptr },  // Inst #960 = FRSQRTESo
  { 961,	2,	1,	4,	156,	0, 0x18ULL, nullptr, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #961 = FRSQRTEo
  { 962,	4,	1,	4,	148,	0, 0x18ULL, nullptr, nullptr, OperandInfo116, -1 ,nullptr },  // Inst #962 = FSELD
  { 963,	4,	1,	4,	152,	0, 0x18ULL, nullptr, ImplicitList27, OperandInfo116, -1 ,nullptr },  // Inst #963 = FSELDo
  { 964,	4,	1,	4,	148,	0, 0x18ULL, nullptr, nullptr, OperandInfo118, -1 ,nullptr },  // Inst #964 = FSELS
  { 965,	4,	1,	4,	152,	0, 0x18ULL, nullptr, ImplicitList27, OperandInfo118, -1 ,nullptr },  // Inst #965 = FSELSo
  { 966,	2,	1,	4,	262,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #966 = FSQRT
  { 967,	2,	1,	4,	267,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo110, -1 ,nullptr },  // Inst #967 = FSQRTS
  { 968,	2,	1,	4,	268,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo110, -1 ,nullptr },  // Inst #968 = FSQRTSo
  { 969,	2,	1,	4,	265,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo109, -1 ,nullptr },  // Inst #969 = FSQRTo
  { 970,	3,	1,	4,	149,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo111, -1 ,nullptr },  // Inst #970 = FSUB
  { 971,	3,	1,	4,	148,	0, 0x18ULL, ImplicitList2, nullptr, OperandInfo112, -1 ,nullptr },  // Inst #971 = FSUBS
  { 972,	3,	1,	4,	156,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo112, -1 ,nullptr },  // Inst #972 = FSUBSo
  { 973,	3,	1,	4,	157,	0, 0x18ULL, ImplicitList2, ImplicitList27, OperandInfo111, -1 ,nullptr },  // Inst #973 = FSUBo
  { 974,	3,	1,	4,	106,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x18ULL, nullptr, nullptr, OperandInfo114, -1 ,nullptr },  // Inst #974 = FTDIV
  { 975,	2,	1,	4,	106,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x18ULL, nullptr, nullptr, OperandInfo119, -1 ,nullptr },  // Inst #975 = FTSQRT
  { 976,	3,	1,	8,	0,	0|(1ULL<<MCID::ExtraSrcRegAllocReq)|(1ULL<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList28, OperandInfo35, -1 ,nullptr },  // Inst #976 = GETtlsADDR
  { 977,	3,	1,	4,	0,	0|(1ULL<<MCID::ExtraSrcRegAllocReq)|(1ULL<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList29, OperandInfo36, -1 ,nullptr },  // Inst #977 = GETtlsADDR32
  { 978,	3,	1,	4,	0,	0|(1ULL<<MCID::ExtraSrcRegAllocReq)|(1ULL<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList28, OperandInfo35, -1 ,nullptr },  // Inst #978 = GETtlsldADDR
  { 979,	3,	1,	4,	0,	0|(1ULL<<MCID::ExtraSrcRegAllocReq)|(1ULL<<MCID::ExtraDefRegAllocReq), 0x0ULL, nullptr, ImplicitList29, OperandInfo36, -1 ,nullptr },  // Inst #979 = GETtlsldADDR32
  { 980,	0,	0,	4,	296,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #980 = HRFID
  { 981,	2,	0,	4,	178,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #981 = ICBI
  { 982,	2,	0,	4,	178,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38, -1 ,nullptr },  // Inst #982 = ICBIEP
  { 983,	3,	0,	4,	300,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo80, -1 ,nullptr },  // Inst #983 = ICBLC
  { 984,	3,	0,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo80, -1 ,nullptr },  // Inst #984 = ICBLQ
  { 985,	3,	0,	4,	179,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo80, -1 ,nullptr },  // Inst #985 = ICBT
  { 986,	3,	0,	4,	179,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo80, -1 ,nullptr },  // Inst #986 = ICBTLS
  { 987,	2,	0,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #987 = ICCCI
  { 988,	4,	1,	4,	133,	0|(1ULL<<MCID::Select), 0x8ULL, nullptr, nullptr, OperandInfo120, -1 ,nullptr },  // Inst #988 = ISEL
  { 989,	4,	1,	4,	133,	0|(1ULL<<MCID::Select), 0x8ULL, nullptr, nullptr, OperandInfo121, -1 ,nullptr },  // Inst #989 = ISEL8
  { 990,	0,	0,	4,	184,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #990 = ISYNC
  { 991,	3,	1,	4,	115,	0, 0x8ULL, nullptr, nullptr, OperandInfo52, -1 ,nullptr },  // Inst #991 = LA
  { 992,	3,	1,	4,	180,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #992 = LBARX
  { 993,	3,	1,	4,	180,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #993 = LBARXL
  { 994,	3,	1,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #994 = LBEPX
  { 995,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo42, -1 ,nullptr },  // Inst #995 = LBZ
  { 996,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo123, -1 ,nullptr },  // Inst #996 = LBZ8
  { 997,	3,	1,	4,	179,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #997 = LBZCIX
  { 998,	4,	2,	4,	280,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo124, -1 ,nullptr },  // Inst #998 = LBZU
  { 999,	4,	2,	4,	280,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo125, -1 ,nullptr },  // Inst #999 = LBZU8
  { 1000,	4,	2,	4,	281,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo126, -1 ,nullptr },  // Inst #1000 = LBZUX
  { 1001,	4,	2,	4,	281,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo127, -1 ,nullptr },  // Inst #1001 = LBZUX8
  { 1002,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1002 = LBZX
  { 1003,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1003 = LBZX8
  { 1004,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1004 = LBZXTLS
  { 1005,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1005 = LBZXTLS_
  { 1006,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, nullptr, OperandInfo130, -1 ,nullptr },  // Inst #1006 = LBZXTLS_32
  { 1007,	3,	1,	4,	181,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo123, -1 ,nullptr },  // Inst #1007 = LD
  { 1008,	3,	1,	4,	182,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1008 = LDARX
  { 1009,	3,	1,	4,	182,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1009 = LDARXL
  { 1010,	3,	1,	4,	289,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::ExtraDefRegAllocReq), 0x80ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #1010 = LDAT
  { 1011,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1011 = LDBRX
  { 1012,	3,	1,	4,	179,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1012 = LDCIX
  { 1013,	3,	1,	4,	201,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1013 = LDMX
  { 1014,	4,	2,	4,	282,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo125, -1 ,nullptr },  // Inst #1014 = LDU
  { 1015,	4,	2,	4,	283,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo127, -1 ,nullptr },  // Inst #1015 = LDUX
  { 1016,	3,	1,	4,	181,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1016 = LDX
  { 1017,	3,	1,	4,	181,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1017 = LDXTLS
  { 1018,	3,	1,	4,	181,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1018 = LDXTLS_
  { 1019,	3,	1,	4,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo131, -1 ,nullptr },  // Inst #1019 = LDgotTprelL
  { 1020,	3,	1,	4,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo132, -1 ,nullptr },  // Inst #1020 = LDgotTprelL32
  { 1021,	3,	1,	4,	0,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo133, -1 ,nullptr },  // Inst #1021 = LDtoc
  { 1022,	3,	1,	4,	0,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo133, -1 ,nullptr },  // Inst #1022 = LDtocBA
  { 1023,	3,	1,	4,	0,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo133, -1 ,nullptr },  // Inst #1023 = LDtocCPT
  { 1024,	3,	1,	4,	0,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo133, -1 ,nullptr },  // Inst #1024 = LDtocJTI
  { 1025,	3,	1,	4,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo131, -1 ,nullptr },  // Inst #1025 = LDtocL
  { 1026,	3,	1,	4,	189,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo134, -1 ,nullptr },  // Inst #1026 = LFD
  { 1027,	3,	1,	4,	301,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo135, -1 ,nullptr },  // Inst #1027 = LFDEPX
  { 1028,	4,	2,	4,	284,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo136, -1 ,nullptr },  // Inst #1028 = LFDU
  { 1029,	4,	2,	4,	285,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo137, -1 ,nullptr },  // Inst #1029 = LFDUX
  { 1030,	3,	1,	4,	189,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo135, -1 ,nullptr },  // Inst #1030 = LFDX
  { 1031,	3,	1,	4,	206,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo135, -1 ,nullptr },  // Inst #1031 = LFIWAX
  { 1032,	3,	1,	4,	189,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo135, -1 ,nullptr },  // Inst #1032 = LFIWZX
  { 1033,	3,	1,	4,	209,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo138, -1 ,nullptr },  // Inst #1033 = LFS
  { 1034,	4,	2,	4,	275,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo139, -1 ,nullptr },  // Inst #1034 = LFSU
  { 1035,	4,	2,	4,	276,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo140, -1 ,nullptr },  // Inst #1035 = LFSUX
  { 1036,	3,	1,	4,	209,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo141, -1 ,nullptr },  // Inst #1036 = LFSX
  { 1037,	3,	1,	4,	202,	0|(1ULL<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo42, -1 ,nullptr },  // Inst #1037 = LHA
  { 1038,	3,	1,	4,	202,	0|(1ULL<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo123, -1 ,nullptr },  // Inst #1038 = LHA8
  { 1039,	3,	1,	4,	180,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1039 = LHARX
  { 1040,	3,	1,	4,	180,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1040 = LHARXL
  { 1041,	4,	2,	4,	212,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo124, -1 ,nullptr },  // Inst #1041 = LHAU
  { 1042,	4,	2,	4,	212,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo125, -1 ,nullptr },  // Inst #1042 = LHAU8
  { 1043,	4,	2,	4,	213,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo126, -1 ,nullptr },  // Inst #1043 = LHAUX
  { 1044,	4,	2,	4,	213,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo127, -1 ,nullptr },  // Inst #1044 = LHAUX8
  { 1045,	3,	1,	4,	202,	0|(1ULL<<MCID::MayLoad), 0x94ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1045 = LHAX
  { 1046,	3,	1,	4,	202,	0|(1ULL<<MCID::MayLoad), 0x94ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1046 = LHAX8
  { 1047,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1047 = LHBRX
  { 1048,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1048 = LHBRX8
  { 1049,	3,	1,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1049 = LHEPX
  { 1050,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo42, -1 ,nullptr },  // Inst #1050 = LHZ
  { 1051,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo123, -1 ,nullptr },  // Inst #1051 = LHZ8
  { 1052,	3,	1,	4,	179,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1052 = LHZCIX
  { 1053,	4,	2,	4,	196,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo124, -1 ,nullptr },  // Inst #1053 = LHZU
  { 1054,	4,	2,	4,	196,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo125, -1 ,nullptr },  // Inst #1054 = LHZU8
  { 1055,	4,	2,	4,	197,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo126, -1 ,nullptr },  // Inst #1055 = LHZUX
  { 1056,	4,	2,	4,	197,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo127, -1 ,nullptr },  // Inst #1056 = LHZUX8
  { 1057,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1057 = LHZX
  { 1058,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1058 = LHZX8
  { 1059,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1059 = LHZXTLS
  { 1060,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1060 = LHZXTLS_
  { 1061,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, nullptr, OperandInfo130, -1 ,nullptr },  // Inst #1061 = LHZXTLS_32
  { 1062,	2,	1,	4,	116,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo142, -1 ,nullptr },  // Inst #1062 = LI
  { 1063,	2,	1,	4,	116,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo47, -1 ,nullptr },  // Inst #1063 = LI8
  { 1064,	2,	1,	4,	116,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo142, -1 ,nullptr },  // Inst #1064 = LIS
  { 1065,	2,	1,	4,	116,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo47, -1 ,nullptr },  // Inst #1065 = LIS8
  { 1066,	3,	1,	4,	188,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42, -1 ,nullptr },  // Inst #1066 = LMW
  { 1067,	3,	1,	4,	179,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #1067 = LSWI
  { 1068,	3,	1,	4,	172,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo143, -1 ,nullptr },  // Inst #1068 = LVEBX
  { 1069,	3,	1,	4,	172,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo143, -1 ,nullptr },  // Inst #1069 = LVEHX
  { 1070,	3,	1,	4,	172,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo143, -1 ,nullptr },  // Inst #1070 = LVEWX
  { 1071,	3,	1,	4,	160,	0, 0x90ULL, nullptr, nullptr, OperandInfo143, -1 ,nullptr },  // Inst #1071 = LVSL
  { 1072,	3,	1,	4,	160,	0, 0x90ULL, nullptr, nullptr, OperandInfo143, -1 ,nullptr },  // Inst #1072 = LVSR
  { 1073,	3,	1,	4,	172,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo143, -1 ,nullptr },  // Inst #1073 = LVX
  { 1074,	3,	1,	4,	172,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo143, -1 ,nullptr },  // Inst #1074 = LVXL
  { 1075,	3,	1,	4,	204,	0|(1ULL<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo123, -1 ,nullptr },  // Inst #1075 = LWA
  { 1076,	3,	1,	4,	180,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1076 = LWARX
  { 1077,	3,	1,	4,	180,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1077 = LWARXL
  { 1078,	3,	1,	4,	289,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::ExtraSrcRegAllocReq), 0x80ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #1078 = LWAT
  { 1079,	4,	2,	4,	213,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo127, -1 ,nullptr },  // Inst #1079 = LWAUX
  { 1080,	3,	1,	4,	202,	0|(1ULL<<MCID::MayLoad), 0x94ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1080 = LWAX
  { 1081,	3,	1,	4,	202,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x94ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1081 = LWAX_32
  { 1082,	3,	1,	4,	204,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x14ULL, nullptr, nullptr, OperandInfo42, -1 ,nullptr },  // Inst #1082 = LWA_32
  { 1083,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1083 = LWBRX
  { 1084,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1084 = LWBRX8
  { 1085,	3,	1,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1085 = LWEPX
  { 1086,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo42, -1 ,nullptr },  // Inst #1086 = LWZ
  { 1087,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo123, -1 ,nullptr },  // Inst #1087 = LWZ8
  { 1088,	3,	1,	4,	179,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1088 = LWZCIX
  { 1089,	4,	2,	4,	196,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo124, -1 ,nullptr },  // Inst #1089 = LWZU
  { 1090,	4,	2,	4,	196,	0|(1ULL<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo125, -1 ,nullptr },  // Inst #1090 = LWZU8
  { 1091,	4,	2,	4,	197,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo126, -1 ,nullptr },  // Inst #1091 = LWZUX
  { 1092,	4,	2,	4,	197,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo127, -1 ,nullptr },  // Inst #1092 = LWZUX8
  { 1093,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1093 = LWZX
  { 1094,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x90ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1094 = LWZX8
  { 1095,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1095 = LWZXTLS
  { 1096,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1096 = LWZXTLS_
  { 1097,	3,	1,	4,	179,	0|(1ULL<<MCID::MayLoad), 0x8ULL, nullptr, nullptr, OperandInfo130, -1 ,nullptr },  // Inst #1097 = LWZXTLS_32
  { 1098,	3,	1,	4,	0,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo144, -1 ,nullptr },  // Inst #1098 = LWZtoc
  { 1099,	3,	1,	4,	173,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo145, -1 ,nullptr },  // Inst #1099 = LXSD
  { 1100,	3,	1,	4,	173,	0|(1ULL<<MCID::MayLoad), 0x80ULL, ImplicitList2, nullptr, OperandInfo43, -1 ,nullptr },  // Inst #1100 = LXSDX
  { 1101,	3,	1,	4,	173,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo43, -1 ,nullptr },  // Inst #1101 = LXSIBZX
  { 1102,	3,	1,	4,	173,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo43, -1 ,nullptr },  // Inst #1102 = LXSIHZX
  { 1103,	3,	1,	4,	207,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo43, -1 ,nullptr },  // Inst #1103 = LXSIWAX
  { 1104,	3,	1,	4,	173,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo43, -1 ,nullptr },  // Inst #1104 = LXSIWZX
  { 1105,	3,	1,	4,	210,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo145, -1 ,nullptr },  // Inst #1105 = LXSSP
  { 1106,	3,	1,	4,	210,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo48, -1 ,nullptr },  // Inst #1106 = LXSSPX
  { 1107,	3,	1,	4,	173,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo146, -1 ,nullptr },  // Inst #1107 = LXV
  { 1108,	3,	1,	4,	173,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo147, -1 ,nullptr },  // Inst #1108 = LXVB16X
  { 1109,	3,	1,	4,	173,	0|(1ULL<<MCID::MayLoad), 0x80ULL, ImplicitList2, nullptr, OperandInfo147, -1 ,nullptr },  // Inst #1109 = LXVD2X
  { 1110,	3,	1,	4,	214,	0|(1ULL<<MCID::MayLoad), 0x80ULL, ImplicitList2, nullptr, OperandInfo147, -1 ,nullptr },  // Inst #1110 = LXVDSX
  { 1111,	3,	1,	4,	214,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo147, -1 ,nullptr },  // Inst #1111 = LXVH8X
  { 1112,	3,	1,	4,	171,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo148, -1 ,nullptr },  // Inst #1112 = LXVL
  { 1113,	3,	1,	4,	171,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo148, -1 ,nullptr },  // Inst #1113 = LXVLL
  { 1114,	3,	1,	4,	214,	0|(1ULL<<MCID::MayLoad), 0x80ULL, ImplicitList2, nullptr, OperandInfo147, -1 ,nullptr },  // Inst #1114 = LXVW4X
  { 1115,	3,	1,	4,	173,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo147, -1 ,nullptr },  // Inst #1115 = LXVWSX
  { 1116,	3,	1,	4,	173,	0|(1ULL<<MCID::MayLoad), 0x80ULL, nullptr, nullptr, OperandInfo147, -1 ,nullptr },  // Inst #1116 = LXVX
  { 1117,	4,	1,	4,	144,	0, 0x8ULL, nullptr, nullptr, OperandInfo149, -1 ,nullptr },  // Inst #1117 = MADDHD
  { 1118,	4,	1,	4,	144,	0, 0x8ULL, nullptr, nullptr, OperandInfo149, -1 ,nullptr },  // Inst #1118 = MADDHDU
  { 1119,	4,	1,	4,	144,	0, 0x8ULL, nullptr, nullptr, OperandInfo150, -1 ,nullptr },  // Inst #1119 = MADDLD
  { 1120,	4,	1,	4,	144,	0, 0x8ULL, nullptr, nullptr, OperandInfo149, -1 ,nullptr },  // Inst #1120 = MADDLD8
  { 1121,	1,	0,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #1121 = MBAR
  { 1122,	2,	1,	4,	118,	0, 0x21ULL, nullptr, nullptr, OperandInfo151, -1 ,nullptr },  // Inst #1122 = MCRF
  { 1123,	2,	1,	4,	247,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo151, -1 ,nullptr },  // Inst #1123 = MCRFS
  { 1124,	1,	1,	4,	119,	0, 0x0ULL, nullptr, nullptr, OperandInfo152, -1 ,nullptr },  // Inst #1124 = MCRXRX
  { 1125,	3,	1,	4,	296,	0, 0x1ULL, nullptr, nullptr, OperandInfo153, -1 ,nullptr },  // Inst #1125 = MFBHRBE
  { 1126,	1,	1,	4,	256,	0|(1ULL<<MCID::ExtraSrcRegAllocReq), 0x20ULL, nullptr, nullptr, OperandInfo154, -1 ,nullptr },  // Inst #1126 = MFCR
  { 1127,	1,	1,	4,	256,	0|(1ULL<<MCID::ExtraSrcRegAllocReq), 0x20ULL, nullptr, nullptr, OperandInfo32, -1 ,nullptr },  // Inst #1127 = MFCR8
  { 1128,	1,	1,	4,	231,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList13, nullptr, OperandInfo154, -1 ,nullptr },  // Inst #1128 = MFCTR
  { 1129,	1,	1,	4,	231,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList14, nullptr, OperandInfo32, -1 ,nullptr },  // Inst #1129 = MFCTR8
  { 1130,	2,	1,	4,	305,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo155, -1 ,nullptr },  // Inst #1130 = MFDCR
  { 1131,	1,	1,	4,	255,	0, 0x1aULL, ImplicitList2, nullptr, OperandInfo156, -1 ,nullptr },  // Inst #1131 = MFFS
  { 1132,	2,	1,	4,	102,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #1132 = MFFSCDRN
  { 1133,	2,	1,	4,	102,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList2, nullptr, OperandInfo157, -1 ,nullptr },  // Inst #1133 = MFFSCDRNI
  { 1134,	1,	1,	4,	255,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList2, nullptr, OperandInfo156, -1 ,nullptr },  // Inst #1134 = MFFSCE
  { 1135,	2,	1,	4,	102,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList2, nullptr, OperandInfo109, -1 ,nullptr },  // Inst #1135 = MFFSCRN
  { 1136,	2,	1,	4,	102,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList2, nullptr, OperandInfo157, -1 ,nullptr },  // Inst #1136 = MFFSCRNI
  { 1137,	1,	1,	4,	255,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList2, nullptr, OperandInfo156, -1 ,nullptr },  // Inst #1137 = MFFSL
  { 1138,	1,	1,	4,	255,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, ImplicitList27, OperandInfo156, -1 ,nullptr },  // Inst #1138 = MFFSo
  { 1139,	1,	1,	4,	231,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList16, nullptr, OperandInfo154, -1 ,nullptr },  // Inst #1139 = MFLR
  { 1140,	1,	1,	4,	231,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList18, nullptr, OperandInfo32, -1 ,nullptr },  // Inst #1140 = MFLR8
  { 1141,	1,	1,	4,	232,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo154, -1 ,nullptr },  // Inst #1141 = MFMSR
  { 1142,	2,	1,	4,	127,	0|(1ULL<<MCID::ExtraSrcRegAllocReq), 0x21ULL, nullptr, nullptr, OperandInfo142, -1 ,nullptr },  // Inst #1142 = MFOCRF
  { 1143,	2,	1,	4,	127,	0|(1ULL<<MCID::ExtraSrcRegAllocReq), 0x21ULL, nullptr, nullptr, OperandInfo47, -1 ,nullptr },  // Inst #1143 = MFOCRF8
  { 1144,	2,	1,	4,	228,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo155, -1 ,nullptr },  // Inst #1144 = MFPMR
  { 1145,	2,	1,	4,	231,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo155, -1 ,nullptr },  // Inst #1145 = MFSPR
  { 1146,	2,	1,	4,	231,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo56, -1 ,nullptr },  // Inst #1146 = MFSPR8
  { 1147,	2,	1,	4,	303,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo142, -1 ,nullptr },  // Inst #1147 = MFSR
  { 1148,	2,	1,	4,	303,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1148 = MFSRIN
  { 1149,	2,	1,	4,	230,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo155, -1 ,nullptr },  // Inst #1149 = MFTB
  { 1150,	1,	1,	4,	230,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo32, -1 ,nullptr },  // Inst #1150 = MFTB8
  { 1151,	2,	1,	4,	113,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo158, -1 ,nullptr },  // Inst #1151 = MFVRD
  { 1152,	1,	1,	4,	227,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo154, -1 ,nullptr },  // Inst #1152 = MFVRSAVE
  { 1153,	2,	1,	4,	227,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo159, -1 ,nullptr },  // Inst #1153 = MFVRSAVEv
  { 1154,	1,	1,	4,	136,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo160, -1 ,nullptr },  // Inst #1154 = MFVSCR
  { 1155,	2,	1,	4,	113,	0, 0x0ULL, nullptr, nullptr, OperandInfo161, -1 ,nullptr },  // Inst #1155 = MFVSRD
  { 1156,	2,	1,	4,	163,	0, 0x0ULL, nullptr, nullptr, OperandInfo158, -1 ,nullptr },  // Inst #1156 = MFVSRLD
  { 1157,	2,	1,	4,	113,	0, 0x0ULL, nullptr, nullptr, OperandInfo162, -1 ,nullptr },  // Inst #1157 = MFVSRWZ
  { 1158,	3,	1,	4,	237,	0, 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #1158 = MODSD
  { 1159,	3,	1,	4,	236,	0, 0x0ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1159 = MODSW
  { 1160,	3,	1,	4,	237,	0, 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #1160 = MODUD
  { 1161,	3,	1,	4,	237,	0, 0x0ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1161 = MODUW
  { 1162,	0,	0,	4,	185,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1162 = MSGSYNC
  { 1163,	0,	0,	4,	310,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1163 = MSYNC
  { 1164,	2,	0,	4,	244,	0|(1ULL<<MCID::ExtraDefRegAllocReq), 0x20ULL, nullptr, nullptr, OperandInfo163, -1 ,nullptr },  // Inst #1164 = MTCRF
  { 1165,	2,	0,	4,	244,	0|(1ULL<<MCID::ExtraDefRegAllocReq), 0x20ULL, nullptr, nullptr, OperandInfo164, -1 ,nullptr },  // Inst #1165 = MTCRF8
  { 1166,	1,	0,	4,	226,	0, 0x9ULL, nullptr, ImplicitList13, OperandInfo154, -1 ,nullptr },  // Inst #1166 = MTCTR
  { 1167,	1,	0,	4,	226,	0, 0x9ULL, nullptr, ImplicitList14, OperandInfo32, -1 ,nullptr },  // Inst #1167 = MTCTR8
  { 1168,	1,	0,	4,	226,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList14, OperandInfo32, -1 ,nullptr },  // Inst #1168 = MTCTR8loop
  { 1169,	1,	0,	4,	226,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList13, OperandInfo154, -1 ,nullptr },  // Inst #1169 = MTCTRloop
  { 1170,	2,	0,	4,	306,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo155, -1 ,nullptr },  // Inst #1170 = MTDCR
  { 1171,	1,	0,	4,	101,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList2, ImplicitList2, OperandInfo2, -1 ,nullptr },  // Inst #1171 = MTFSB0
  { 1172,	1,	0,	4,	101,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList2, ImplicitList2, OperandInfo2, -1 ,nullptr },  // Inst #1172 = MTFSB1
  { 1173,	4,	0,	4,	248,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo165, -1 ,nullptr },  // Inst #1173 = MTFSF
  { 1174,	3,	1,	4,	248,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo166, -1 ,nullptr },  // Inst #1174 = MTFSFI
  { 1175,	3,	1,	4,	248,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo166, -1 ,nullptr },  // Inst #1175 = MTFSFIo
  { 1176,	2,	0,	4,	249,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList2, ImplicitList2, OperandInfo167, -1 ,nullptr },  // Inst #1176 = MTFSFb
  { 1177,	4,	0,	4,	248,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo165, -1 ,nullptr },  // Inst #1177 = MTFSFo
  { 1178,	1,	0,	4,	226,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList16, OperandInfo154, -1 ,nullptr },  // Inst #1178 = MTLR
  { 1179,	1,	0,	4,	226,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList18, OperandInfo32, -1 ,nullptr },  // Inst #1179 = MTLR8
  { 1180,	2,	0,	4,	233,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo155, -1 ,nullptr },  // Inst #1180 = MTMSR
  { 1181,	2,	0,	4,	234,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo155, -1 ,nullptr },  // Inst #1181 = MTMSRD
  { 1182,	2,	1,	4,	128,	0|(1ULL<<MCID::ExtraDefRegAllocReq), 0x21ULL, nullptr, nullptr, OperandInfo168, -1 ,nullptr },  // Inst #1182 = MTOCRF
  { 1183,	2,	1,	4,	128,	0|(1ULL<<MCID::ExtraDefRegAllocReq), 0x21ULL, nullptr, nullptr, OperandInfo169, -1 ,nullptr },  // Inst #1183 = MTOCRF8
  { 1184,	2,	0,	4,	229,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo163, -1 ,nullptr },  // Inst #1184 = MTPMR
  { 1185,	2,	0,	4,	235,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo163, -1 ,nullptr },  // Inst #1185 = MTSPR
  { 1186,	2,	0,	4,	235,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo164, -1 ,nullptr },  // Inst #1186 = MTSPR8
  { 1187,	2,	0,	4,	304,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo142, -1 ,nullptr },  // Inst #1187 = MTSR
  { 1188,	2,	0,	4,	304,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1188 = MTSRIN
  { 1189,	1,	0,	4,	227,	0|(1ULL<<MCID::UnmodeledSideEffects), 0xaULL, nullptr, nullptr, OperandInfo154, -1 ,nullptr },  // Inst #1189 = MTVRSAVE
  { 1190,	2,	1,	4,	227,	0|(1ULL<<MCID::UnmodeledSideEffects), 0xaULL, nullptr, nullptr, OperandInfo170, -1 ,nullptr },  // Inst #1190 = MTVRSAVEv
  { 1191,	1,	0,	4,	137,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo160, -1 ,nullptr },  // Inst #1191 = MTVSCR
  { 1192,	2,	1,	4,	113,	0, 0x0ULL, nullptr, nullptr, OperandInfo171, -1 ,nullptr },  // Inst #1192 = MTVSRD
  { 1193,	3,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo172, -1 ,nullptr },  // Inst #1193 = MTVSRDD
  { 1194,	2,	1,	4,	113,	0, 0x0ULL, nullptr, nullptr, OperandInfo173, -1 ,nullptr },  // Inst #1194 = MTVSRWA
  { 1195,	2,	1,	4,	163,	0, 0x0ULL, nullptr, nullptr, OperandInfo174, -1 ,nullptr },  // Inst #1195 = MTVSRWS
  { 1196,	2,	1,	4,	113,	0, 0x0ULL, nullptr, nullptr, OperandInfo173, -1 ,nullptr },  // Inst #1196 = MTVSRWZ
  { 1197,	3,	1,	4,	145,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #1197 = MULHD
  { 1198,	3,	1,	4,	146,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #1198 = MULHDU
  { 1199,	3,	1,	4,	153,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #1199 = MULHDUo
  { 1200,	3,	1,	4,	154,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #1200 = MULHDo
  { 1201,	3,	1,	4,	145,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1201 = MULHW
  { 1202,	3,	1,	4,	146,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1202 = MULHWU
  { 1203,	3,	1,	4,	153,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #1203 = MULHWUo
  { 1204,	3,	1,	4,	154,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #1204 = MULHWo
  { 1205,	3,	1,	4,	144,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #1205 = MULLD
  { 1206,	3,	1,	4,	144,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList3, OperandInfo50, -1 ,nullptr },  // Inst #1206 = MULLDO
  { 1207,	3,	1,	4,	155,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList4, OperandInfo50, -1 ,nullptr },  // Inst #1207 = MULLDOo
  { 1208,	3,	1,	4,	155,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #1208 = MULLDo
  { 1209,	3,	1,	4,	147,	0, 0x8ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #1209 = MULLI
  { 1210,	3,	1,	4,	147,	0, 0x8ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #1210 = MULLI8
  { 1211,	3,	1,	4,	145,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1211 = MULLW
  { 1212,	3,	1,	4,	145,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList3, OperandInfo49, -1 ,nullptr },  // Inst #1212 = MULLWO
  { 1213,	3,	1,	4,	154,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList4, OperandInfo49, -1 ,nullptr },  // Inst #1213 = MULLWOo
  { 1214,	3,	1,	4,	154,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #1214 = MULLWo
  { 1215,	0,	0,	4,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, ImplicitList16, nullptr, -1 ,nullptr },  // Inst #1215 = MoveGOTtoLR
  { 1216,	0,	0,	4,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, ImplicitList16, nullptr, -1 ,nullptr },  // Inst #1216 = MovePCtoLR
  { 1217,	0,	0,	4,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, ImplicitList18, nullptr, -1 ,nullptr },  // Inst #1217 = MovePCtoLR8
  { 1218,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1218 = NAND
  { 1219,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #1219 = NAND8
  { 1220,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #1220 = NAND8o
  { 1221,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #1221 = NANDo
  { 1222,	0,	0,	4,	296,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1222 = NAP
  { 1223,	2,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1223 = NEG
  { 1224,	2,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo55, -1 ,nullptr },  // Inst #1224 = NEG8
  { 1225,	2,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo55, -1 ,nullptr },  // Inst #1225 = NEG8O
  { 1226,	2,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList4, OperandInfo55, -1 ,nullptr },  // Inst #1226 = NEG8Oo
  { 1227,	2,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo55, -1 ,nullptr },  // Inst #1227 = NEG8o
  { 1228,	2,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo37, -1 ,nullptr },  // Inst #1228 = NEGO
  { 1229,	2,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList4, OperandInfo37, -1 ,nullptr },  // Inst #1229 = NEGOo
  { 1230,	2,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo37, -1 ,nullptr },  // Inst #1230 = NEGo
  { 1231,	0,	0,	4,	116,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1231 = NOP
  { 1232,	0,	0,	4,	307,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1232 = NOP_GT_PWR6
  { 1233,	0,	0,	4,	307,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1233 = NOP_GT_PWR7
  { 1234,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1234 = NOR
  { 1235,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #1235 = NOR8
  { 1236,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #1236 = NOR8o
  { 1237,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #1237 = NORo
  { 1238,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1238 = OR
  { 1239,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #1239 = OR8
  { 1240,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #1240 = OR8o
  { 1241,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1241 = ORC
  { 1242,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #1242 = ORC8
  { 1243,	3,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #1243 = ORC8o
  { 1244,	3,	1,	4,	116,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #1244 = ORCo
  { 1245,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #1245 = ORI
  { 1246,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #1246 = ORI8
  { 1247,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #1247 = ORIS
  { 1248,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #1248 = ORIS8
  { 1249,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #1249 = ORo
  { 1250,	2,	1,	4,	115,	0, 0x8ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1250 = POPCNTB
  { 1251,	2,	1,	4,	110,	0, 0x8ULL, nullptr, nullptr, OperandInfo55, -1 ,nullptr },  // Inst #1251 = POPCNTD
  { 1252,	2,	1,	4,	110,	0, 0x8ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1252 = POPCNTW
  { 1253,	1,	1,	4,	0,	0, 0x0ULL, nullptr, nullptr, OperandInfo154, -1 ,nullptr },  // Inst #1253 = PPC32GOT
  { 1254,	2,	2,	4,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1254 = PPC32PICGOT
  { 1255,	4,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo175, -1 ,nullptr },  // Inst #1255 = QVALIGNI
  { 1256,	4,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo176, -1 ,nullptr },  // Inst #1256 = QVALIGNIb
  { 1257,	4,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo177, -1 ,nullptr },  // Inst #1257 = QVALIGNIs
  { 1258,	3,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo178, -1 ,nullptr },  // Inst #1258 = QVESPLATI
  { 1259,	3,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo179, -1 ,nullptr },  // Inst #1259 = QVESPLATIb
  { 1260,	3,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo180, -1 ,nullptr },  // Inst #1260 = QVESPLATIs
  { 1261,	2,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1261 = QVFABS
  { 1262,	2,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo182, -1 ,nullptr },  // Inst #1262 = QVFABSs
  { 1263,	3,	1,	4,	21,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo183, -1 ,nullptr },  // Inst #1263 = QVFADD
  { 1264,	3,	1,	4,	21,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo183, -1 ,nullptr },  // Inst #1264 = QVFADDS
  { 1265,	3,	1,	4,	21,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo184, -1 ,nullptr },  // Inst #1265 = QVFADDSs
  { 1266,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1266 = QVFCFID
  { 1267,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1267 = QVFCFIDS
  { 1268,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1268 = QVFCFIDU
  { 1269,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1269 = QVFCFIDUS
  { 1270,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo185, -1 ,nullptr },  // Inst #1270 = QVFCFIDb
  { 1271,	3,	1,	4,	20,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo183, -1 ,nullptr },  // Inst #1271 = QVFCMPEQ
  { 1272,	3,	1,	4,	20,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo186, -1 ,nullptr },  // Inst #1272 = QVFCMPEQb
  { 1273,	3,	1,	4,	20,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo187, -1 ,nullptr },  // Inst #1273 = QVFCMPEQbs
  { 1274,	3,	1,	4,	20,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo183, -1 ,nullptr },  // Inst #1274 = QVFCMPGT
  { 1275,	3,	1,	4,	20,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo186, -1 ,nullptr },  // Inst #1275 = QVFCMPGTb
  { 1276,	3,	1,	4,	20,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo187, -1 ,nullptr },  // Inst #1276 = QVFCMPGTbs
  { 1277,	3,	1,	4,	20,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo183, -1 ,nullptr },  // Inst #1277 = QVFCMPLT
  { 1278,	3,	1,	4,	20,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo186, -1 ,nullptr },  // Inst #1278 = QVFCMPLTb
  { 1279,	3,	1,	4,	20,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo187, -1 ,nullptr },  // Inst #1279 = QVFCMPLTbs
  { 1280,	3,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo183, -1 ,nullptr },  // Inst #1280 = QVFCPSGN
  { 1281,	3,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo184, -1 ,nullptr },  // Inst #1281 = QVFCPSGNs
  { 1282,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1282 = QVFCTID
  { 1283,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1283 = QVFCTIDU
  { 1284,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1284 = QVFCTIDUZ
  { 1285,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1285 = QVFCTIDZ
  { 1286,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo185, -1 ,nullptr },  // Inst #1286 = QVFCTIDb
  { 1287,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1287 = QVFCTIW
  { 1288,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1288 = QVFCTIWU
  { 1289,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1289 = QVFCTIWUZ
  { 1290,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1290 = QVFCTIWZ
  { 1291,	4,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo175, -1 ,nullptr },  // Inst #1291 = QVFLOGICAL
  { 1292,	4,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo176, -1 ,nullptr },  // Inst #1292 = QVFLOGICALb
  { 1293,	4,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo176, -1 ,nullptr },  // Inst #1293 = QVFLOGICALs
  { 1294,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1294 = QVFMADD
  { 1295,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1295 = QVFMADDS
  { 1296,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo189, -1 ,nullptr },  // Inst #1296 = QVFMADDSs
  { 1297,	2,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1297 = QVFMR
  { 1298,	2,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo185, -1 ,nullptr },  // Inst #1298 = QVFMRb
  { 1299,	2,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo182, -1 ,nullptr },  // Inst #1299 = QVFMRs
  { 1300,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1300 = QVFMSUB
  { 1301,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1301 = QVFMSUBS
  { 1302,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo189, -1 ,nullptr },  // Inst #1302 = QVFMSUBSs
  { 1303,	3,	1,	4,	21,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo183, -1 ,nullptr },  // Inst #1303 = QVFMUL
  { 1304,	3,	1,	4,	21,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo183, -1 ,nullptr },  // Inst #1304 = QVFMULS
  { 1305,	3,	1,	4,	21,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo184, -1 ,nullptr },  // Inst #1305 = QVFMULSs
  { 1306,	2,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1306 = QVFNABS
  { 1307,	2,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo182, -1 ,nullptr },  // Inst #1307 = QVFNABSs
  { 1308,	2,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1308 = QVFNEG
  { 1309,	2,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo182, -1 ,nullptr },  // Inst #1309 = QVFNEGs
  { 1310,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1310 = QVFNMADD
  { 1311,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1311 = QVFNMADDS
  { 1312,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo189, -1 ,nullptr },  // Inst #1312 = QVFNMADDSs
  { 1313,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1313 = QVFNMSUB
  { 1314,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1314 = QVFNMSUBS
  { 1315,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo189, -1 ,nullptr },  // Inst #1315 = QVFNMSUBSs
  { 1316,	4,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1316 = QVFPERM
  { 1317,	4,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo190, -1 ,nullptr },  // Inst #1317 = QVFPERMs
  { 1318,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1318 = QVFRE
  { 1319,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1319 = QVFRES
  { 1320,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo182, -1 ,nullptr },  // Inst #1320 = QVFRESs
  { 1321,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1321 = QVFRIM
  { 1322,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo182, -1 ,nullptr },  // Inst #1322 = QVFRIMs
  { 1323,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1323 = QVFRIN
  { 1324,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo182, -1 ,nullptr },  // Inst #1324 = QVFRINs
  { 1325,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1325 = QVFRIP
  { 1326,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo182, -1 ,nullptr },  // Inst #1326 = QVFRIPs
  { 1327,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1327 = QVFRIZ
  { 1328,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo182, -1 ,nullptr },  // Inst #1328 = QVFRIZs
  { 1329,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1329 = QVFRSP
  { 1330,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo191, -1 ,nullptr },  // Inst #1330 = QVFRSPs
  { 1331,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1331 = QVFRSQRTE
  { 1332,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo181, -1 ,nullptr },  // Inst #1332 = QVFRSQRTES
  { 1333,	2,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo182, -1 ,nullptr },  // Inst #1333 = QVFRSQRTESs
  { 1334,	4,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1334 = QVFSEL
  { 1335,	4,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo192, -1 ,nullptr },  // Inst #1335 = QVFSELb
  { 1336,	4,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo193, -1 ,nullptr },  // Inst #1336 = QVFSELbb
  { 1337,	4,	1,	4,	68,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo194, -1 ,nullptr },  // Inst #1337 = QVFSELbs
  { 1338,	3,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo183, -1 ,nullptr },  // Inst #1338 = QVFSUB
  { 1339,	3,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo183, -1 ,nullptr },  // Inst #1339 = QVFSUBS
  { 1340,	3,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo184, -1 ,nullptr },  // Inst #1340 = QVFSUBSs
  { 1341,	3,	1,	4,	20,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo183, -1 ,nullptr },  // Inst #1341 = QVFTSTNAN
  { 1342,	3,	1,	4,	20,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo186, -1 ,nullptr },  // Inst #1342 = QVFTSTNANb
  { 1343,	3,	1,	4,	20,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo187, -1 ,nullptr },  // Inst #1343 = QVFTSTNANbs
  { 1344,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1344 = QVFXMADD
  { 1345,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1345 = QVFXMADDS
  { 1346,	3,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo183, -1 ,nullptr },  // Inst #1346 = QVFXMUL
  { 1347,	3,	1,	4,	21,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo183, -1 ,nullptr },  // Inst #1347 = QVFXMULS
  { 1348,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1348 = QVFXXCPNMADD
  { 1349,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1349 = QVFXXCPNMADDS
  { 1350,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1350 = QVFXXMADD
  { 1351,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1351 = QVFXXMADDS
  { 1352,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1352 = QVFXXNPMADD
  { 1353,	4,	1,	4,	27,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo188, -1 ,nullptr },  // Inst #1353 = QVFXXNPMADDS
  { 1354,	2,	1,	4,	68,	0|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, ImplicitList2, nullptr, OperandInfo195, -1 ,nullptr },  // Inst #1354 = QVGPCI
  { 1355,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1355 = QVLFCDUX
  { 1356,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1356 = QVLFCDUXA
  { 1357,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1357 = QVLFCDX
  { 1358,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1358 = QVLFCDXA
  { 1359,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1359 = QVLFCSUX
  { 1360,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1360 = QVLFCSUXA
  { 1361,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1361 = QVLFCSX
  { 1362,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1362 = QVLFCSXA
  { 1363,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo197, -1 ,nullptr },  // Inst #1363 = QVLFCSXs
  { 1364,	4,	2,	4,	40,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo198, -1 ,nullptr },  // Inst #1364 = QVLFDUX
  { 1365,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1365 = QVLFDUXA
  { 1366,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x80ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1366 = QVLFDX
  { 1367,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1367 = QVLFDXA
  { 1368,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x80ULL, ImplicitList2, nullptr, OperandInfo199, -1 ,nullptr },  // Inst #1368 = QVLFDXb
  { 1369,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1369 = QVLFIWAX
  { 1370,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1370 = QVLFIWAXA
  { 1371,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1371 = QVLFIWZX
  { 1372,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1372 = QVLFIWZXA
  { 1373,	4,	2,	4,	40,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo200, -1 ,nullptr },  // Inst #1373 = QVLFSUX
  { 1374,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1374 = QVLFSUXA
  { 1375,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x80ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1375 = QVLFSX
  { 1376,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1376 = QVLFSXA
  { 1377,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x0ULL, ImplicitList2, nullptr, OperandInfo199, -1 ,nullptr },  // Inst #1377 = QVLFSXb
  { 1378,	3,	1,	4,	39,	0|(1ULL<<MCID::MayLoad), 0x80ULL, ImplicitList2, nullptr, OperandInfo197, -1 ,nullptr },  // Inst #1378 = QVLFSXs
  { 1379,	3,	1,	4,	39,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1379 = QVLPCLDX
  { 1380,	3,	1,	4,	39,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1380 = QVLPCLSX
  { 1381,	2,	1,	4,	39,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo201, -1 ,nullptr },  // Inst #1381 = QVLPCLSXint
  { 1382,	3,	1,	4,	39,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1382 = QVLPCRDX
  { 1383,	3,	1,	4,	39,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1383 = QVLPCRSX
  { 1384,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1384 = QVSTFCDUX
  { 1385,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1385 = QVSTFCDUXA
  { 1386,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1386 = QVSTFCDUXI
  { 1387,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1387 = QVSTFCDUXIA
  { 1388,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1388 = QVSTFCDX
  { 1389,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1389 = QVSTFCDXA
  { 1390,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1390 = QVSTFCDXI
  { 1391,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1391 = QVSTFCDXIA
  { 1392,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1392 = QVSTFCSUX
  { 1393,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1393 = QVSTFCSUXA
  { 1394,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1394 = QVSTFCSUXI
  { 1395,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1395 = QVSTFCSUXIA
  { 1396,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1396 = QVSTFCSX
  { 1397,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1397 = QVSTFCSXA
  { 1398,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1398 = QVSTFCSXI
  { 1399,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1399 = QVSTFCSXIA
  { 1400,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo197, -1 ,nullptr },  // Inst #1400 = QVSTFCSXs
  { 1401,	4,	1,	4,	70,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo202, -1 ,nullptr },  // Inst #1401 = QVSTFDUX
  { 1402,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1402 = QVSTFDUXA
  { 1403,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1403 = QVSTFDUXI
  { 1404,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1404 = QVSTFDUXIA
  { 1405,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x80ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1405 = QVSTFDX
  { 1406,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1406 = QVSTFDXA
  { 1407,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1407 = QVSTFDXI
  { 1408,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1408 = QVSTFDXIA
  { 1409,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x80ULL, ImplicitList2, nullptr, OperandInfo199, -1 ,nullptr },  // Inst #1409 = QVSTFDXb
  { 1410,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1410 = QVSTFIWX
  { 1411,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1411 = QVSTFIWXA
  { 1412,	4,	1,	4,	70,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo203, -1 ,nullptr },  // Inst #1412 = QVSTFSUX
  { 1413,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1413 = QVSTFSUXA
  { 1414,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1414 = QVSTFSUXI
  { 1415,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1415 = QVSTFSUXIA
  { 1416,	4,	1,	4,	70,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo202, -1 ,nullptr },  // Inst #1416 = QVSTFSUXs
  { 1417,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x80ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1417 = QVSTFSX
  { 1418,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1418 = QVSTFSXA
  { 1419,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1419 = QVSTFSXI
  { 1420,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x0ULL, ImplicitList2, nullptr, OperandInfo196, -1 ,nullptr },  // Inst #1420 = QVSTFSXIA
  { 1421,	3,	0,	4,	69,	0|(1ULL<<MCID::MayStore), 0x80ULL, ImplicitList2, nullptr, OperandInfo197, -1 ,nullptr },  // Inst #1421 = QVSTFSXs
  { 1422,	3,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo204, -1 ,nullptr },  // Inst #1422 = RESTORE_CR
  { 1423,	3,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo205, -1 ,nullptr },  // Inst #1423 = RESTORE_CRBIT
  { 1424,	3,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo206, -1 ,nullptr },  // Inst #1424 = RESTORE_VRSAVE
  { 1425,	0,	0,	4,	296,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1425 = RFCI
  { 1426,	0,	0,	4,	296,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1426 = RFDI
  { 1427,	1,	0,	4,	121,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #1427 = RFEBB
  { 1428,	0,	0,	4,	297,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1428 = RFI
  { 1429,	0,	0,	4,	298,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1429 = RFID
  { 1430,	0,	0,	4,	296,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1430 = RFMCI
  { 1431,	4,	1,	4,	124,	0, 0x8ULL, nullptr, nullptr, OperandInfo207, -1 ,nullptr },  // Inst #1431 = RLDCL
  { 1432,	4,	1,	4,	250,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo207, -1 ,nullptr },  // Inst #1432 = RLDCLo
  { 1433,	4,	1,	4,	124,	0, 0x8ULL, nullptr, nullptr, OperandInfo207, -1 ,nullptr },  // Inst #1433 = RLDCR
  { 1434,	4,	1,	4,	250,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo207, -1 ,nullptr },  // Inst #1434 = RLDCRo
  { 1435,	4,	1,	4,	112,	0, 0x8ULL, nullptr, nullptr, OperandInfo33, -1 ,nullptr },  // Inst #1435 = RLDIC
  { 1436,	4,	1,	4,	126,	0, 0x8ULL, nullptr, nullptr, OperandInfo33, -1 ,nullptr },  // Inst #1436 = RLDICL
  { 1437,	4,	1,	4,	126,	0, 0x8ULL, nullptr, nullptr, OperandInfo34, -1 ,nullptr },  // Inst #1437 = RLDICL_32
  { 1438,	4,	1,	4,	126,	0, 0x8ULL, nullptr, nullptr, OperandInfo208, -1 ,nullptr },  // Inst #1438 = RLDICL_32_64
  { 1439,	4,	1,	4,	251,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo34, -1 ,nullptr },  // Inst #1439 = RLDICL_32o
  { 1440,	4,	1,	4,	251,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo33, -1 ,nullptr },  // Inst #1440 = RLDICLo
  { 1441,	4,	1,	4,	126,	0, 0x8ULL, nullptr, nullptr, OperandInfo33, -1 ,nullptr },  // Inst #1441 = RLDICR
  { 1442,	4,	1,	4,	126,	0, 0x8ULL, nullptr, nullptr, OperandInfo34, -1 ,nullptr },  // Inst #1442 = RLDICR_32
  { 1443,	4,	1,	4,	251,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo33, -1 ,nullptr },  // Inst #1443 = RLDICRo
  { 1444,	4,	1,	4,	257,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo33, -1 ,nullptr },  // Inst #1444 = RLDICo
  { 1445,	5,	1,	4,	126,	0, 0x8ULL, nullptr, nullptr, OperandInfo209, -1 ,nullptr },  // Inst #1445 = RLDIMI
  { 1446,	5,	1,	4,	251,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo209, -1 ,nullptr },  // Inst #1446 = RLDIMIo
  { 1447,	6,	1,	4,	125,	0|(1ULL<<MCID::Commutable), 0xcULL, nullptr, nullptr, OperandInfo210, -1 ,nullptr },  // Inst #1447 = RLWIMI
  { 1448,	6,	1,	4,	125,	0, 0xcULL, nullptr, nullptr, OperandInfo211, -1 ,nullptr },  // Inst #1448 = RLWIMI8
  { 1449,	6,	1,	4,	252,	0, 0xcULL, nullptr, ImplicitList5, OperandInfo211, -1 ,nullptr },  // Inst #1449 = RLWIMI8o
  { 1450,	6,	1,	4,	252,	0|(1ULL<<MCID::Commutable), 0xcULL, nullptr, ImplicitList5, OperandInfo210, -1 ,nullptr },  // Inst #1450 = RLWIMIo
  { 1451,	5,	1,	4,	130,	0, 0x8ULL, nullptr, nullptr, OperandInfo212, -1 ,nullptr },  // Inst #1451 = RLWINM
  { 1452,	5,	1,	4,	130,	0, 0x8ULL, nullptr, nullptr, OperandInfo213, -1 ,nullptr },  // Inst #1452 = RLWINM8
  { 1453,	5,	1,	4,	253,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo213, -1 ,nullptr },  // Inst #1453 = RLWINM8o
  { 1454,	5,	1,	4,	253,	0, 0xcULL, nullptr, ImplicitList5, OperandInfo212, -1 ,nullptr },  // Inst #1454 = RLWINMo
  { 1455,	5,	1,	4,	130,	0, 0x8ULL, nullptr, nullptr, OperandInfo214, -1 ,nullptr },  // Inst #1455 = RLWNM
  { 1456,	5,	1,	4,	130,	0, 0x8ULL, nullptr, nullptr, OperandInfo215, -1 ,nullptr },  // Inst #1456 = RLWNM8
  { 1457,	5,	1,	4,	253,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo215, -1 ,nullptr },  // Inst #1457 = RLWNM8o
  { 1458,	5,	1,	4,	253,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo214, -1 ,nullptr },  // Inst #1458 = RLWNMo
  { 1459,	2,	2,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1459 = ReadTB
  { 1460,	1,	0,	4,	296,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #1460 = SC
  { 1461,	5,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo216, -1 ,nullptr },  // Inst #1461 = SELECT_CC_F16
  { 1462,	5,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo217, -1 ,nullptr },  // Inst #1462 = SELECT_CC_F4
  { 1463,	5,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo218, -1 ,nullptr },  // Inst #1463 = SELECT_CC_F8
  { 1464,	5,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo219, -1 ,nullptr },  // Inst #1464 = SELECT_CC_I4
  { 1465,	5,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo220, -1 ,nullptr },  // Inst #1465 = SELECT_CC_I8
  { 1466,	5,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, nullptr, OperandInfo221, -1 ,nullptr },  // Inst #1466 = SELECT_CC_QBRC
  { 1467,	5,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, nullptr, OperandInfo222, -1 ,nullptr },  // Inst #1467 = SELECT_CC_QFRC
  { 1468,	5,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, nullptr, OperandInfo223, -1 ,nullptr },  // Inst #1468 = SELECT_CC_QSRC
  { 1469,	5,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo224, -1 ,nullptr },  // Inst #1469 = SELECT_CC_SPE
  { 1470,	5,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo225, -1 ,nullptr },  // Inst #1470 = SELECT_CC_SPE4
  { 1471,	5,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo216, -1 ,nullptr },  // Inst #1471 = SELECT_CC_VRRC
  { 1472,	5,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo218, -1 ,nullptr },  // Inst #1472 = SELECT_CC_VSFRC
  { 1473,	5,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo226, -1 ,nullptr },  // Inst #1473 = SELECT_CC_VSRC
  { 1474,	5,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo217, -1 ,nullptr },  // Inst #1474 = SELECT_CC_VSSRC
  { 1475,	4,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo227, -1 ,nullptr },  // Inst #1475 = SELECT_F16
  { 1476,	4,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo228, -1 ,nullptr },  // Inst #1476 = SELECT_F4
  { 1477,	4,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo229, -1 ,nullptr },  // Inst #1477 = SELECT_F8
  { 1478,	4,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo230, -1 ,nullptr },  // Inst #1478 = SELECT_I4
  { 1479,	4,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo231, -1 ,nullptr },  // Inst #1479 = SELECT_I8
  { 1480,	4,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, nullptr, OperandInfo232, -1 ,nullptr },  // Inst #1480 = SELECT_QBRC
  { 1481,	4,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, nullptr, OperandInfo233, -1 ,nullptr },  // Inst #1481 = SELECT_QFRC
  { 1482,	4,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList2, nullptr, OperandInfo234, -1 ,nullptr },  // Inst #1482 = SELECT_QSRC
  { 1483,	4,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo235, -1 ,nullptr },  // Inst #1483 = SELECT_SPE
  { 1484,	4,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo236, -1 ,nullptr },  // Inst #1484 = SELECT_SPE4
  { 1485,	4,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo227, -1 ,nullptr },  // Inst #1485 = SELECT_VRRC
  { 1486,	4,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo229, -1 ,nullptr },  // Inst #1486 = SELECT_VSFRC
  { 1487,	4,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo237, -1 ,nullptr },  // Inst #1487 = SELECT_VSRC
  { 1488,	4,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo228, -1 ,nullptr },  // Inst #1488 = SELECT_VSSRC
  { 1489,	2,	1,	4,	110,	0, 0x8ULL, nullptr, nullptr, OperandInfo238, -1 ,nullptr },  // Inst #1489 = SETB
  { 1490,	2,	1,	4,	110,	0, 0x8ULL, nullptr, nullptr, OperandInfo239, -1 ,nullptr },  // Inst #1490 = SETB8
  { 1491,	2,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, ImplicitList2, OperandInfo240, -1 ,nullptr },  // Inst #1491 = SETRND
  { 1492,	2,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList2, ImplicitList2, OperandInfo157, -1 ,nullptr },  // Inst #1492 = SETRNDi
  { 1493,	2,	1,	4,	312,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo37, -1 ,nullptr },  // Inst #1493 = SLBFEEo
  { 1494,	0,	0,	4,	190,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1494 = SLBIA
  { 1495,	1,	0,	4,	191,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo154, -1 ,nullptr },  // Inst #1495 = SLBIE
  { 1496,	2,	0,	4,	220,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1496 = SLBIEG
  { 1497,	2,	1,	4,	192,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1497 = SLBMFEE
  { 1498,	2,	1,	4,	193,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1498 = SLBMFEV
  { 1499,	2,	0,	4,	194,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1499 = SLBMTE
  { 1500,	0,	0,	4,	311,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1500 = SLBSYNC
  { 1501,	3,	1,	4,	111,	0, 0x8ULL, nullptr, nullptr, OperandInfo241, -1 ,nullptr },  // Inst #1501 = SLD
  { 1502,	3,	1,	4,	258,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo241, -1 ,nullptr },  // Inst #1502 = SLDo
  { 1503,	3,	1,	4,	130,	0, 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1503 = SLW
  { 1504,	3,	1,	4,	130,	0, 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #1504 = SLW8
  { 1505,	3,	1,	4,	253,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #1505 = SLW8o
  { 1506,	3,	1,	4,	253,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #1506 = SLWo
  { 1507,	3,	1,	4,	13,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo242, -1 ,nullptr },  // Inst #1507 = SPELWZ
  { 1508,	3,	1,	4,	13,	0|(1ULL<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo243, -1 ,nullptr },  // Inst #1508 = SPELWZX
  { 1509,	3,	0,	4,	24,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo242, -1 ,nullptr },  // Inst #1509 = SPESTW
  { 1510,	3,	0,	4,	24,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo243, -1 ,nullptr },  // Inst #1510 = SPESTWX
  { 1511,	3,	0,	4,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo204, -1 ,nullptr },  // Inst #1511 = SPILL_CR
  { 1512,	3,	0,	4,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo205, -1 ,nullptr },  // Inst #1512 = SPILL_CRBIT
  { 1513,	3,	0,	4,	0,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo206, -1 ,nullptr },  // Inst #1513 = SPILL_VRSAVE
  { 1514,	3,	1,	4,	111,	0, 0x8ULL, nullptr, ImplicitList6, OperandInfo241, -1 ,nullptr },  // Inst #1514 = SRAD
  { 1515,	3,	1,	4,	112,	0, 0x8ULL, nullptr, ImplicitList6, OperandInfo35, -1 ,nullptr },  // Inst #1515 = SRADI
  { 1516,	3,	1,	4,	112,	0, 0x8ULL, nullptr, ImplicitList6, OperandInfo36, -1 ,nullptr },  // Inst #1516 = SRADI_32
  { 1517,	3,	1,	4,	257,	0, 0x8ULL, nullptr, ImplicitList9, OperandInfo35, -1 ,nullptr },  // Inst #1517 = SRADIo
  { 1518,	3,	1,	4,	258,	0, 0x8ULL, nullptr, ImplicitList9, OperandInfo241, -1 ,nullptr },  // Inst #1518 = SRADo
  { 1519,	3,	1,	4,	132,	0, 0x8ULL, nullptr, ImplicitList6, OperandInfo49, -1 ,nullptr },  // Inst #1519 = SRAW
  { 1520,	3,	1,	4,	132,	0, 0x8ULL, nullptr, ImplicitList6, OperandInfo36, -1 ,nullptr },  // Inst #1520 = SRAWI
  { 1521,	3,	1,	4,	254,	0, 0x8ULL, nullptr, ImplicitList9, OperandInfo36, -1 ,nullptr },  // Inst #1521 = SRAWIo
  { 1522,	3,	1,	4,	254,	0, 0x8ULL, nullptr, ImplicitList9, OperandInfo49, -1 ,nullptr },  // Inst #1522 = SRAWo
  { 1523,	3,	1,	4,	111,	0, 0x8ULL, nullptr, nullptr, OperandInfo241, -1 ,nullptr },  // Inst #1523 = SRD
  { 1524,	3,	1,	4,	258,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo241, -1 ,nullptr },  // Inst #1524 = SRDo
  { 1525,	3,	1,	4,	130,	0, 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1525 = SRW
  { 1526,	3,	1,	4,	130,	0, 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #1526 = SRW8
  { 1527,	3,	1,	4,	253,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #1527 = SRW8o
  { 1528,	3,	1,	4,	253,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #1528 = SRWo
  { 1529,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo42, -1 ,nullptr },  // Inst #1529 = STB
  { 1530,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo123, -1 ,nullptr },  // Inst #1530 = STB8
  { 1531,	3,	0,	4,	219,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1531 = STBCIX
  { 1532,	3,	0,	4,	199,	0|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, ImplicitList5, OperandInfo122, -1 ,nullptr },  // Inst #1532 = STBCX
  { 1533,	3,	0,	4,	300,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1533 = STBEPX
  { 1534,	4,	1,	4,	278,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo244, -1 ,nullptr },  // Inst #1534 = STBU
  { 1535,	4,	1,	4,	278,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo245, -1 ,nullptr },  // Inst #1535 = STBU8
  { 1536,	4,	1,	4,	279,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo246, -1 ,nullptr },  // Inst #1536 = STBUX
  { 1537,	4,	1,	4,	279,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo247, -1 ,nullptr },  // Inst #1537 = STBUX8
  { 1538,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1538 = STBX
  { 1539,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1539 = STBX8
  { 1540,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0xcULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1540 = STBXTLS
  { 1541,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0xcULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1541 = STBXTLS_
  { 1542,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0xcULL, nullptr, nullptr, OperandInfo130, -1 ,nullptr },  // Inst #1542 = STBXTLS_32
  { 1543,	3,	0,	4,	218,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo123, -1 ,nullptr },  // Inst #1543 = STD
  { 1544,	3,	0,	4,	290,	0|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #1544 = STDAT
  { 1545,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1545 = STDBRX
  { 1546,	3,	0,	4,	219,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1546 = STDCIX
  { 1547,	3,	0,	4,	200,	0|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, ImplicitList5, OperandInfo128, -1 ,nullptr },  // Inst #1547 = STDCX
  { 1548,	4,	1,	4,	278,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo245, -1 ,nullptr },  // Inst #1548 = STDU
  { 1549,	4,	1,	4,	279,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo247, -1 ,nullptr },  // Inst #1549 = STDUX
  { 1550,	3,	0,	4,	218,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1550 = STDX
  { 1551,	3,	0,	4,	218,	0|(1ULL<<MCID::MayStore), 0xcULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1551 = STDXTLS
  { 1552,	3,	0,	4,	218,	0|(1ULL<<MCID::MayStore), 0xcULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1552 = STDXTLS_
  { 1553,	3,	0,	4,	215,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo134, -1 ,nullptr },  // Inst #1553 = STFD
  { 1554,	3,	0,	4,	302,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo135, -1 ,nullptr },  // Inst #1554 = STFDEPX
  { 1555,	4,	1,	4,	277,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo248, -1 ,nullptr },  // Inst #1555 = STFDU
  { 1556,	4,	1,	4,	277,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo249, -1 ,nullptr },  // Inst #1556 = STFDUX
  { 1557,	3,	0,	4,	215,	0|(1ULL<<MCID::MayStore), 0x90ULL, nullptr, nullptr, OperandInfo135, -1 ,nullptr },  // Inst #1557 = STFDX
  { 1558,	3,	0,	4,	215,	0|(1ULL<<MCID::MayStore), 0x90ULL, nullptr, nullptr, OperandInfo135, -1 ,nullptr },  // Inst #1558 = STFIWX
  { 1559,	3,	0,	4,	215,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo138, -1 ,nullptr },  // Inst #1559 = STFS
  { 1560,	4,	1,	4,	277,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo250, -1 ,nullptr },  // Inst #1560 = STFSU
  { 1561,	4,	1,	4,	277,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo251, -1 ,nullptr },  // Inst #1561 = STFSUX
  { 1562,	3,	0,	4,	215,	0|(1ULL<<MCID::MayStore), 0x90ULL, nullptr, nullptr, OperandInfo141, -1 ,nullptr },  // Inst #1562 = STFSX
  { 1563,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo42, -1 ,nullptr },  // Inst #1563 = STH
  { 1564,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo123, -1 ,nullptr },  // Inst #1564 = STH8
  { 1565,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1565 = STHBRX
  { 1566,	3,	0,	4,	219,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1566 = STHCIX
  { 1567,	3,	0,	4,	199,	0|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, ImplicitList5, OperandInfo122, -1 ,nullptr },  // Inst #1567 = STHCX
  { 1568,	3,	0,	4,	300,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1568 = STHEPX
  { 1569,	4,	1,	4,	278,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo244, -1 ,nullptr },  // Inst #1569 = STHU
  { 1570,	4,	1,	4,	278,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo245, -1 ,nullptr },  // Inst #1570 = STHU8
  { 1571,	4,	1,	4,	279,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo246, -1 ,nullptr },  // Inst #1571 = STHUX
  { 1572,	4,	1,	4,	279,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo247, -1 ,nullptr },  // Inst #1572 = STHUX8
  { 1573,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1573 = STHX
  { 1574,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1574 = STHX8
  { 1575,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0xcULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1575 = STHXTLS
  { 1576,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0xcULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1576 = STHXTLS_
  { 1577,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0xcULL, nullptr, nullptr, OperandInfo130, -1 ,nullptr },  // Inst #1577 = STHXTLS_32
  { 1578,	3,	0,	4,	221,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo42, -1 ,nullptr },  // Inst #1578 = STMW
  { 1579,	0,	0,	4,	313,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1579 = STOP
  { 1580,	3,	0,	4,	219,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #1580 = STSWI
  { 1581,	3,	0,	4,	223,	0|(1ULL<<MCID::MayStore), 0x90ULL, nullptr, nullptr, OperandInfo143, -1 ,nullptr },  // Inst #1581 = STVEBX
  { 1582,	3,	0,	4,	223,	0|(1ULL<<MCID::MayStore), 0x90ULL, nullptr, nullptr, OperandInfo143, -1 ,nullptr },  // Inst #1582 = STVEHX
  { 1583,	3,	0,	4,	223,	0|(1ULL<<MCID::MayStore), 0x90ULL, nullptr, nullptr, OperandInfo143, -1 ,nullptr },  // Inst #1583 = STVEWX
  { 1584,	3,	0,	4,	223,	0|(1ULL<<MCID::MayStore), 0x90ULL, nullptr, nullptr, OperandInfo143, -1 ,nullptr },  // Inst #1584 = STVX
  { 1585,	3,	0,	4,	223,	0|(1ULL<<MCID::MayStore), 0x90ULL, nullptr, nullptr, OperandInfo143, -1 ,nullptr },  // Inst #1585 = STVXL
  { 1586,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo42, -1 ,nullptr },  // Inst #1586 = STW
  { 1587,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo123, -1 ,nullptr },  // Inst #1587 = STW8
  { 1588,	3,	0,	4,	290,	0|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #1588 = STWAT
  { 1589,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1589 = STWBRX
  { 1590,	3,	0,	4,	219,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1590 = STWCIX
  { 1591,	3,	0,	4,	199,	0|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, ImplicitList5, OperandInfo122, -1 ,nullptr },  // Inst #1591 = STWCX
  { 1592,	3,	0,	4,	300,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1592 = STWEPX
  { 1593,	4,	1,	4,	278,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo244, -1 ,nullptr },  // Inst #1593 = STWU
  { 1594,	4,	1,	4,	278,	0|(1ULL<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo245, -1 ,nullptr },  // Inst #1594 = STWU8
  { 1595,	4,	1,	4,	279,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo246, -1 ,nullptr },  // Inst #1595 = STWUX
  { 1596,	4,	1,	4,	279,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo247, -1 ,nullptr },  // Inst #1596 = STWUX8
  { 1597,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo122, -1 ,nullptr },  // Inst #1597 = STWX
  { 1598,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0x94ULL, nullptr, nullptr, OperandInfo128, -1 ,nullptr },  // Inst #1598 = STWX8
  { 1599,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0xcULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1599 = STWXTLS
  { 1600,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0xcULL, nullptr, nullptr, OperandInfo129, -1 ,nullptr },  // Inst #1600 = STWXTLS_
  { 1601,	3,	0,	4,	216,	0|(1ULL<<MCID::MayStore), 0xcULL, nullptr, nullptr, OperandInfo130, -1 ,nullptr },  // Inst #1601 = STWXTLS_32
  { 1602,	3,	0,	4,	215,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo145, -1 ,nullptr },  // Inst #1602 = STXSD
  { 1603,	3,	0,	4,	215,	0|(1ULL<<MCID::MayStore), 0x80ULL, ImplicitList2, nullptr, OperandInfo43, -1 ,nullptr },  // Inst #1603 = STXSDX
  { 1604,	3,	0,	4,	215,	0|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, nullptr, OperandInfo43, -1 ,nullptr },  // Inst #1604 = STXSIBX
  { 1605,	3,	0,	4,	215,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo147, -1 ,nullptr },  // Inst #1605 = STXSIBXv
  { 1606,	3,	0,	4,	215,	0|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, nullptr, OperandInfo43, -1 ,nullptr },  // Inst #1606 = STXSIHX
  { 1607,	3,	0,	4,	215,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo147, -1 ,nullptr },  // Inst #1607 = STXSIHXv
  { 1608,	3,	0,	4,	215,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo43, -1 ,nullptr },  // Inst #1608 = STXSIWX
  { 1609,	3,	0,	4,	215,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo145, -1 ,nullptr },  // Inst #1609 = STXSSP
  { 1610,	3,	0,	4,	215,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo48, -1 ,nullptr },  // Inst #1610 = STXSSPX
  { 1611,	3,	0,	4,	224,	0|(1ULL<<MCID::MayStore), 0x0ULL, nullptr, nullptr, OperandInfo146, -1 ,nullptr },  // Inst #1611 = STXV
  { 1612,	3,	0,	4,	224,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo147, -1 ,nullptr },  // Inst #1612 = STXVB16X
  { 1613,	3,	0,	4,	224,	0|(1ULL<<MCID::MayStore), 0x80ULL, ImplicitList2, nullptr, OperandInfo147, -1 ,nullptr },  // Inst #1613 = STXVD2X
  { 1614,	3,	0,	4,	224,	0|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x80ULL, nullptr, nullptr, OperandInfo147, -1 ,nullptr },  // Inst #1614 = STXVH8X
  { 1615,	3,	0,	4,	225,	0|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, nullptr, OperandInfo148, -1 ,nullptr },  // Inst #1615 = STXVL
  { 1616,	3,	0,	4,	225,	0|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, nullptr, OperandInfo148, -1 ,nullptr },  // Inst #1616 = STXVLL
  { 1617,	3,	0,	4,	224,	0|(1ULL<<MCID::MayStore), 0x80ULL, ImplicitList2, nullptr, OperandInfo147, -1 ,nullptr },  // Inst #1617 = STXVW4X
  { 1618,	3,	0,	4,	224,	0|(1ULL<<MCID::MayStore), 0x80ULL, nullptr, nullptr, OperandInfo147, -1 ,nullptr },  // Inst #1618 = STXVX
  { 1619,	3,	1,	4,	115,	0, 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1619 = SUBF
  { 1620,	3,	1,	4,	115,	0, 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #1620 = SUBF8
  { 1621,	3,	1,	4,	115,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo50, -1 ,nullptr },  // Inst #1621 = SUBF8O
  { 1622,	3,	1,	4,	115,	0, 0x8ULL, nullptr, ImplicitList4, OperandInfo50, -1 ,nullptr },  // Inst #1622 = SUBF8Oo
  { 1623,	3,	1,	4,	115,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #1623 = SUBF8o
  { 1624,	3,	1,	4,	115,	0, 0xcULL, nullptr, ImplicitList6, OperandInfo49, -1 ,nullptr },  // Inst #1624 = SUBFC
  { 1625,	3,	1,	4,	115,	0, 0xcULL, nullptr, ImplicitList6, OperandInfo50, -1 ,nullptr },  // Inst #1625 = SUBFC8
  { 1626,	3,	1,	4,	115,	0, 0xcULL, nullptr, ImplicitList7, OperandInfo50, -1 ,nullptr },  // Inst #1626 = SUBFC8O
  { 1627,	3,	1,	4,	245,	0, 0xcULL, nullptr, ImplicitList8, OperandInfo50, -1 ,nullptr },  // Inst #1627 = SUBFC8Oo
  { 1628,	3,	1,	4,	245,	0, 0xcULL, nullptr, ImplicitList9, OperandInfo50, -1 ,nullptr },  // Inst #1628 = SUBFC8o
  { 1629,	3,	1,	4,	115,	0, 0xcULL, nullptr, ImplicitList7, OperandInfo49, -1 ,nullptr },  // Inst #1629 = SUBFCO
  { 1630,	3,	1,	4,	245,	0, 0xcULL, nullptr, ImplicitList8, OperandInfo49, -1 ,nullptr },  // Inst #1630 = SUBFCOo
  { 1631,	3,	1,	4,	245,	0, 0xcULL, nullptr, ImplicitList9, OperandInfo49, -1 ,nullptr },  // Inst #1631 = SUBFCo
  { 1632,	3,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList6, OperandInfo49, -1 ,nullptr },  // Inst #1632 = SUBFE
  { 1633,	3,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList6, OperandInfo50, -1 ,nullptr },  // Inst #1633 = SUBFE8
  { 1634,	3,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList7, OperandInfo50, -1 ,nullptr },  // Inst #1634 = SUBFE8O
  { 1635,	3,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList8, OperandInfo50, -1 ,nullptr },  // Inst #1635 = SUBFE8Oo
  { 1636,	3,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList9, OperandInfo50, -1 ,nullptr },  // Inst #1636 = SUBFE8o
  { 1637,	3,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList7, OperandInfo49, -1 ,nullptr },  // Inst #1637 = SUBFEO
  { 1638,	3,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList8, OperandInfo49, -1 ,nullptr },  // Inst #1638 = SUBFEOo
  { 1639,	3,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList9, OperandInfo49, -1 ,nullptr },  // Inst #1639 = SUBFEo
  { 1640,	3,	1,	4,	115,	0, 0x8ULL, nullptr, ImplicitList6, OperandInfo36, -1 ,nullptr },  // Inst #1640 = SUBFIC
  { 1641,	3,	1,	4,	115,	0, 0x8ULL, nullptr, ImplicitList6, OperandInfo35, -1 ,nullptr },  // Inst #1641 = SUBFIC8
  { 1642,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList6, OperandInfo37, -1 ,nullptr },  // Inst #1642 = SUBFME
  { 1643,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList6, OperandInfo55, -1 ,nullptr },  // Inst #1643 = SUBFME8
  { 1644,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList7, OperandInfo55, -1 ,nullptr },  // Inst #1644 = SUBFME8O
  { 1645,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList8, OperandInfo55, -1 ,nullptr },  // Inst #1645 = SUBFME8Oo
  { 1646,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList9, OperandInfo55, -1 ,nullptr },  // Inst #1646 = SUBFME8o
  { 1647,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList7, OperandInfo37, -1 ,nullptr },  // Inst #1647 = SUBFMEO
  { 1648,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList8, OperandInfo37, -1 ,nullptr },  // Inst #1648 = SUBFMEOo
  { 1649,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList9, OperandInfo37, -1 ,nullptr },  // Inst #1649 = SUBFMEo
  { 1650,	3,	1,	4,	115,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo49, -1 ,nullptr },  // Inst #1650 = SUBFO
  { 1651,	3,	1,	4,	115,	0, 0x8ULL, nullptr, ImplicitList4, OperandInfo49, -1 ,nullptr },  // Inst #1651 = SUBFOo
  { 1652,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList6, OperandInfo37, -1 ,nullptr },  // Inst #1652 = SUBFZE
  { 1653,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList6, OperandInfo55, -1 ,nullptr },  // Inst #1653 = SUBFZE8
  { 1654,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList7, OperandInfo55, -1 ,nullptr },  // Inst #1654 = SUBFZE8O
  { 1655,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList8, OperandInfo55, -1 ,nullptr },  // Inst #1655 = SUBFZE8Oo
  { 1656,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList9, OperandInfo55, -1 ,nullptr },  // Inst #1656 = SUBFZE8o
  { 1657,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList7, OperandInfo37, -1 ,nullptr },  // Inst #1657 = SUBFZEO
  { 1658,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList8, OperandInfo37, -1 ,nullptr },  // Inst #1658 = SUBFZEOo
  { 1659,	2,	1,	4,	115,	0, 0x8ULL, ImplicitList6, ImplicitList9, OperandInfo37, -1 ,nullptr },  // Inst #1659 = SUBFZEo
  { 1660,	3,	1,	4,	115,	0, 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #1660 = SUBFo
  { 1661,	1,	0,	4,	187,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #1661 = SYNC
  { 1662,	1,	0,	4,	135,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo154, -1 ,nullptr },  // Inst #1662 = TABORT
  { 1663,	3,	0,	4,	100,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo81, -1 ,nullptr },  // Inst #1663 = TABORTDC
  { 1664,	3,	0,	4,	100,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo252, -1 ,nullptr },  // Inst #1664 = TABORTDCI
  { 1665,	3,	0,	4,	100,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo81, -1 ,nullptr },  // Inst #1665 = TABORTWC
  { 1666,	3,	0,	4,	100,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo252, -1 ,nullptr },  // Inst #1666 = TABORTWCI
  { 1667,	1,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList2, nullptr, OperandInfo72, -1 ,nullptr },  // Inst #1667 = TAILB
  { 1668,	1,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList2, nullptr, OperandInfo72, -1 ,nullptr },  // Inst #1668 = TAILB8
  { 1669,	1,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList2, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #1669 = TAILBA
  { 1670,	1,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList2, nullptr, OperandInfo2, -1 ,nullptr },  // Inst #1670 = TAILBA8
  { 1671,	0,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, nullptr, nullptr, -1 ,nullptr },  // Inst #1671 = TAILBCTR
  { 1672,	0,	0,	4,	287,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Branch)|(1ULL<<MCID::IndirectBranch)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList17, nullptr, nullptr, -1 ,nullptr },  // Inst #1672 = TAILBCTR8
  { 1673,	1,	0,	4,	122,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo2, -1 ,nullptr },  // Inst #1673 = TBEGIN
  { 1674,	2,	1,	4,	0,	0|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo142, -1 ,nullptr },  // Inst #1674 = TBEGIN_RET
  { 1675,	1,	1,	4,	205,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo152, -1 ,nullptr },  // Inst #1675 = TCHECK
  { 1676,	1,	1,	4,	0,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UsesCustomInserter)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo154, -1 ,nullptr },  // Inst #1676 = TCHECK_RET
  { 1677,	2,	0,	4,	0,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, nullptr, OperandInfo253, -1 ,nullptr },  // Inst #1677 = TCRETURNai
  { 1678,	2,	0,	4,	0,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, nullptr, OperandInfo253, -1 ,nullptr },  // Inst #1678 = TCRETURNai8
  { 1679,	2,	0,	4,	0,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, nullptr, OperandInfo254, -1 ,nullptr },  // Inst #1679 = TCRETURNdi
  { 1680,	2,	0,	4,	0,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, nullptr, OperandInfo254, -1 ,nullptr },  // Inst #1680 = TCRETURNdi8
  { 1681,	2,	0,	4,	0,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, nullptr, OperandInfo255, -1 ,nullptr },  // Inst #1681 = TCRETURNri
  { 1682,	2,	0,	4,	0,	0|(1ULL<<MCID::Return)|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Call)|(1ULL<<MCID::Terminator), 0x0ULL, ImplicitList2, nullptr, OperandInfo256, -1 ,nullptr },  // Inst #1682 = TCRETURNri8
  { 1683,	3,	0,	4,	104,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo257, -1 ,nullptr },  // Inst #1683 = TD
  { 1684,	3,	0,	4,	104,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo258, -1 ,nullptr },  // Inst #1684 = TDI
  { 1685,	1,	0,	4,	198,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo2, -1 ,nullptr },  // Inst #1685 = TEND
  { 1686,	0,	0,	4,	308,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1686 = TLBIA
  { 1687,	2,	0,	4,	222,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1687 = TLBIE
  { 1688,	1,	0,	4,	195,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo154, -1 ,nullptr },  // Inst #1688 = TLBIEL
  { 1689,	2,	0,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1689 = TLBIVAX
  { 1690,	1,	0,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo154, -1 ,nullptr },  // Inst #1690 = TLBLD
  { 1691,	1,	0,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo154, -1 ,nullptr },  // Inst #1691 = TLBLI
  { 1692,	0,	0,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1692 = TLBRE
  { 1693,	3,	1,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo259, -1 ,nullptr },  // Inst #1693 = TLBRE2
  { 1694,	2,	0,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1694 = TLBSX
  { 1695,	3,	0,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1695 = TLBSX2
  { 1696,	3,	0,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1696 = TLBSX2D
  { 1697,	0,	0,	4,	186,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1697 = TLBSYNC
  { 1698,	0,	0,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1698 = TLBWE
  { 1699,	3,	0,	4,	299,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo259, -1 ,nullptr },  // Inst #1699 = TLBWE2
  { 1700,	0,	0,	4,	299,	0|(1ULL<<MCID::Barrier)|(1ULL<<MCID::Terminator)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr, -1 ,nullptr },  // Inst #1700 = TRAP
  { 1701,	0,	0,	4,	122,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, nullptr, -1 ,nullptr },  // Inst #1701 = TRECHKPT
  { 1702,	1,	0,	4,	135,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo154, -1 ,nullptr },  // Inst #1702 = TRECLAIM
  { 1703,	1,	0,	4,	135,	0|(1ULL<<MCID::MayLoad)|(1ULL<<MCID::MayStore)|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo2, -1 ,nullptr },  // Inst #1703 = TSR
  { 1704,	3,	0,	4,	105,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo81, -1 ,nullptr },  // Inst #1704 = TW
  { 1705,	3,	0,	4,	105,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo252, -1 ,nullptr },  // Inst #1705 = TWI
  { 1706,	2,	1,	4,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37, -1 ,nullptr },  // Inst #1706 = UPDATE_VRSAVE
  { 1707,	3,	2,	4,	0,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #1707 = UpdateGBR
  { 1708,	3,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1708 = VABSDUB
  { 1709,	3,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1709 = VABSDUH
  { 1710,	3,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1710 = VABSDUW
  { 1711,	3,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1711 = VADDCUQ
  { 1712,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1712 = VADDCUW
  { 1713,	4,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1713 = VADDECUQ
  { 1714,	4,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1714 = VADDEUQM
  { 1715,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1715 = VADDFP
  { 1716,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1716 = VADDSBS
  { 1717,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1717 = VADDSHS
  { 1718,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1718 = VADDSWS
  { 1719,	3,	1,	4,	97,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1719 = VADDUBM
  { 1720,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1720 = VADDUBS
  { 1721,	3,	1,	4,	97,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1721 = VADDUDM
  { 1722,	3,	1,	4,	97,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1722 = VADDUHM
  { 1723,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1723 = VADDUHS
  { 1724,	3,	1,	4,	163,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1724 = VADDUQM
  { 1725,	3,	1,	4,	97,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1725 = VADDUWM
  { 1726,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1726 = VADDUWS
  { 1727,	3,	1,	4,	98,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1727 = VAND
  { 1728,	3,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1728 = VANDC
  { 1729,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1729 = VAVGSB
  { 1730,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1730 = VAVGSH
  { 1731,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1731 = VAVGSW
  { 1732,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1732 = VAVGUB
  { 1733,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1733 = VAVGUH
  { 1734,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1734 = VAVGUW
  { 1735,	3,	1,	4,	140,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1735 = VBPERMD
  { 1736,	3,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1736 = VBPERMQ
  { 1737,	3,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo261, -1 ,nullptr },  // Inst #1737 = VCFSX
  { 1738,	2,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1738 = VCFSX_0
  { 1739,	3,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo261, -1 ,nullptr },  // Inst #1739 = VCFUX
  { 1740,	2,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1740 = VCFUX_0
  { 1741,	3,	1,	4,	286,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1741 = VCIPHER
  { 1742,	3,	1,	4,	286,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1742 = VCIPHERLAST
  { 1743,	2,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1743 = VCLZB
  { 1744,	2,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1744 = VCLZD
  { 1745,	2,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1745 = VCLZH
  { 1746,	2,	1,	4,	163,	0, 0x0ULL, nullptr, nullptr, OperandInfo262, -1 ,nullptr },  // Inst #1746 = VCLZLSBB
  { 1747,	2,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1747 = VCLZW
  { 1748,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1748 = VCMPBFP
  { 1749,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1749 = VCMPBFPo
  { 1750,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1750 = VCMPEQFP
  { 1751,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1751 = VCMPEQFPo
  { 1752,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1752 = VCMPEQUB
  { 1753,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1753 = VCMPEQUBo
  { 1754,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1754 = VCMPEQUD
  { 1755,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1755 = VCMPEQUDo
  { 1756,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1756 = VCMPEQUH
  { 1757,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1757 = VCMPEQUHo
  { 1758,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1758 = VCMPEQUW
  { 1759,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1759 = VCMPEQUWo
  { 1760,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1760 = VCMPGEFP
  { 1761,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1761 = VCMPGEFPo
  { 1762,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1762 = VCMPGTFP
  { 1763,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1763 = VCMPGTFPo
  { 1764,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1764 = VCMPGTSB
  { 1765,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1765 = VCMPGTSBo
  { 1766,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1766 = VCMPGTSD
  { 1767,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1767 = VCMPGTSDo
  { 1768,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1768 = VCMPGTSH
  { 1769,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1769 = VCMPGTSHo
  { 1770,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1770 = VCMPGTSW
  { 1771,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1771 = VCMPGTSWo
  { 1772,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1772 = VCMPGTUB
  { 1773,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1773 = VCMPGTUBo
  { 1774,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1774 = VCMPGTUD
  { 1775,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1775 = VCMPGTUDo
  { 1776,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1776 = VCMPGTUH
  { 1777,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1777 = VCMPGTUHo
  { 1778,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1778 = VCMPGTUW
  { 1779,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1779 = VCMPGTUWo
  { 1780,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1780 = VCMPNEB
  { 1781,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1781 = VCMPNEBo
  { 1782,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1782 = VCMPNEH
  { 1783,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1783 = VCMPNEHo
  { 1784,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1784 = VCMPNEW
  { 1785,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1785 = VCMPNEWo
  { 1786,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1786 = VCMPNEZB
  { 1787,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1787 = VCMPNEZBo
  { 1788,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1788 = VCMPNEZH
  { 1789,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1789 = VCMPNEZHo
  { 1790,	3,	1,	4,	138,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1790 = VCMPNEZW
  { 1791,	3,	1,	4,	138,	0, 0x28ULL, nullptr, ImplicitList20, OperandInfo68, -1 ,nullptr },  // Inst #1791 = VCMPNEZWo
  { 1792,	3,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo261, -1 ,nullptr },  // Inst #1792 = VCTSXS
  { 1793,	2,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1793 = VCTSXS_0
  { 1794,	3,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo261, -1 ,nullptr },  // Inst #1794 = VCTUXS
  { 1795,	2,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1795 = VCTUXS_0
  { 1796,	2,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1796 = VCTZB
  { 1797,	2,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1797 = VCTZD
  { 1798,	2,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1798 = VCTZH
  { 1799,	2,	1,	4,	163,	0, 0x0ULL, nullptr, nullptr, OperandInfo262, -1 ,nullptr },  // Inst #1799 = VCTZLSBB
  { 1800,	2,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1800 = VCTZW
  { 1801,	3,	1,	4,	97,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1801 = VEQV
  { 1802,	2,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1802 = VEXPTEFP
  { 1803,	3,	1,	4,	163,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo261, -1 ,nullptr },  // Inst #1803 = VEXTRACTD
  { 1804,	3,	1,	4,	163,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo261, -1 ,nullptr },  // Inst #1804 = VEXTRACTUB
  { 1805,	3,	1,	4,	163,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo261, -1 ,nullptr },  // Inst #1805 = VEXTRACTUH
  { 1806,	3,	1,	4,	163,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo261, -1 ,nullptr },  // Inst #1806 = VEXTRACTUW
  { 1807,	2,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1807 = VEXTSB2D
  { 1808,	2,	1,	4,	97,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo263, -1 ,nullptr },  // Inst #1808 = VEXTSB2Ds
  { 1809,	2,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1809 = VEXTSB2W
  { 1810,	2,	1,	4,	97,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo263, -1 ,nullptr },  // Inst #1810 = VEXTSB2Ws
  { 1811,	2,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1811 = VEXTSH2D
  { 1812,	2,	1,	4,	97,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo263, -1 ,nullptr },  // Inst #1812 = VEXTSH2Ds
  { 1813,	2,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1813 = VEXTSH2W
  { 1814,	2,	1,	4,	97,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo263, -1 ,nullptr },  // Inst #1814 = VEXTSH2Ws
  { 1815,	2,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1815 = VEXTSW2D
  { 1816,	2,	1,	4,	97,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo263, -1 ,nullptr },  // Inst #1816 = VEXTSW2Ds
  { 1817,	3,	1,	4,	163,	0, 0x0ULL, nullptr, nullptr, OperandInfo264, -1 ,nullptr },  // Inst #1817 = VEXTUBLX
  { 1818,	3,	1,	4,	163,	0, 0x0ULL, nullptr, nullptr, OperandInfo264, -1 ,nullptr },  // Inst #1818 = VEXTUBRX
  { 1819,	3,	1,	4,	163,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo264, -1 ,nullptr },  // Inst #1819 = VEXTUHLX
  { 1820,	3,	1,	4,	163,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo264, -1 ,nullptr },  // Inst #1820 = VEXTUHRX
  { 1821,	3,	1,	4,	163,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo264, -1 ,nullptr },  // Inst #1821 = VEXTUWLX
  { 1822,	3,	1,	4,	163,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo264, -1 ,nullptr },  // Inst #1822 = VEXTUWRX
  { 1823,	2,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1823 = VGBBD
  { 1824,	4,	1,	4,	163,	0, 0x0ULL, nullptr, nullptr, OperandInfo265, -1 ,nullptr },  // Inst #1824 = VINSERTB
  { 1825,	3,	1,	4,	163,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo261, -1 ,nullptr },  // Inst #1825 = VINSERTD
  { 1826,	4,	1,	4,	163,	0, 0x0ULL, nullptr, nullptr, OperandInfo265, -1 ,nullptr },  // Inst #1826 = VINSERTH
  { 1827,	3,	1,	4,	163,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo261, -1 ,nullptr },  // Inst #1827 = VINSERTW
  { 1828,	2,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1828 = VLOGEFP
  { 1829,	4,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1829 = VMADDFP
  { 1830,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1830 = VMAXFP
  { 1831,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1831 = VMAXSB
  { 1832,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1832 = VMAXSD
  { 1833,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1833 = VMAXSH
  { 1834,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1834 = VMAXSW
  { 1835,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1835 = VMAXUB
  { 1836,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1836 = VMAXUD
  { 1837,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1837 = VMAXUH
  { 1838,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1838 = VMAXUW
  { 1839,	4,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1839 = VMHADDSHS
  { 1840,	4,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1840 = VMHRADDSHS
  { 1841,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1841 = VMINFP
  { 1842,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1842 = VMINSB
  { 1843,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1843 = VMINSD
  { 1844,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1844 = VMINSH
  { 1845,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1845 = VMINSW
  { 1846,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1846 = VMINUB
  { 1847,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1847 = VMINUD
  { 1848,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1848 = VMINUH
  { 1849,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1849 = VMINUW
  { 1850,	4,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1850 = VMLADDUHM
  { 1851,	3,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1851 = VMRGEW
  { 1852,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1852 = VMRGHB
  { 1853,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1853 = VMRGHH
  { 1854,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1854 = VMRGHW
  { 1855,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1855 = VMRGLB
  { 1856,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1856 = VMRGLH
  { 1857,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1857 = VMRGLW
  { 1858,	3,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1858 = VMRGOW
  { 1859,	4,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1859 = VMSUMMBM
  { 1860,	4,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1860 = VMSUMSHM
  { 1861,	4,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1861 = VMSUMSHS
  { 1862,	4,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1862 = VMSUMUBM
  { 1863,	4,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1863 = VMSUMUHM
  { 1864,	4,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1864 = VMSUMUHS
  { 1865,	2,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1865 = VMUL10CUQ
  { 1866,	3,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1866 = VMUL10ECUQ
  { 1867,	3,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1867 = VMUL10EUQ
  { 1868,	2,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1868 = VMUL10UQ
  { 1869,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1869 = VMULESB
  { 1870,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1870 = VMULESH
  { 1871,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1871 = VMULESW
  { 1872,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1872 = VMULEUB
  { 1873,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1873 = VMULEUH
  { 1874,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1874 = VMULEUW
  { 1875,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1875 = VMULOSB
  { 1876,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1876 = VMULOSH
  { 1877,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1877 = VMULOSW
  { 1878,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1878 = VMULOUB
  { 1879,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1879 = VMULOUH
  { 1880,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1880 = VMULOUW
  { 1881,	3,	1,	4,	143,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1881 = VMULUWM
  { 1882,	3,	1,	4,	97,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1882 = VNAND
  { 1883,	3,	1,	4,	286,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1883 = VNCIPHER
  { 1884,	3,	1,	4,	286,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1884 = VNCIPHERLAST
  { 1885,	2,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1885 = VNEGD
  { 1886,	2,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1886 = VNEGW
  { 1887,	4,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1887 = VNMSUBFP
  { 1888,	3,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1888 = VNOR
  { 1889,	3,	1,	4,	98,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1889 = VOR
  { 1890,	3,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1890 = VORC
  { 1891,	4,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1891 = VPERM
  { 1892,	4,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1892 = VPERMR
  { 1893,	4,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1893 = VPERMXOR
  { 1894,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1894 = VPKPX
  { 1895,	3,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1895 = VPKSDSS
  { 1896,	3,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1896 = VPKSDUS
  { 1897,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1897 = VPKSHSS
  { 1898,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1898 = VPKSHUS
  { 1899,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1899 = VPKSWSS
  { 1900,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1900 = VPKSWUS
  { 1901,	3,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1901 = VPKUDUM
  { 1902,	3,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1902 = VPKUDUS
  { 1903,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1903 = VPKUHUM
  { 1904,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1904 = VPKUHUS
  { 1905,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1905 = VPKUWUM
  { 1906,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1906 = VPKUWUS
  { 1907,	3,	1,	4,	286,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1907 = VPMSUMB
  { 1908,	3,	1,	4,	286,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1908 = VPMSUMD
  { 1909,	3,	1,	4,	286,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1909 = VPMSUMH
  { 1910,	3,	1,	4,	286,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1910 = VPMSUMW
  { 1911,	2,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1911 = VPOPCNTB
  { 1912,	2,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1912 = VPOPCNTD
  { 1913,	2,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1913 = VPOPCNTH
  { 1914,	2,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1914 = VPOPCNTW
  { 1915,	2,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1915 = VPRTYBD
  { 1916,	2,	1,	4,	163,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1916 = VPRTYBQ
  { 1917,	2,	1,	4,	139,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1917 = VPRTYBW
  { 1918,	2,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1918 = VREFP
  { 1919,	2,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1919 = VRFIM
  { 1920,	2,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1920 = VRFIN
  { 1921,	2,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1921 = VRFIP
  { 1922,	2,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1922 = VRFIZ
  { 1923,	3,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1923 = VRLB
  { 1924,	3,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1924 = VRLD
  { 1925,	4,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo266, -1 ,nullptr },  // Inst #1925 = VRLDMI
  { 1926,	3,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1926 = VRLDNM
  { 1927,	3,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1927 = VRLH
  { 1928,	3,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1928 = VRLW
  { 1929,	4,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo266, -1 ,nullptr },  // Inst #1929 = VRLWMI
  { 1930,	3,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1930 = VRLWNM
  { 1931,	2,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1931 = VRSQRTEFP
  { 1932,	2,	1,	4,	286,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1932 = VSBOX
  { 1933,	4,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1933 = VSEL
  { 1934,	4,	1,	4,	140,	0, 0x0ULL, nullptr, nullptr, OperandInfo267, -1 ,nullptr },  // Inst #1934 = VSHASIGMAD
  { 1935,	4,	1,	4,	140,	0, 0x0ULL, nullptr, nullptr, OperandInfo267, -1 ,nullptr },  // Inst #1935 = VSHASIGMAW
  { 1936,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1936 = VSL
  { 1937,	3,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1937 = VSLB
  { 1938,	3,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1938 = VSLD
  { 1939,	4,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo70, -1 ,nullptr },  // Inst #1939 = VSLDOI
  { 1940,	3,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1940 = VSLH
  { 1941,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1941 = VSLO
  { 1942,	3,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1942 = VSLV
  { 1943,	3,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1943 = VSLW
  { 1944,	3,	1,	4,	161,	0, 0x28ULL, nullptr, nullptr, OperandInfo261, -1 ,nullptr },  // Inst #1944 = VSPLTB
  { 1945,	3,	1,	4,	161,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x28ULL, nullptr, nullptr, OperandInfo268, -1 ,nullptr },  // Inst #1945 = VSPLTBs
  { 1946,	3,	1,	4,	161,	0, 0x28ULL, nullptr, nullptr, OperandInfo261, -1 ,nullptr },  // Inst #1946 = VSPLTH
  { 1947,	3,	1,	4,	161,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x28ULL, nullptr, nullptr, OperandInfo268, -1 ,nullptr },  // Inst #1947 = VSPLTHs
  { 1948,	2,	1,	4,	161,	0, 0x28ULL, nullptr, nullptr, OperandInfo269, -1 ,nullptr },  // Inst #1948 = VSPLTISB
  { 1949,	2,	1,	4,	161,	0, 0x28ULL, nullptr, nullptr, OperandInfo269, -1 ,nullptr },  // Inst #1949 = VSPLTISH
  { 1950,	2,	1,	4,	161,	0, 0x28ULL, nullptr, nullptr, OperandInfo269, -1 ,nullptr },  // Inst #1950 = VSPLTISW
  { 1951,	3,	1,	4,	161,	0, 0x28ULL, nullptr, nullptr, OperandInfo261, -1 ,nullptr },  // Inst #1951 = VSPLTW
  { 1952,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1952 = VSR
  { 1953,	3,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1953 = VSRAB
  { 1954,	3,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1954 = VSRAD
  { 1955,	3,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1955 = VSRAH
  { 1956,	3,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1956 = VSRAW
  { 1957,	3,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1957 = VSRB
  { 1958,	3,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1958 = VSRD
  { 1959,	3,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1959 = VSRH
  { 1960,	3,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1960 = VSRO
  { 1961,	3,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1961 = VSRV
  { 1962,	3,	1,	4,	98,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1962 = VSRW
  { 1963,	3,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1963 = VSUBCUQ
  { 1964,	3,	1,	4,	140,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1964 = VSUBCUW
  { 1965,	4,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1965 = VSUBECUQ
  { 1966,	4,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo260, -1 ,nullptr },  // Inst #1966 = VSUBEUQM
  { 1967,	3,	1,	4,	143,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1967 = VSUBFP
  { 1968,	3,	1,	4,	140,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1968 = VSUBSBS
  { 1969,	3,	1,	4,	140,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1969 = VSUBSHS
  { 1970,	3,	1,	4,	140,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1970 = VSUBSWS
  { 1971,	3,	1,	4,	97,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1971 = VSUBUBM
  { 1972,	3,	1,	4,	140,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1972 = VSUBUBS
  { 1973,	3,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1973 = VSUBUDM
  { 1974,	3,	1,	4,	97,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1974 = VSUBUHM
  { 1975,	3,	1,	4,	140,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1975 = VSUBUHS
  { 1976,	3,	1,	4,	163,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1976 = VSUBUQM
  { 1977,	3,	1,	4,	97,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1977 = VSUBUWM
  { 1978,	3,	1,	4,	140,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1978 = VSUBUWS
  { 1979,	3,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1979 = VSUM2SWS
  { 1980,	3,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1980 = VSUM4SBS
  { 1981,	3,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1981 = VSUM4SHS
  { 1982,	3,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1982 = VSUM4UBS
  { 1983,	3,	1,	4,	142,	0, 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1983 = VSUMSWS
  { 1984,	2,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1984 = VUPKHPX
  { 1985,	2,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1985 = VUPKHSB
  { 1986,	2,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1986 = VUPKHSH
  { 1987,	2,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1987 = VUPKHSW
  { 1988,	2,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1988 = VUPKLPX
  { 1989,	2,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1989 = VUPKLSB
  { 1990,	2,	1,	4,	162,	0, 0x28ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1990 = VUPKLSH
  { 1991,	2,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #1991 = VUPKLSW
  { 1992,	3,	1,	4,	98,	0|(1ULL<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #1992 = VXOR
  { 1993,	1,	1,	4,	98,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x28ULL, nullptr, nullptr, OperandInfo160, -1 ,nullptr },  // Inst #1993 = V_SET0
  { 1994,	1,	1,	4,	98,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x28ULL, nullptr, nullptr, OperandInfo160, -1 ,nullptr },  // Inst #1994 = V_SET0B
  { 1995,	1,	1,	4,	98,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x28ULL, nullptr, nullptr, OperandInfo160, -1 ,nullptr },  // Inst #1995 = V_SET0H
  { 1996,	1,	1,	4,	162,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x28ULL, nullptr, nullptr, OperandInfo160, -1 ,nullptr },  // Inst #1996 = V_SETALLONES
  { 1997,	1,	1,	4,	162,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x28ULL, nullptr, nullptr, OperandInfo160, -1 ,nullptr },  // Inst #1997 = V_SETALLONESB
  { 1998,	1,	1,	4,	162,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x28ULL, nullptr, nullptr, OperandInfo160, -1 ,nullptr },  // Inst #1998 = V_SETALLONESH
  { 1999,	1,	0,	4,	123,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #1999 = WAIT
  { 2000,	1,	0,	4,	309,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo154, -1 ,nullptr },  // Inst #2000 = WRTEE
  { 2001,	1,	0,	4,	309,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo3, -1 ,nullptr },  // Inst #2001 = WRTEEI
  { 2002,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo49, -1 ,nullptr },  // Inst #2002 = XOR
  { 2003,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo50, -1 ,nullptr },  // Inst #2003 = XOR8
  { 2004,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo50, -1 ,nullptr },  // Inst #2004 = XOR8o
  { 2005,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #2005 = XORI
  { 2006,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #2006 = XORI8
  { 2007,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo36, -1 ,nullptr },  // Inst #2007 = XORIS
  { 2008,	3,	1,	4,	116,	0, 0x8ULL, nullptr, nullptr, OperandInfo35, -1 ,nullptr },  // Inst #2008 = XORIS8
  { 2009,	3,	1,	4,	116,	0|(1ULL<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList5, OperandInfo49, -1 ,nullptr },  // Inst #2009 = XORo
  { 2010,	2,	1,	4,	120,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2010 = XSABSDP
  { 2011,	2,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #2011 = XSABSQP
  { 2012,	3,	1,	4,	159,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo271, -1 ,nullptr },  // Inst #2012 = XSADDDP
  { 2013,	3,	1,	4,	165,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #2013 = XSADDQP
  { 2014,	3,	1,	4,	165,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #2014 = XSADDQPO
  { 2015,	3,	1,	4,	159,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo272, -1 ,nullptr },  // Inst #2015 = XSADDSP
  { 2016,	3,	1,	4,	109,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo273, -1 ,nullptr },  // Inst #2016 = XSCMPEQDP
  { 2017,	3,	1,	4,	109,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo274, -1 ,nullptr },  // Inst #2017 = XSCMPEXPDP
  { 2018,	3,	1,	4,	164,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo275, -1 ,nullptr },  // Inst #2018 = XSCMPEXPQP
  { 2019,	3,	1,	4,	109,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo273, -1 ,nullptr },  // Inst #2019 = XSCMPGEDP
  { 2020,	3,	1,	4,	109,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo273, -1 ,nullptr },  // Inst #2020 = XSCMPGTDP
  { 2021,	3,	1,	4,	109,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo274, -1 ,nullptr },  // Inst #2021 = XSCMPODP
  { 2022,	3,	1,	4,	164,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo275, -1 ,nullptr },  // Inst #2022 = XSCMPOQP
  { 2023,	3,	1,	4,	109,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo274, -1 ,nullptr },  // Inst #2023 = XSCMPUDP
  { 2024,	3,	1,	4,	164,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo275, -1 ,nullptr },  // Inst #2024 = XSCMPUQP
  { 2025,	3,	1,	4,	120,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo271, -1 ,nullptr },  // Inst #2025 = XSCPSGNDP
  { 2026,	3,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #2026 = XSCPSGNQP
  { 2027,	2,	1,	4,	159,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2027 = XSCVDPHP
  { 2028,	2,	1,	4,	165,	0, 0x0ULL, nullptr, nullptr, OperandInfo276, -1 ,nullptr },  // Inst #2028 = XSCVDPQP
  { 2029,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2029 = XSCVDPSP
  { 2030,	2,	1,	4,	159,	0, 0x0ULL, nullptr, nullptr, OperandInfo277, -1 ,nullptr },  // Inst #2030 = XSCVDPSPN
  { 2031,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2031 = XSCVDPSXDS
  { 2032,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo278, -1 ,nullptr },  // Inst #2032 = XSCVDPSXDSs
  { 2033,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2033 = XSCVDPSXWS
  { 2034,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo278, -1 ,nullptr },  // Inst #2034 = XSCVDPSXWSs
  { 2035,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2035 = XSCVDPUXDS
  { 2036,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo278, -1 ,nullptr },  // Inst #2036 = XSCVDPUXDSs
  { 2037,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2037 = XSCVDPUXWS
  { 2038,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo278, -1 ,nullptr },  // Inst #2038 = XSCVDPUXWSs
  { 2039,	2,	1,	4,	159,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2039 = XSCVHPDP
  { 2040,	2,	1,	4,	165,	0, 0x0ULL, nullptr, nullptr, OperandInfo279, -1 ,nullptr },  // Inst #2040 = XSCVQPDP
  { 2041,	2,	1,	4,	165,	0, 0x0ULL, nullptr, nullptr, OperandInfo279, -1 ,nullptr },  // Inst #2041 = XSCVQPDPO
  { 2042,	2,	1,	4,	165,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #2042 = XSCVQPSDZ
  { 2043,	2,	1,	4,	165,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #2043 = XSCVQPSWZ
  { 2044,	2,	1,	4,	165,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #2044 = XSCVQPUDZ
  { 2045,	2,	1,	4,	165,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #2045 = XSCVQPUWZ
  { 2046,	2,	1,	4,	165,	0, 0x0ULL, nullptr, nullptr, OperandInfo276, -1 ,nullptr },  // Inst #2046 = XSCVSDQP
  { 2047,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2047 = XSCVSPDP
  { 2048,	2,	1,	4,	108,	0, 0x0ULL, nullptr, nullptr, OperandInfo280, -1 ,nullptr },  // Inst #2048 = XSCVSPDPN
  { 2049,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2049 = XSCVSXDDP
  { 2050,	2,	1,	4,	159,	0, 0x0ULL, nullptr, nullptr, OperandInfo281, -1 ,nullptr },  // Inst #2050 = XSCVSXDSP
  { 2051,	2,	1,	4,	165,	0, 0x0ULL, nullptr, nullptr, OperandInfo276, -1 ,nullptr },  // Inst #2051 = XSCVUDQP
  { 2052,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2052 = XSCVUXDDP
  { 2053,	2,	1,	4,	159,	0, 0x0ULL, nullptr, nullptr, OperandInfo281, -1 ,nullptr },  // Inst #2053 = XSCVUXDSP
  { 2054,	3,	1,	4,	269,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo271, -1 ,nullptr },  // Inst #2054 = XSDIVDP
  { 2055,	3,	1,	4,	169,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #2055 = XSDIVQP
  { 2056,	3,	1,	4,	169,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #2056 = XSDIVQPO
  { 2057,	3,	1,	4,	272,	0, 0x0ULL, nullptr, nullptr, OperandInfo272, -1 ,nullptr },  // Inst #2057 = XSDIVSP
  { 2058,	3,	1,	4,	134,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo282, -1 ,nullptr },  // Inst #2058 = XSIEXPDP
  { 2059,	3,	1,	4,	98,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo283, -1 ,nullptr },  // Inst #2059 = XSIEXPQP
  { 2060,	4,	1,	4,	151,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo284, -1 ,nullptr },  // Inst #2060 = XSMADDADP
  { 2061,	4,	1,	4,	151,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo285, -1 ,nullptr },  // Inst #2061 = XSMADDASP
  { 2062,	4,	1,	4,	151,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo284, -1 ,nullptr },  // Inst #2062 = XSMADDMDP
  { 2063,	4,	1,	4,	151,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo285, -1 ,nullptr },  // Inst #2063 = XSMADDMSP
  { 2064,	4,	1,	4,	167,	0, 0x0ULL, nullptr, nullptr, OperandInfo286, -1 ,nullptr },  // Inst #2064 = XSMADDQP
  { 2065,	4,	1,	4,	167,	0, 0x0ULL, nullptr, nullptr, OperandInfo286, -1 ,nullptr },  // Inst #2065 = XSMADDQPO
  { 2066,	3,	1,	4,	108,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo273, -1 ,nullptr },  // Inst #2066 = XSMAXCDP
  { 2067,	3,	1,	4,	108,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo271, -1 ,nullptr },  // Inst #2067 = XSMAXDP
  { 2068,	3,	1,	4,	108,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo273, -1 ,nullptr },  // Inst #2068 = XSMAXJDP
  { 2069,	3,	1,	4,	108,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo273, -1 ,nullptr },  // Inst #2069 = XSMINCDP
  { 2070,	3,	1,	4,	108,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo271, -1 ,nullptr },  // Inst #2070 = XSMINDP
  { 2071,	3,	1,	4,	108,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo273, -1 ,nullptr },  // Inst #2071 = XSMINJDP
  { 2072,	4,	1,	4,	151,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo284, -1 ,nullptr },  // Inst #2072 = XSMSUBADP
  { 2073,	4,	1,	4,	151,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo285, -1 ,nullptr },  // Inst #2073 = XSMSUBASP
  { 2074,	4,	1,	4,	151,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo284, -1 ,nullptr },  // Inst #2074 = XSMSUBMDP
  { 2075,	4,	1,	4,	151,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo285, -1 ,nullptr },  // Inst #2075 = XSMSUBMSP
  { 2076,	4,	1,	4,	167,	0, 0x0ULL, nullptr, nullptr, OperandInfo286, -1 ,nullptr },  // Inst #2076 = XSMSUBQP
  { 2077,	4,	1,	4,	167,	0, 0x0ULL, nullptr, nullptr, OperandInfo286, -1 ,nullptr },  // Inst #2077 = XSMSUBQPO
  { 2078,	3,	1,	4,	151,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo271, -1 ,nullptr },  // Inst #2078 = XSMULDP
  { 2079,	3,	1,	4,	167,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #2079 = XSMULQP
  { 2080,	3,	1,	4,	167,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #2080 = XSMULQPO
  { 2081,	3,	1,	4,	151,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo272, -1 ,nullptr },  // Inst #2081 = XSMULSP
  { 2082,	2,	1,	4,	120,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2082 = XSNABSDP
  { 2083,	2,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #2083 = XSNABSQP
  { 2084,	2,	1,	4,	120,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2084 = XSNEGDP
  { 2085,	2,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #2085 = XSNEGQP
  { 2086,	4,	1,	4,	151,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo284, -1 ,nullptr },  // Inst #2086 = XSNMADDADP
  { 2087,	4,	1,	4,	151,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo285, -1 ,nullptr },  // Inst #2087 = XSNMADDASP
  { 2088,	4,	1,	4,	151,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo284, -1 ,nullptr },  // Inst #2088 = XSNMADDMDP
  { 2089,	4,	1,	4,	151,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo285, -1 ,nullptr },  // Inst #2089 = XSNMADDMSP
  { 2090,	4,	1,	4,	167,	0, 0x0ULL, nullptr, nullptr, OperandInfo286, -1 ,nullptr },  // Inst #2090 = XSNMADDQP
  { 2091,	4,	1,	4,	167,	0, 0x0ULL, nullptr, nullptr, OperandInfo286, -1 ,nullptr },  // Inst #2091 = XSNMADDQPO
  { 2092,	4,	1,	4,	151,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo284, -1 ,nullptr },  // Inst #2092 = XSNMSUBADP
  { 2093,	4,	1,	4,	151,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo285, -1 ,nullptr },  // Inst #2093 = XSNMSUBASP
  { 2094,	4,	1,	4,	151,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo284, -1 ,nullptr },  // Inst #2094 = XSNMSUBMDP
  { 2095,	4,	1,	4,	151,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo285, -1 ,nullptr },  // Inst #2095 = XSNMSUBMSP
  { 2096,	4,	1,	4,	167,	0, 0x0ULL, nullptr, nullptr, OperandInfo286, -1 ,nullptr },  // Inst #2096 = XSNMSUBQP
  { 2097,	4,	1,	4,	167,	0, 0x0ULL, nullptr, nullptr, OperandInfo286, -1 ,nullptr },  // Inst #2097 = XSNMSUBQPO
  { 2098,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2098 = XSRDPI
  { 2099,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2099 = XSRDPIC
  { 2100,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2100 = XSRDPIM
  { 2101,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2101 = XSRDPIP
  { 2102,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2102 = XSRDPIZ
  { 2103,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2103 = XSREDP
  { 2104,	2,	1,	4,	159,	0, 0x0ULL, nullptr, nullptr, OperandInfo278, -1 ,nullptr },  // Inst #2104 = XSRESP
  { 2105,	4,	1,	4,	165,	0, 0x0ULL, nullptr, nullptr, OperandInfo287, -1 ,nullptr },  // Inst #2105 = XSRQPI
  { 2106,	4,	1,	4,	165,	0, 0x0ULL, nullptr, nullptr, OperandInfo287, -1 ,nullptr },  // Inst #2106 = XSRQPIX
  { 2107,	4,	1,	4,	165,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo287, -1 ,nullptr },  // Inst #2107 = XSRQPXP
  { 2108,	2,	1,	4,	159,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo281, -1 ,nullptr },  // Inst #2108 = XSRSP
  { 2109,	2,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2109 = XSRSQRTEDP
  { 2110,	2,	1,	4,	159,	0, 0x0ULL, nullptr, nullptr, OperandInfo278, -1 ,nullptr },  // Inst #2110 = XSRSQRTESP
  { 2111,	2,	1,	4,	261,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo270, -1 ,nullptr },  // Inst #2111 = XSSQRTDP
  { 2112,	2,	1,	4,	170,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #2112 = XSSQRTQP
  { 2113,	2,	1,	4,	170,	0, 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #2113 = XSSQRTQPO
  { 2114,	2,	1,	4,	266,	0, 0x0ULL, nullptr, nullptr, OperandInfo278, -1 ,nullptr },  // Inst #2114 = XSSQRTSP
  { 2115,	3,	1,	4,	159,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo271, -1 ,nullptr },  // Inst #2115 = XSSUBDP
  { 2116,	3,	1,	4,	165,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #2116 = XSSUBQP
  { 2117,	3,	1,	4,	165,	0, 0x0ULL, nullptr, nullptr, OperandInfo68, -1 ,nullptr },  // Inst #2117 = XSSUBQPO
  { 2118,	3,	1,	4,	159,	0, 0x0ULL, nullptr, nullptr, OperandInfo272, -1 ,nullptr },  // Inst #2118 = XSSUBSP
  { 2119,	3,	1,	4,	109,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo274, -1 ,nullptr },  // Inst #2119 = XSTDIVDP
  { 2120,	2,	1,	4,	109,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo288, -1 ,nullptr },  // Inst #2120 = XSTSQRTDP
  { 2121,	3,	1,	4,	107,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo289, -1 ,nullptr },  // Inst #2121 = XSTSTDCDP
  { 2122,	3,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo290, -1 ,nullptr },  // Inst #2122 = XSTSTDCQP
  { 2123,	3,	1,	4,	107,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo289, -1 ,nullptr },  // Inst #2123 = XSTSTDCSP
  { 2124,	2,	1,	4,	120,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo161, -1 ,nullptr },  // Inst #2124 = XSXEXPDP
  { 2125,	2,	1,	4,	98,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #2125 = XSXEXPQP
  { 2126,	2,	1,	4,	108,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo161, -1 ,nullptr },  // Inst #2126 = XSXSIGDP
  { 2127,	2,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo69, -1 ,nullptr },  // Inst #2127 = XSXSIGQP
  { 2128,	2,	1,	4,	98,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2128 = XVABSDP
  { 2129,	2,	1,	4,	98,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2129 = XVABSSP
  { 2130,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2130 = XVADDDP
  { 2131,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2131 = XVADDSP
  { 2132,	3,	1,	4,	138,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2132 = XVCMPEQDP
  { 2133,	3,	1,	4,	138,	0, 0x0ULL, ImplicitList2, ImplicitList20, OperandInfo292, -1 ,nullptr },  // Inst #2133 = XVCMPEQDPo
  { 2134,	3,	1,	4,	138,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2134 = XVCMPEQSP
  { 2135,	3,	1,	4,	138,	0, 0x0ULL, ImplicitList2, ImplicitList20, OperandInfo292, -1 ,nullptr },  // Inst #2135 = XVCMPEQSPo
  { 2136,	3,	1,	4,	138,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2136 = XVCMPGEDP
  { 2137,	3,	1,	4,	138,	0, 0x0ULL, ImplicitList2, ImplicitList20, OperandInfo292, -1 ,nullptr },  // Inst #2137 = XVCMPGEDPo
  { 2138,	3,	1,	4,	138,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2138 = XVCMPGESP
  { 2139,	3,	1,	4,	138,	0, 0x0ULL, ImplicitList2, ImplicitList20, OperandInfo292, -1 ,nullptr },  // Inst #2139 = XVCMPGESPo
  { 2140,	3,	1,	4,	138,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2140 = XVCMPGTDP
  { 2141,	3,	1,	4,	138,	0, 0x0ULL, ImplicitList2, ImplicitList20, OperandInfo292, -1 ,nullptr },  // Inst #2141 = XVCMPGTDPo
  { 2142,	3,	1,	4,	138,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2142 = XVCMPGTSP
  { 2143,	3,	1,	4,	138,	0, 0x0ULL, ImplicitList2, ImplicitList20, OperandInfo292, -1 ,nullptr },  // Inst #2143 = XVCMPGTSPo
  { 2144,	3,	1,	4,	98,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2144 = XVCPSGNDP
  { 2145,	3,	1,	4,	98,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2145 = XVCPSGNSP
  { 2146,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2146 = XVCVDPSP
  { 2147,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2147 = XVCVDPSXDS
  { 2148,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2148 = XVCVDPSXWS
  { 2149,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2149 = XVCVDPUXDS
  { 2150,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2150 = XVCVDPUXWS
  { 2151,	2,	1,	4,	142,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2151 = XVCVHPSP
  { 2152,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2152 = XVCVSPDP
  { 2153,	2,	1,	4,	142,	0, 0x0ULL, nullptr, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2153 = XVCVSPHP
  { 2154,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2154 = XVCVSPSXDS
  { 2155,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2155 = XVCVSPSXWS
  { 2156,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2156 = XVCVSPUXDS
  { 2157,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2157 = XVCVSPUXWS
  { 2158,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2158 = XVCVSXDDP
  { 2159,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2159 = XVCVSXDSP
  { 2160,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2160 = XVCVSXWDP
  { 2161,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2161 = XVCVSXWSP
  { 2162,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2162 = XVCVUXDDP
  { 2163,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2163 = XVCVUXDSP
  { 2164,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2164 = XVCVUXWDP
  { 2165,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2165 = XVCVUXWSP
  { 2166,	3,	1,	4,	274,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2166 = XVDIVDP
  { 2167,	3,	1,	4,	273,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2167 = XVDIVSP
  { 2168,	3,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2168 = XVIEXPDP
  { 2169,	3,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2169 = XVIEXPSP
  { 2170,	4,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2170 = XVMADDADP
  { 2171,	4,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2171 = XVMADDASP
  { 2172,	4,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2172 = XVMADDMDP
  { 2173,	4,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2173 = XVMADDMSP
  { 2174,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2174 = XVMAXDP
  { 2175,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2175 = XVMAXSP
  { 2176,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2176 = XVMINDP
  { 2177,	3,	1,	4,	140,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2177 = XVMINSP
  { 2178,	4,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2178 = XVMSUBADP
  { 2179,	4,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2179 = XVMSUBASP
  { 2180,	4,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2180 = XVMSUBMDP
  { 2181,	4,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2181 = XVMSUBMSP
  { 2182,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2182 = XVMULDP
  { 2183,	3,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2183 = XVMULSP
  { 2184,	2,	1,	4,	98,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2184 = XVNABSDP
  { 2185,	2,	1,	4,	98,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2185 = XVNABSSP
  { 2186,	2,	1,	4,	98,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2186 = XVNEGDP
  { 2187,	2,	1,	4,	98,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2187 = XVNEGSP
  { 2188,	4,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2188 = XVNMADDADP
  { 2189,	4,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2189 = XVNMADDASP
  { 2190,	4,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2190 = XVNMADDMDP
  { 2191,	4,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2191 = XVNMADDMSP
  { 2192,	4,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2192 = XVNMSUBADP
  { 2193,	4,	1,	4,	142,	0|(1ULL<<MCID::Commutable), 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2193 = XVNMSUBASP
  { 2194,	4,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2194 = XVNMSUBMDP
  { 2195,	4,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo293, -1 ,nullptr },  // Inst #2195 = XVNMSUBMSP
  { 2196,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2196 = XVRDPI
  { 2197,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2197 = XVRDPIC
  { 2198,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2198 = XVRDPIM
  { 2199,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2199 = XVRDPIP
  { 2200,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2200 = XVRDPIZ
  { 2201,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2201 = XVREDP
  { 2202,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2202 = XVRESP
  { 2203,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2203 = XVRSPI
  { 2204,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2204 = XVRSPIC
  { 2205,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2205 = XVRSPIM
  { 2206,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2206 = XVRSPIP
  { 2207,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2207 = XVRSPIZ
  { 2208,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2208 = XVRSQRTEDP
  { 2209,	2,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2209 = XVRSQRTESP
  { 2210,	2,	1,	4,	263,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2210 = XVSQRTDP
  { 2211,	2,	1,	4,	264,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2211 = XVSQRTSP
  { 2212,	3,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2212 = XVSUBDP
  { 2213,	3,	1,	4,	142,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2213 = XVSUBSP
  { 2214,	3,	1,	4,	141,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo294, -1 ,nullptr },  // Inst #2214 = XVTDIVDP
  { 2215,	3,	1,	4,	141,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo294, -1 ,nullptr },  // Inst #2215 = XVTDIVSP
  { 2216,	2,	1,	4,	141,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo295, -1 ,nullptr },  // Inst #2216 = XVTSQRTDP
  { 2217,	2,	1,	4,	141,	0, 0x0ULL, ImplicitList2, nullptr, OperandInfo295, -1 ,nullptr },  // Inst #2217 = XVTSQRTSP
  { 2218,	3,	1,	4,	140,	0, 0x0ULL, nullptr, nullptr, OperandInfo296, -1 ,nullptr },  // Inst #2218 = XVTSTDCDP
  { 2219,	3,	1,	4,	140,	0, 0x0ULL, nullptr, nullptr, OperandInfo296, -1 ,nullptr },  // Inst #2219 = XVTSTDCSP
  { 2220,	2,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2220 = XVXEXPDP
  { 2221,	2,	1,	4,	98,	0, 0x0ULL, nullptr, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2221 = XVXEXPSP
  { 2222,	2,	1,	4,	140,	0, 0x0ULL, nullptr, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2222 = XVXSIGDP
  { 2223,	2,	1,	4,	140,	0, 0x0ULL, nullptr, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2223 = XVXSIGSP
  { 2224,	2,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2224 = XXBRD
  { 2225,	2,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2225 = XXBRH
  { 2226,	2,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2226 = XXBRQ
  { 2227,	2,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo291, -1 ,nullptr },  // Inst #2227 = XXBRW
  { 2228,	3,	1,	4,	162,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo297, -1 ,nullptr },  // Inst #2228 = XXEXTRACTUW
  { 2229,	4,	1,	4,	162,	0, 0x0ULL, nullptr, nullptr, OperandInfo298, -1 ,nullptr },  // Inst #2229 = XXINSERTW
  { 2230,	3,	1,	4,	97,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2230 = XXLAND
  { 2231,	3,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2231 = XXLANDC
  { 2232,	3,	1,	4,	97,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2232 = XXLEQV
  { 2233,	3,	1,	4,	97,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2233 = XXLNAND
  { 2234,	3,	1,	4,	97,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2234 = XXLNOR
  { 2235,	3,	1,	4,	97,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2235 = XXLOR
  { 2236,	3,	1,	4,	97,	0, 0x0ULL, nullptr, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2236 = XXLORC
  { 2237,	3,	1,	4,	97,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo271, -1 ,nullptr },  // Inst #2237 = XXLORf
  { 2238,	3,	1,	4,	97,	0|(1ULL<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2238 = XXLXOR
  { 2239,	1,	1,	4,	97,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo299, -1 ,nullptr },  // Inst #2239 = XXLXORdpz
  { 2240,	1,	1,	4,	97,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo300, -1 ,nullptr },  // Inst #2240 = XXLXORspz
  { 2241,	1,	1,	4,	97,	0|(1ULL<<MCID::MoveImm)|(1ULL<<MCID::Rematerializable)|(1ULL<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo301, -1 ,nullptr },  // Inst #2241 = XXLXORz
  { 2242,	3,	1,	4,	161,	0, 0x0ULL, nullptr, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2242 = XXMRGHW
  { 2243,	3,	1,	4,	161,	0, 0x0ULL, nullptr, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2243 = XXMRGLW
  { 2244,	3,	1,	4,	161,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2244 = XXPERM
  { 2245,	4,	1,	4,	161,	0, 0x0ULL, nullptr, nullptr, OperandInfo302, -1 ,nullptr },  // Inst #2245 = XXPERMDI
  { 2246,	3,	1,	4,	161,	0, 0x0ULL, nullptr, nullptr, OperandInfo303, -1 ,nullptr },  // Inst #2246 = XXPERMDIs
  { 2247,	3,	1,	4,	161,	0|(1ULL<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo292, -1 ,nullptr },  // Inst #2247 = XXPERMR
  { 2248,	4,	1,	4,	99,	0, 0x0ULL, nullptr, nullptr, OperandInfo304, -1 ,nullptr },  // Inst #2248 = XXSEL
  { 2249,	4,	1,	4,	161,	0, 0x0ULL, nullptr, nullptr, OperandInfo302, -1 ,nullptr },  // Inst #2249 = XXSLDWI
  { 2250,	3,	1,	4,	161,	0, 0x0ULL, nullptr, nullptr, OperandInfo303, -1 ,nullptr },  // Inst #2250 = XXSLDWIs
  { 2251,	2,	1,	4,	161,	0, 0x0ULL, nullptr, nullptr, OperandInfo305, -1 ,nullptr },  // Inst #2251 = XXSPLTIB
  { 2252,	3,	1,	4,	161,	0, 0x0ULL, nullptr, nullptr, OperandInfo306, -1 ,nullptr },  // Inst #2252 = XXSPLTW
  { 2253,	3,	1,	4,	161,	0, 0x0ULL, nullptr, nullptr, OperandInfo303, -1 ,nullptr },  // Inst #2253 = XXSPLTWs
  { 2254,	3,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo307, -1 ,nullptr },  // Inst #2254 = gBC
  { 2255,	3,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo307, -1 ,nullptr },  // Inst #2255 = gBCA
  { 2256,	4,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo308, -1 ,nullptr },  // Inst #2256 = gBCAat
  { 2257,	3,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList13, OperandInfo309, -1 ,nullptr },  // Inst #2257 = gBCCTR
  { 2258,	3,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList30, OperandInfo309, -1 ,nullptr },  // Inst #2258 = gBCCTRL
  { 2259,	3,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList30, OperandInfo307, -1 ,nullptr },  // Inst #2259 = gBCL
  { 2260,	3,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList30, OperandInfo307, -1 ,nullptr },  // Inst #2260 = gBCLA
  { 2261,	4,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList30, OperandInfo308, -1 ,nullptr },  // Inst #2261 = gBCLAat
  { 2262,	3,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList13, OperandInfo309, -1 ,nullptr },  // Inst #2262 = gBCLR
  { 2263,	3,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList22, ImplicitList30, OperandInfo309, -1 ,nullptr },  // Inst #2263 = gBCLRL
  { 2264,	4,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList30, OperandInfo308, -1 ,nullptr },  // Inst #2264 = gBCLat
  { 2265,	4,	0,	4,	287,	0|(1ULL<<MCID::Branch)|(1ULL<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList15, ImplicitList13, OperandInfo308, -1 ,nullptr },  // Inst #2265 = gBCat
};

extern const char PPCInstrNameData[] = {
  /* 0 */ 'G', '_', 'F', 'L', 'O', 'G', '1', '0', 0,
  /* 9 */ 'M', 'T', 'F', 'S', 'B', '0', 0,
  /* 16 */ 'V', '_', 'S', 'E', 'T', '0', 0,
  /* 23 */ 'V', 'C', 'T', 'S', 'X', 'S', '_', '0', 0,
  /* 32 */ 'V', 'C', 'T', 'U', 'X', 'S', '_', '0', 0,
  /* 41 */ 'V', 'C', 'F', 'S', 'X', '_', '0', 0,
  /* 49 */ 'V', 'C', 'F', 'U', 'X', '_', '0', 0,
  /* 57 */ 'M', 'T', 'F', 'S', 'B', '1', 0,
  /* 64 */ 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', '3', '2', 0,
  /* 80 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 100 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 120 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 141 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 161 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 182 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 202 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 218 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 238 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 258 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 277 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 298 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 318 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', '3', '2', 0,
  /* 331 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', '3', '2', 0,
  /* 344 */ 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 358 */ 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 372 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 389 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 406 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 421 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 434 */ 'L', 'W', 'A', '_', '3', '2', 0,
  /* 441 */ 'S', 'R', 'A', 'D', 'I', '_', '3', '2', 0,
  /* 450 */ 'R', 'L', 'D', 'I', 'C', 'L', '_', '3', '2', 0,
  /* 460 */ 'R', 'L', 'D', 'I', 'C', 'R', '_', '3', '2', 0,
  /* 470 */ 'S', 'T', 'B', 'X', 'T', 'L', 'S', '_', '3', '2', 0,
  /* 481 */ 'S', 'T', 'H', 'X', 'T', 'L', 'S', '_', '3', '2', 0,
  /* 492 */ 'S', 'T', 'W', 'X', 'T', 'L', 'S', '_', '3', '2', 0,
  /* 503 */ 'L', 'B', 'Z', 'X', 'T', 'L', 'S', '_', '3', '2', 0,
  /* 514 */ 'L', 'H', 'Z', 'X', 'T', 'L', 'S', '_', '3', '2', 0,
  /* 525 */ 'L', 'W', 'Z', 'X', 'T', 'L', 'S', '_', '3', '2', 0,
  /* 536 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', 0,
  /* 545 */ 'L', 'W', 'A', 'X', '_', '3', '2', 0,
  /* 553 */ 'D', 'F', 'L', 'O', 'A', 'D', 'f', '3', '2', 0,
  /* 563 */ 'X', 'F', 'L', 'O', 'A', 'D', 'f', '3', '2', 0,
  /* 573 */ 'D', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '3', '2', 0,
  /* 584 */ 'X', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '3', '2', 0,
  /* 595 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'L', 'o', 'n', 'g', 'J', 'm', 'p', '3', '2', 0,
  /* 613 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'J', 'm', 'p', '3', '2', 0,
  /* 630 */ 'T', 'L', 'B', 'R', 'E', '2', 0,
  /* 637 */ 'T', 'L', 'B', 'W', 'E', '2', 0,
  /* 644 */ 'G', '_', 'F', 'L', 'O', 'G', '2', 0,
  /* 652 */ 'G', '_', 'F', 'E', 'X', 'P', '2', 0,
  /* 660 */ 'T', 'L', 'B', 'S', 'X', '2', 0,
  /* 667 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 687 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 707 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 728 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 748 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '6', '4', 0,
  /* 769 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '6', '4', 0,
  /* 789 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 805 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 825 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 845 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 864 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '6', '4', 0,
  /* 885 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '6', '4', 0,
  /* 905 */ 'D', 'S', 'T', '6', '4', 0,
  /* 911 */ 'D', 'S', 'T', 'S', 'T', '6', '4', 0,
  /* 919 */ 'D', 'S', 'T', 'T', '6', '4', 0,
  /* 926 */ 'D', 'S', 'T', 'S', 'T', 'T', '6', '4', 0,
  /* 935 */ 'E', 'X', 'T', 'S', 'B', '8', '_', '3', '2', '_', '6', '4', 0,
  /* 948 */ 'E', 'X', 'T', 'S', 'H', '8', '_', '3', '2', '_', '6', '4', 0,
  /* 961 */ 'E', 'X', 'T', 'S', 'W', 'S', 'L', 'I', '_', '3', '2', '_', '6', '4', 0,
  /* 976 */ 'R', 'L', 'D', 'I', 'C', 'L', '_', '3', '2', '_', '6', '4', 0,
  /* 989 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', '_', '6', '4', 0,
  /* 1001 */ 'D', 'F', 'L', 'O', 'A', 'D', 'f', '6', '4', 0,
  /* 1011 */ 'X', 'F', 'L', 'O', 'A', 'D', 'f', '6', '4', 0,
  /* 1021 */ 'D', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '6', '4', 0,
  /* 1032 */ 'X', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '6', '4', 0,
  /* 1043 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'L', 'o', 'n', 'g', 'J', 'm', 'p', '6', '4', 0,
  /* 1061 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'J', 'm', 'p', '6', '4', 0,
  /* 1078 */ 'A', 'D', 'D', '4', 0,
  /* 1083 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'S', 'P', 'E', '4', 0,
  /* 1098 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'S', 'P', 'E', '4', 0,
  /* 1110 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 1123 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '4', 0,
  /* 1133 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 1146 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '4', 0,
  /* 1156 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '1', '6', 0,
  /* 1170 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '1', '6', 0,
  /* 1181 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 1201 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 1221 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 1242 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 1262 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '1', '6', 0,
  /* 1283 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '1', '6', 0,
  /* 1303 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 1319 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 1339 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 1359 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 1378 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '1', '6', 0,
  /* 1399 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '1', '6', 0,
  /* 1419 */ 'N', 'O', 'P', '_', 'G', 'T', '_', 'P', 'W', 'R', '6', 0,
  /* 1431 */ 'N', 'O', 'P', '_', 'G', 'T', '_', 'P', 'W', 'R', '7', 0,
  /* 1443 */ 'T', 'A', 'I', 'L', 'B', 'A', '8', 0,
  /* 1451 */ 'L', 'H', 'A', '8', 0,
  /* 1456 */ 'B', 'L', 'A', '8', 0,
  /* 1461 */ 'T', 'A', 'I', 'L', 'B', '8', 0,
  /* 1468 */ 'C', 'M', 'P', 'B', '8', 0,
  /* 1474 */ 'C', 'M', 'P', 'R', 'B', '8', 0,
  /* 1481 */ 'E', 'X', 'T', 'S', 'B', '8', 0,
  /* 1488 */ 'S', 'E', 'T', 'B', '8', 0,
  /* 1494 */ 'M', 'F', 'T', 'B', '8', 0,
  /* 1500 */ 'S', 'T', 'B', '8', 0,
  /* 1505 */ 'A', 'D', 'D', 'C', '8', 0,
  /* 1511 */ 'A', 'N', 'D', 'C', '8', 0,
  /* 1517 */ 'S', 'U', 'B', 'F', 'C', '8', 0,
  /* 1524 */ 'A', 'D', 'D', 'I', 'C', '8', 0,
  /* 1531 */ 'S', 'U', 'B', 'F', 'I', 'C', '8', 0,
  /* 1539 */ 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 1549 */ 'O', 'R', 'C', '8', 0,
  /* 1554 */ 'A', 'D', 'D', '8', 0,
  /* 1559 */ 'M', 'A', 'D', 'D', 'L', 'D', '8', 0,
  /* 1567 */ 'N', 'A', 'N', 'D', '8', 0,
  /* 1573 */ 'C', 'F', 'E', 'N', 'C', 'E', '8', 0,
  /* 1581 */ 'A', 'D', 'D', 'E', '8', 0,
  /* 1587 */ 'S', 'U', 'B', 'F', 'E', '8', 0,
  /* 1594 */ 'A', 'D', 'D', 'M', 'E', '8', 0,
  /* 1601 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 0,
  /* 1609 */ 'C', 'P', '_', 'P', 'A', 'S', 'T', 'E', '8', 0,
  /* 1619 */ 'A', 'D', 'D', 'Z', 'E', '8', 0,
  /* 1626 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 0,
  /* 1634 */ 'S', 'U', 'B', 'F', '8', 0,
  /* 1640 */ 'M', 'F', 'O', 'C', 'R', 'F', '8', 0,
  /* 1648 */ 'M', 'T', 'O', 'C', 'R', 'F', '8', 0,
  /* 1656 */ 'M', 'T', 'C', 'R', 'F', '8', 0,
  /* 1663 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 1676 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '8', 0,
  /* 1686 */ 'N', 'E', 'G', '8', 0,
  /* 1691 */ 'E', 'X', 'T', 'S', 'H', '8', 0,
  /* 1698 */ 'S', 'T', 'H', '8', 0,
  /* 1703 */ 'A', 'D', 'D', 'I', '8', 0,
  /* 1709 */ 'M', 'U', 'L', 'L', 'I', '8', 0,
  /* 1716 */ 'R', 'L', 'W', 'I', 'M', 'I', '8', 0,
  /* 1724 */ 'X', 'O', 'R', 'I', '8', 0,
  /* 1730 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 1749 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 1762 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 1781 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 1801 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 1820 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '8', 0,
  /* 1840 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '8', 0,
  /* 1859 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 1874 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 1893 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 1912 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 1930 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '8', 0,
  /* 1940 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '8', 0,
  /* 1960 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '8', 0,
  /* 1979 */ 'B', 'L', '8', 0,
  /* 1983 */ 'I', 'S', 'E', 'L', '8', 0,
  /* 1989 */ 'B', 'C', 'T', 'R', 'L', '8', 0,
  /* 1996 */ 'B', 'C', 'C', 'T', 'R', 'L', '8', 0,
  /* 2004 */ 'B', 'C', 'C', 'C', 'T', 'R', 'L', '8', 0,
  /* 2013 */ 'R', 'L', 'W', 'I', 'N', 'M', '8', 0,
  /* 2021 */ 'R', 'L', 'W', 'N', 'M', '8', 0,
  /* 2028 */ 'M', 'F', 'C', 'R', '8', 0,
  /* 2034 */ 'B', 'L', 'R', '8', 0,
  /* 2039 */ 'M', 'F', 'L', 'R', '8', 0,
  /* 2045 */ 'M', 'T', 'L', 'R', '8', 0,
  /* 2051 */ 'B', 'D', 'Z', 'L', 'R', '8', 0,
  /* 2058 */ 'B', 'D', 'N', 'Z', 'L', 'R', '8', 0,
  /* 2066 */ 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 2078 */ 'N', 'O', 'R', '8', 0,
  /* 2083 */ 'X', 'O', 'R', '8', 0,
  /* 2088 */ 'M', 'F', 'S', 'P', 'R', '8', 0,
  /* 2095 */ 'M', 'T', 'S', 'P', 'R', '8', 0,
  /* 2102 */ 'T', 'A', 'I', 'L', 'B', 'C', 'T', 'R', '8', 0,
  /* 2112 */ 'B', 'C', 'C', 'T', 'R', '8', 0,
  /* 2119 */ 'B', 'C', 'C', 'C', 'T', 'R', '8', 0,
  /* 2127 */ 'M', 'F', 'C', 'T', 'R', '8', 0,
  /* 2134 */ 'M', 'T', 'C', 'T', 'R', '8', 0,
  /* 2141 */ 'A', 'D', 'D', 'I', 'S', '8', 0,
  /* 2148 */ 'L', 'I', 'S', '8', 0,
  /* 2153 */ 'X', 'O', 'R', 'I', 'S', '8', 0,
  /* 2160 */ 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', '8', 0,
  /* 2175 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', '8', 0,
  /* 2191 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', '8', 0,
  /* 2207 */ 'L', 'H', 'A', 'U', '8', 0,
  /* 2213 */ 'S', 'T', 'B', 'U', '8', 0,
  /* 2219 */ 'S', 'T', 'H', 'U', '8', 0,
  /* 2225 */ 'S', 'T', 'W', 'U', '8', 0,
  /* 2231 */ 'L', 'B', 'Z', 'U', '8', 0,
  /* 2237 */ 'L', 'H', 'Z', 'U', '8', 0,
  /* 2243 */ 'L', 'W', 'Z', 'U', '8', 0,
  /* 2249 */ 'E', 'Q', 'V', '8', 0,
  /* 2254 */ 'S', 'L', 'W', '8', 0,
  /* 2259 */ 'S', 'R', 'W', '8', 0,
  /* 2264 */ 'S', 'T', 'W', '8', 0,
  /* 2269 */ 'C', 'N', 'T', 'L', 'Z', 'W', '8', 0,
  /* 2277 */ 'C', 'N', 'T', 'T', 'Z', 'W', '8', 0,
  /* 2285 */ 'L', 'H', 'A', 'X', '8', 0,
  /* 2291 */ 'S', 'T', 'B', 'X', '8', 0,
  /* 2297 */ 'S', 'T', 'H', 'X', '8', 0,
  /* 2303 */ 'L', 'H', 'B', 'R', 'X', '8', 0,
  /* 2310 */ 'L', 'W', 'B', 'R', 'X', '8', 0,
  /* 2317 */ 'L', 'H', 'A', 'U', 'X', '8', 0,
  /* 2324 */ 'S', 'T', 'B', 'U', 'X', '8', 0,
  /* 2331 */ 'S', 'T', 'H', 'U', 'X', '8', 0,
  /* 2338 */ 'S', 'T', 'W', 'U', 'X', '8', 0,
  /* 2345 */ 'L', 'B', 'Z', 'U', 'X', '8', 0,
  /* 2352 */ 'L', 'H', 'Z', 'U', 'X', '8', 0,
  /* 2359 */ 'L', 'W', 'Z', 'U', 'X', '8', 0,
  /* 2366 */ 'S', 'T', 'W', 'X', '8', 0,
  /* 2372 */ 'L', 'B', 'Z', 'X', '8', 0,
  /* 2378 */ 'L', 'H', 'Z', 'X', '8', 0,
  /* 2384 */ 'L', 'W', 'Z', 'X', '8', 0,
  /* 2390 */ 'C', 'P', '_', 'C', 'O', 'P', 'Y', '8', 0,
  /* 2399 */ 'L', 'B', 'Z', '8', 0,
  /* 2404 */ 'B', 'D', 'Z', '8', 0,
  /* 2409 */ 'L', 'H', 'Z', '8', 0,
  /* 2414 */ 'B', 'D', 'N', 'Z', '8', 0,
  /* 2420 */ 'L', 'W', 'Z', '8', 0,
  /* 2425 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 'i', '8', 0,
  /* 2437 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 'i', '8', 0,
  /* 2449 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 'i', '8', 0,
  /* 2461 */ 'A', 'N', 'D', 'I', 'o', '8', 0,
  /* 2468 */ 'A', 'N', 'D', 'I', 'S', 'o', '8', 0,
  /* 2476 */ 'E', 'V', 'M', 'H', 'E', 'G', 'S', 'M', 'F', 'A', 'A', 0,
  /* 2488 */ 'E', 'V', 'M', 'H', 'O', 'G', 'S', 'M', 'F', 'A', 'A', 0,
  /* 2500 */ 'E', 'V', 'M', 'W', 'S', 'M', 'F', 'A', 'A', 0,
  /* 2510 */ 'E', 'V', 'M', 'W', 'S', 'S', 'F', 'A', 'A', 0,
  /* 2520 */ 'E', 'V', 'M', 'H', 'E', 'G', 'S', 'M', 'I', 'A', 'A', 0,
  /* 2532 */ 'E', 'V', 'M', 'H', 'O', 'G', 'S', 'M', 'I', 'A', 'A', 0,
  /* 2544 */ 'E', 'V', 'M', 'W', 'S', 'M', 'I', 'A', 'A', 0,
  /* 2554 */ 'E', 'V', 'M', 'H', 'E', 'G', 'U', 'M', 'I', 'A', 'A', 0,
  /* 2566 */ 'E', 'V', 'M', 'H', 'O', 'G', 'U', 'M', 'I', 'A', 'A', 0,
  /* 2578 */ 'E', 'V', 'M', 'W', 'U', 'M', 'I', 'A', 'A', 0,
  /* 2588 */ 'D', 'C', 'B', 'A', 0,
  /* 2593 */ 'T', 'A', 'I', 'L', 'B', 'A', 0,
  /* 2600 */ 'L', 'D', 't', 'o', 'c', 'B', 'A', 0,
  /* 2608 */ 'g', 'B', 'C', 'A', 0,
  /* 2613 */ 'B', 'C', 'C', 'A', 0,
  /* 2618 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'F', 'A', 0,
  /* 2628 */ 'E', 'V', 'M', 'W', 'H', 'S', 'M', 'F', 'A', 0,
  /* 2638 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'F', 'A', 0,
  /* 2648 */ 'E', 'V', 'M', 'W', 'S', 'M', 'F', 'A', 0,
  /* 2657 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'F', 'A', 0,
  /* 2667 */ 'E', 'V', 'M', 'W', 'H', 'S', 'S', 'F', 'A', 0,
  /* 2677 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'F', 'A', 0,
  /* 2687 */ 'E', 'V', 'M', 'W', 'S', 'S', 'F', 'A', 0,
  /* 2696 */ 'L', 'H', 'A', 0,
  /* 2700 */ 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 2711 */ 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 2724 */ 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 2737 */ 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 2753 */ 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 2767 */ 'S', 'L', 'B', 'I', 'A', 0,
  /* 2773 */ 'T', 'L', 'B', 'I', 'A', 0,
  /* 2779 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'I', 'A', 0,
  /* 2789 */ 'E', 'V', 'M', 'W', 'H', 'S', 'M', 'I', 'A', 0,
  /* 2799 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'I', 'A', 0,
  /* 2809 */ 'E', 'V', 'M', 'W', 'S', 'M', 'I', 'A', 0,
  /* 2818 */ 'E', 'V', 'M', 'H', 'E', 'U', 'M', 'I', 'A', 0,
  /* 2828 */ 'E', 'V', 'M', 'W', 'H', 'U', 'M', 'I', 'A', 0,
  /* 2838 */ 'E', 'V', 'M', 'W', 'L', 'U', 'M', 'I', 'A', 0,
  /* 2848 */ 'E', 'V', 'M', 'H', 'O', 'U', 'M', 'I', 'A', 0,
  /* 2858 */ 'E', 'V', 'M', 'W', 'U', 'M', 'I', 'A', 0,
  /* 2867 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'D', 'X', 'I', 'A', 0,
  /* 2878 */ 'Q', 'V', 'S', 'T', 'F', 'D', 'X', 'I', 'A', 0,
  /* 2888 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'S', 'X', 'I', 'A', 0,
  /* 2899 */ 'Q', 'V', 'S', 'T', 'F', 'S', 'X', 'I', 'A', 0,
  /* 2909 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'D', 'U', 'X', 'I', 'A', 0,
  /* 2921 */ 'Q', 'V', 'S', 'T', 'F', 'D', 'U', 'X', 'I', 'A', 0,
  /* 2932 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'S', 'U', 'X', 'I', 'A', 0,
  /* 2944 */ 'Q', 'V', 'S', 'T', 'F', 'S', 'U', 'X', 'I', 'A', 0,
  /* 2955 */ 'B', 'L', 'A', 0,
  /* 2959 */ 'g', 'B', 'C', 'L', 'A', 0,
  /* 2965 */ 'B', 'C', 'C', 'L', 'A', 0,
  /* 2971 */ 'B', 'D', 'Z', 'L', 'A', 0,
  /* 2977 */ 'B', 'D', 'N', 'Z', 'L', 'A', 0,
  /* 2984 */ 'G', '_', 'F', 'M', 'A', 0,
  /* 2990 */ 'E', 'V', 'M', 'R', 'A', 0,
  /* 2996 */ 'L', 'W', 'A', 0,
  /* 3000 */ 'M', 'T', 'V', 'S', 'R', 'W', 'A', 0,
  /* 3008 */ 'Q', 'V', 'L', 'F', 'I', 'W', 'A', 'X', 'A', 0,
  /* 3018 */ 'Q', 'V', 'L', 'F', 'C', 'D', 'X', 'A', 0,
  /* 3027 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'D', 'X', 'A', 0,
  /* 3037 */ 'Q', 'V', 'L', 'F', 'D', 'X', 'A', 0,
  /* 3045 */ 'Q', 'V', 'S', 'T', 'F', 'D', 'X', 'A', 0,
  /* 3054 */ 'Q', 'V', 'L', 'F', 'C', 'S', 'X', 'A', 0,
  /* 3063 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'S', 'X', 'A', 0,
  /* 3073 */ 'Q', 'V', 'L', 'F', 'S', 'X', 'A', 0,
  /* 3081 */ 'Q', 'V', 'S', 'T', 'F', 'S', 'X', 'A', 0,
  /* 3090 */ 'Q', 'V', 'L', 'F', 'C', 'D', 'U', 'X', 'A', 0,
  /* 3100 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'D', 'U', 'X', 'A', 0,
  /* 3111 */ 'Q', 'V', 'L', 'F', 'D', 'U', 'X', 'A', 0,
  /* 3120 */ 'Q', 'V', 'S', 'T', 'F', 'D', 'U', 'X', 'A', 0,
  /* 3130 */ 'Q', 'V', 'L', 'F', 'C', 'S', 'U', 'X', 'A', 0,
  /* 3140 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'S', 'U', 'X', 'A', 0,
  /* 3151 */ 'Q', 'V', 'L', 'F', 'S', 'U', 'X', 'A', 0,
  /* 3160 */ 'Q', 'V', 'S', 'T', 'F', 'S', 'U', 'X', 'A', 0,
  /* 3170 */ 'Q', 'V', 'S', 'T', 'F', 'I', 'W', 'X', 'A', 0,
  /* 3180 */ 'Q', 'V', 'L', 'F', 'I', 'W', 'Z', 'X', 'A', 0,
  /* 3190 */ 'B', 'D', 'Z', 'A', 0,
  /* 3195 */ 'B', 'D', 'N', 'Z', 'A', 0,
  /* 3201 */ 'V', '_', 'S', 'E', 'T', '0', 'B', 0,
  /* 3209 */ 'V', 'S', 'R', 'A', 'B', 0,
  /* 3215 */ 'R', 'F', 'E', 'B', 'B', 0,
  /* 3221 */ 'V', 'C', 'L', 'Z', 'L', 'S', 'B', 'B', 0,
  /* 3230 */ 'V', 'C', 'T', 'Z', 'L', 'S', 'B', 'B', 0,
  /* 3239 */ 'V', 'C', 'M', 'P', 'N', 'E', 'B', 0,
  /* 3247 */ 'V', 'M', 'R', 'G', 'H', 'B', 0,
  /* 3254 */ 'X', 'X', 'S', 'P', 'L', 'T', 'I', 'B', 0,
  /* 3263 */ 'V', 'M', 'R', 'G', 'L', 'B', 0,
  /* 3270 */ 'T', 'A', 'I', 'L', 'B', 0,
  /* 3276 */ 'V', 'R', 'L', 'B', 0,
  /* 3281 */ 'V', 'S', 'L', 'B', 0,
  /* 3286 */ 'V', 'P', 'M', 'S', 'U', 'M', 'B', 0,
  /* 3294 */ 'C', 'M', 'P', 'B', 0,
  /* 3299 */ 'C', 'M', 'P', 'E', 'Q', 'B', 0,
  /* 3306 */ 'C', 'L', 'R', 'B', 'H', 'R', 'B', 0,
  /* 3314 */ 'C', 'M', 'P', 'R', 'B', 0,
  /* 3320 */ 'V', 'S', 'R', 'B', 0,
  /* 3325 */ 'V', 'M', 'U', 'L', 'E', 'S', 'B', 0,
  /* 3333 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 'B', 0,
  /* 3347 */ 'V', 'A', 'V', 'G', 'S', 'B', 0,
  /* 3354 */ 'V', 'U', 'P', 'K', 'H', 'S', 'B', 0,
  /* 3362 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'B', 0,
  /* 3371 */ 'V', 'U', 'P', 'K', 'L', 'S', 'B', 0,
  /* 3379 */ 'V', 'M', 'I', 'N', 'S', 'B', 0,
  /* 3386 */ 'V', 'M', 'U', 'L', 'O', 'S', 'B', 0,
  /* 3394 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'B', 0,
  /* 3403 */ 'E', 'V', 'E', 'X', 'T', 'S', 'B', 0,
  /* 3411 */ 'V', 'M', 'A', 'X', 'S', 'B', 0,
  /* 3418 */ 'S', 'E', 'T', 'B', 0,
  /* 3423 */ 'M', 'F', 'T', 'B', 0,
  /* 3428 */ 'V', 'S', 'P', 'L', 'T', 'B', 0,
  /* 3435 */ 'V', 'P', 'O', 'P', 'C', 'N', 'T', 'B', 0,
  /* 3444 */ 'V', 'I', 'N', 'S', 'E', 'R', 'T', 'B', 0,
  /* 3453 */ 'S', 'T', 'B', 0,
  /* 3457 */ 'R', 'e', 'a', 'd', 'T', 'B', 0,
  /* 3464 */ 'V', 'A', 'B', 'S', 'D', 'U', 'B', 0,
  /* 3472 */ 'V', 'M', 'U', 'L', 'E', 'U', 'B', 0,
  /* 3480 */ 'V', 'A', 'V', 'G', 'U', 'B', 0,
  /* 3487 */ 'V', 'M', 'I', 'N', 'U', 'B', 0,
  /* 3494 */ 'V', 'M', 'U', 'L', 'O', 'U', 'B', 0,
  /* 3502 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'B', 0,
  /* 3511 */ 'E', 'F', 'D', 'S', 'U', 'B', 0,
  /* 3518 */ 'Q', 'V', 'F', 'S', 'U', 'B', 0,
  /* 3525 */ 'G', '_', 'F', 'S', 'U', 'B', 0,
  /* 3532 */ 'Q', 'V', 'F', 'M', 'S', 'U', 'B', 0,
  /* 3540 */ 'Q', 'V', 'F', 'N', 'M', 'S', 'U', 'B', 0,
  /* 3549 */ 'E', 'F', 'S', 'S', 'U', 'B', 0,
  /* 3556 */ 'E', 'V', 'F', 'S', 'S', 'U', 'B', 0,
  /* 3564 */ 'G', '_', 'S', 'U', 'B', 0,
  /* 3570 */ 'G', '_', 'A', 'T', 'O', 'M', 'I', 'C', 'R', 'M', 'W', '_', 'S', 'U', 'B', 0,
  /* 3586 */ 'V', 'E', 'X', 'T', 'R', 'A', 'C', 'T', 'U', 'B', 0,
  /* 3597 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'B', 0,
  /* 3606 */ 'V', 'M', 'A', 'X', 'U', 'B', 0,
  /* 3613 */ 'V', 'C', 'M', 'P', 'N', 'E', 'Z', 'B', 0,
  /* 3622 */ 'V', 'C', 'L', 'Z', 'B', 0,
  /* 3628 */ 'V', 'C', 'T', 'Z', 'B', 0,
  /* 3634 */ 'g', 'B', 'C', 0,
  /* 3638 */ 'B', 'C', 'C', 0,
  /* 3642 */ 'A', 'D', 'D', 'C', 0,
  /* 3647 */ 'X', 'X', 'L', 'A', 'N', 'D', 'C', 0,
  /* 3655 */ 'C', 'R', 'A', 'N', 'D', 'C', 0,
  /* 3662 */ 'E', 'V', 'A', 'N', 'D', 'C', 0,
  /* 3669 */ 'T', 'A', 'B', 'O', 'R', 'T', 'D', 'C', 0,
  /* 3678 */ 'S', 'U', 'B', 'F', 'C', 0,
  /* 3684 */ 'S', 'U', 'B', 'I', 'C', 0,
  /* 3690 */ 'A', 'D', 'D', 'I', 'C', 0,
  /* 3696 */ 'R', 'L', 'D', 'I', 'C', 0,
  /* 3702 */ 'S', 'U', 'B', 'F', 'I', 'C', 0,
  /* 3709 */ 'X', 'S', 'R', 'D', 'P', 'I', 'C', 0,
  /* 3717 */ 'X', 'V', 'R', 'D', 'P', 'I', 'C', 0,
  /* 3725 */ 'X', 'V', 'R', 'S', 'P', 'I', 'C', 0,
  /* 3733 */ 'G', '_', 'I', 'N', 'T', 'R', 'I', 'N', 'S', 'I', 'C', 0,
  /* 3745 */ 'I', 'C', 'B', 'L', 'C', 0,
  /* 3751 */ 'B', 'R', 'I', 'N', 'C', 0,
  /* 3757 */ 'G', '_', 'F', 'P', 'T', 'R', 'U', 'N', 'C', 0,
  /* 3767 */ 'G', '_', 'I', 'N', 'T', 'R', 'I', 'N', 'S', 'I', 'C', '_', 'T', 'R', 'U', 'N', 'C', 0,
  /* 3785 */ 'G', '_', 'T', 'R', 'U', 'N', 'C', 0,
  /* 3793 */ 'G', '_', 'B', 'U', 'I', 'L', 'D', '_', 'V', 'E', 'C', 'T', 'O', 'R', '_', 'T', 'R', 'U', 'N', 'C', 0,
  /* 3814 */ 'S', 'L', 'B', 'S', 'Y', 'N', 'C', 0,
  /* 3822 */ 'T', 'L', 'B', 'S', 'Y', 'N', 'C', 0,
  /* 3830 */ 'M', 'S', 'G', 'S', 'Y', 'N', 'C', 0,
  /* 3838 */ 'I', 'S', 'Y', 'N', 'C', 0,
  /* 3844 */ 'M', 'S', 'Y', 'N', 'C', 0,
  /* 3850 */ 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 3859 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'B', 'R', 'C', 0,
  /* 3874 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'B', 'R', 'C', 0,
  /* 3886 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'R', 'C', 0,
  /* 3901 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'F', 'R', 'C', 0,
  /* 3913 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 3929 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 3942 */ 'X', 'X', 'L', 'O', 'R', 'C', 0,
  /* 3949 */ 'C', 'R', 'O', 'R', 'C', 0,
  /* 3955 */ 'E', 'V', 'O', 'R', 'C', 0,
  /* 3961 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 3976 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'R', 'R', 'C', 0,
  /* 3988 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'S', 'R', 'C', 0,
  /* 4003 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'S', 'R', 'C', 0,
  /* 4015 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 4031 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 4044 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'R', 'C', 0,
  /* 4059 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'R', 'C', 0,
  /* 4071 */ 'S', 'C', 0,
  /* 4074 */ 'T', 'A', 'B', 'O', 'R', 'T', 'W', 'C', 0,
  /* 4083 */ 'V', 'E', 'X', 'T', 'S', 'B', '2', 'D', 0,
  /* 4092 */ 'V', 'E', 'X', 'T', 'S', 'H', '2', 'D', 0,
  /* 4101 */ 'V', 'E', 'X', 'T', 'S', 'W', '2', 'D', 0,
  /* 4110 */ 'T', 'L', 'B', 'S', 'X', '2', 'D', 0,
  /* 4118 */ 'V', 'S', 'H', 'A', 'S', 'I', 'G', 'M', 'A', 'D', 0,
  /* 4129 */ 'G', '_', 'S', 'E', 'X', 'T', 'L', 'O', 'A', 'D', 0,
  /* 4140 */ 'G', '_', 'Z', 'E', 'X', 'T', 'L', 'O', 'A', 'D', 0,
  /* 4151 */ 'G', '_', 'L', 'O', 'A', 'D', 0,
  /* 4158 */ 'V', 'S', 'R', 'A', 'D', 0,
  /* 4164 */ 'V', 'G', 'B', 'B', 'D', 0,
  /* 4170 */ 'V', 'P', 'R', 'T', 'Y', 'B', 'D', 0,
  /* 4178 */ 'E', 'F', 'D', 'A', 'D', 'D', 0,
  /* 4185 */ 'Q', 'V', 'F', 'A', 'D', 'D', 0,
  /* 4192 */ 'G', '_', 'F', 'A', 'D', 'D', 0,
  /* 4199 */ 'Q', 'V', 'F', 'M', 'A', 'D', 'D', 0,
  /* 4207 */ 'Q', 'V', 'F', 'N', 'M', 'A', 'D', 'D', 0,
  /* 4216 */ 'Q', 'V', 'F', 'X', 'X', 'C', 'P', 'N', 'M', 'A', 'D', 'D', 0,
  /* 4229 */ 'Q', 'V', 'F', 'X', 'X', 'N', 'P', 'M', 'A', 'D', 'D', 0,
  /* 4241 */ 'Q', 'V', 'F', 'X', 'M', 'A', 'D', 'D', 0,
  /* 4250 */ 'Q', 'V', 'F', 'X', 'X', 'M', 'A', 'D', 'D', 0,
  /* 4260 */ 'E', 'F', 'S', 'A', 'D', 'D', 0,
  /* 4267 */ 'E', 'V', 'F', 'S', 'A', 'D', 'D', 0,
  /* 4275 */ 'G', '_', 'A', 'D', 'D', 0,
  /* 4281 */ 'G', '_', 'A', 'T', 'O', 'M', 'I', 'C', 'R', 'M', 'W', '_', 'A', 'D', 'D', 0,
  /* 4297 */ 'E', 'V', 'L', 'D', 'D', 0,
  /* 4303 */ 'M', 'T', 'V', 'S', 'R', 'D', 'D', 0,
  /* 4311 */ 'E', 'V', 'S', 'T', 'D', 'D', 0,
  /* 4318 */ 'E', 'F', 'S', 'C', 'F', 'D', 0,
  /* 4325 */ 'L', 'F', 'D', 0,
  /* 4329 */ 'S', 'T', 'F', 'D', 0,
  /* 4334 */ 'F', 'N', 'E', 'G', 'D', 0,
  /* 4340 */ 'V', 'N', 'E', 'G', 'D', 0,
  /* 4346 */ 'M', 'A', 'D', 'D', 'H', 'D', 0,
  /* 4353 */ 'M', 'U', 'L', 'H', 'D', 0,
  /* 4359 */ 'Q', 'V', 'F', 'C', 'F', 'I', 'D', 0,
  /* 4367 */ 'H', 'R', 'F', 'I', 'D', 0,
  /* 4373 */ 'E', 'F', 'D', 'C', 'F', 'S', 'I', 'D', 0,
  /* 4382 */ 'Q', 'V', 'F', 'C', 'T', 'I', 'D', 0,
  /* 4390 */ 'E', 'F', 'D', 'C', 'F', 'U', 'I', 'D', 0,
  /* 4399 */ 'T', 'L', 'B', 'L', 'D', 0,
  /* 4405 */ 'M', 'A', 'D', 'D', 'L', 'D', 0,
  /* 4412 */ 'F', 'S', 'E', 'L', 'D', 0,
  /* 4418 */ 'M', 'U', 'L', 'L', 'D', 0,
  /* 4424 */ 'C', 'M', 'P', 'L', 'D', 0,
  /* 4430 */ 'M', 'F', 'V', 'S', 'R', 'L', 'D', 0,
  /* 4438 */ 'V', 'R', 'L', 'D', 0,
  /* 4443 */ 'V', 'S', 'L', 'D', 0,
  /* 4448 */ 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'L', 'D', 0,
  /* 4462 */ 'F', 'R', 'I', 'M', 'D', 0,
  /* 4468 */ 'V', 'B', 'P', 'E', 'R', 'M', 'D', 0,
  /* 4476 */ 'V', 'P', 'M', 'S', 'U', 'M', 'D', 0,
  /* 4484 */ 'X', 'X', 'L', 'A', 'N', 'D', 0,
  /* 4491 */ 'X', 'X', 'L', 'N', 'A', 'N', 'D', 0,
  /* 4499 */ 'C', 'R', 'N', 'A', 'N', 'D', 0,
  /* 4506 */ 'E', 'V', 'N', 'A', 'N', 'D', 0,
  /* 4513 */ 'G', '_', 'A', 'T', 'O', 'M', 'I', 'C', 'R', 'M', 'W', '_', 'N', 'A', 'N', 'D', 0,
  /* 4530 */ 'C', 'R', 'A', 'N', 'D', 0,
  /* 4536 */ 'E', 'V', 'A', 'N', 'D', 0,
  /* 4542 */ 'G', '_', 'A', 'N', 'D', 0,
  /* 4548 */ 'G', '_', 'A', 'T', 'O', 'M', 'I', 'C', 'R', 'M', 'W', '_', 'A', 'N', 'D', 0,
  /* 4564 */ 'T', 'E', 'N', 'D', 0,
  /* 4569 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 4582 */ 'F', 'C', 'P', 'S', 'G', 'N', 'D', 0,
  /* 4590 */ 'F', 'R', 'I', 'N', 'D', 0,
  /* 4596 */ 'G', '_', 'B', 'R', 'C', 'O', 'N', 'D', 0,
  /* 4605 */ 'S', 'E', 'T', 'R', 'N', 'D', 0,
  /* 4612 */ 'G', '_', 'I', 'N', 'T', 'R', 'I', 'N', 'S', 'I', 'C', '_', 'R', 'O', 'U', 'N', 'D', 0,
  /* 4630 */ 'F', 'R', 'I', 'P', 'D', 0,
  /* 4636 */ 'C', 'M', 'P', 'D', 0,
  /* 4641 */ 'L', 'O', 'A', 'D', '_', 'S', 'T', 'A', 'C', 'K', '_', 'G', 'U', 'A', 'R', 'D', 0,
  /* 4658 */ 'X', 'X', 'B', 'R', 'D', 0,
  /* 4664 */ 'M', 'T', 'M', 'S', 'R', 'D', 0,
  /* 4671 */ 'M', 'F', 'V', 'S', 'R', 'D', 0,
  /* 4678 */ 'M', 'T', 'V', 'S', 'R', 'D', 0,
  /* 4685 */ 'M', 'F', 'V', 'R', 'D', 0,
  /* 4691 */ 'F', 'A', 'B', 'S', 'D', 0,
  /* 4697 */ 'F', 'N', 'A', 'B', 'S', 'D', 0,
  /* 4704 */ 'M', 'O', 'D', 'S', 'D', 0,
  /* 4710 */ 'V', 'M', 'I', 'N', 'S', 'D', 0,
  /* 4717 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'D', 0,
  /* 4726 */ 'V', 'M', 'A', 'X', 'S', 'D', 0,
  /* 4733 */ 'L', 'X', 'S', 'D', 0,
  /* 4738 */ 'S', 'T', 'X', 'S', 'D', 0,
  /* 4744 */ 'V', 'E', 'X', 'T', 'R', 'A', 'C', 'T', 'D', 0,
  /* 4754 */ 'V', 'P', 'O', 'P', 'C', 'N', 'T', 'D', 0,
  /* 4763 */ 'V', 'I', 'N', 'S', 'E', 'R', 'T', 'D', 0,
  /* 4772 */ 'S', 'T', 'D', 0,
  /* 4776 */ 'M', 'O', 'D', 'U', 'D', 0,
  /* 4782 */ 'V', 'M', 'I', 'N', 'U', 'D', 0,
  /* 4789 */ 'F', 'C', 'M', 'P', 'U', 'D', 0,
  /* 4796 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'D', 0,
  /* 4805 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'D', 0,
  /* 4814 */ 'V', 'M', 'A', 'X', 'U', 'D', 0,
  /* 4821 */ 'D', 'I', 'V', 'D', 0,
  /* 4826 */ 'F', 'R', 'I', 'Z', 'D', 0,
  /* 4832 */ 'V', 'C', 'L', 'Z', 'D', 0,
  /* 4838 */ 'C', 'N', 'T', 'L', 'Z', 'D', 0,
  /* 4845 */ 'V', 'C', 'T', 'Z', 'D', 0,
  /* 4851 */ 'C', 'N', 'T', 'T', 'Z', 'D', 0,
  /* 4858 */ 'M', 'F', 'B', 'H', 'R', 'B', 'E', 0,
  /* 4866 */ 'G', '_', 'S', 'S', 'U', 'B', 'E', 0,
  /* 4874 */ 'G', '_', 'U', 'S', 'U', 'B', 'E', 0,
  /* 4882 */ 'G', '_', 'F', 'E', 'N', 'C', 'E', 0,
  /* 4890 */ 'R', 'E', 'G', '_', 'S', 'E', 'Q', 'U', 'E', 'N', 'C', 'E', 0,
  /* 4903 */ 'M', 'F', 'F', 'S', 'C', 'E', 0,
  /* 4910 */ 'G', '_', 'S', 'A', 'D', 'D', 'E', 0,
  /* 4918 */ 'G', '_', 'U', 'A', 'D', 'D', 'E', 0,
  /* 4926 */ 'D', 'I', 'V', 'D', 'E', 0,
  /* 4932 */ 'G', '_', 'F', 'M', 'I', 'N', 'N', 'U', 'M', '_', 'I', 'E', 'E', 'E', 0,
  /* 4947 */ 'G', '_', 'F', 'M', 'A', 'X', 'N', 'U', 'M', '_', 'I', 'E', 'E', 'E', 0,
  /* 4962 */ 'S', 'L', 'B', 'M', 'F', 'E', 'E', 0,
  /* 4970 */ 'W', 'R', 'T', 'E', 'E', 0,
  /* 4976 */ 'S', 'U', 'B', 'F', 'E', 0,
  /* 4982 */ 'E', 'V', 'L', 'W', 'H', 'E', 0,
  /* 4989 */ 'E', 'V', 'S', 'T', 'W', 'H', 'E', 0,
  /* 4997 */ 'S', 'L', 'B', 'I', 'E', 0,
  /* 5003 */ 'T', 'L', 'B', 'I', 'E', 0,
  /* 5009 */ 'G', '_', 'J', 'U', 'M', 'P', '_', 'T', 'A', 'B', 'L', 'E', 0,
  /* 5022 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 5029 */ 'A', 'D', 'D', 'M', 'E', 0,
  /* 5035 */ 'S', 'U', 'B', 'F', 'M', 'E', 0,
  /* 5042 */ 'L', 'O', 'C', 'A', 'L', '_', 'E', 'S', 'C', 'A', 'P', 'E', 0,
  /* 5055 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'S', 'P', 'E', 0,
  /* 5069 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'S', 'P', 'E', 0,
  /* 5080 */ 'T', 'L', 'B', 'R', 'E', 0,
  /* 5086 */ 'Q', 'V', 'F', 'R', 'E', 0,
  /* 5092 */ 'G', '_', 'S', 'T', 'O', 'R', 'E', 0,
  /* 5100 */ 'S', 'L', 'B', 'M', 'T', 'E', 0,
  /* 5107 */ 'Q', 'V', 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 0,
  /* 5117 */ 'C', 'P', '_', 'P', 'A', 'S', 'T', 'E', 0,
  /* 5126 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 5136 */ 'G', '_', 'G', 'L', 'O', 'B', 'A', 'L', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 5151 */ 'M', 'F', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 5160 */ 'M', 'T', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 5169 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 5184 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 5198 */ 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 5211 */ 'T', 'L', 'B', 'W', 'E', 0,
  /* 5217 */ 'D', 'I', 'V', 'W', 'E', 0,
  /* 5223 */ 'E', 'V', 'S', 'T', 'W', 'W', 'E', 0,
  /* 5231 */ 'A', 'D', 'D', 'Z', 'E', 0,
  /* 5237 */ 'S', 'U', 'B', 'F', 'Z', 'E', 0,
  /* 5244 */ 'G', '_', 'F', 'C', 'A', 'N', 'O', 'N', 'I', 'C', 'A', 'L', 'I', 'Z', 'E', 0,
  /* 5260 */ 'D', 'C', 'B', 'F', 0,
  /* 5265 */ 'S', 'U', 'B', 'F', 0,
  /* 5270 */ 'G', '_', 'C', 'T', 'L', 'Z', '_', 'Z', 'E', 'R', 'O', '_', 'U', 'N', 'D', 'E', 'F', 0,
  /* 5288 */ 'G', '_', 'C', 'T', 'T', 'Z', '_', 'Z', 'E', 'R', 'O', '_', 'U', 'N', 'D', 'E', 'F', 0,
  /* 5306 */ 'G', '_', 'I', 'M', 'P', 'L', 'I', 'C', 'I', 'T', '_', 'D', 'E', 'F', 0,
  /* 5321 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'F', 0,
  /* 5330 */ 'E', 'V', 'M', 'W', 'H', 'S', 'M', 'F', 0,
  /* 5339 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'F', 0,
  /* 5348 */ 'E', 'V', 'M', 'W', 'S', 'M', 'F', 0,
  /* 5356 */ 'M', 'C', 'R', 'F', 0,
  /* 5361 */ 'M', 'F', 'O', 'C', 'R', 'F', 0,
  /* 5368 */ 'M', 'T', 'O', 'C', 'R', 'F', 0,
  /* 5375 */ 'M', 'T', 'C', 'R', 'F', 0,
  /* 5381 */ 'E', 'F', 'D', 'C', 'F', 'S', 'F', 0,
  /* 5389 */ 'E', 'F', 'S', 'C', 'F', 'S', 'F', 0,
  /* 5397 */ 'E', 'V', 'F', 'S', 'C', 'F', 'S', 'F', 0,
  /* 5406 */ 'M', 'T', 'F', 'S', 'F', 0,
  /* 5412 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'F', 0,
  /* 5421 */ 'E', 'V', 'M', 'W', 'H', 'S', 'S', 'F', 0,
  /* 5430 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'F', 0,
  /* 5439 */ 'E', 'V', 'M', 'W', 'S', 'S', 'F', 0,
  /* 5447 */ 'E', 'F', 'D', 'C', 'T', 'S', 'F', 0,
  /* 5455 */ 'E', 'F', 'S', 'C', 'T', 'S', 'F', 0,
  /* 5463 */ 'E', 'V', 'F', 'S', 'C', 'T', 'S', 'F', 0,
  /* 5472 */ 'E', 'F', 'D', 'C', 'F', 'U', 'F', 0,
  /* 5480 */ 'E', 'F', 'S', 'C', 'F', 'U', 'F', 0,
  /* 5488 */ 'E', 'V', 'F', 'S', 'C', 'F', 'U', 'F', 0,
  /* 5497 */ 'E', 'F', 'D', 'C', 'T', 'U', 'F', 0,
  /* 5505 */ 'E', 'F', 'S', 'C', 'T', 'U', 'F', 0,
  /* 5513 */ 'E', 'V', 'F', 'S', 'C', 'T', 'U', 'F', 0,
  /* 5522 */ 'S', 'L', 'B', 'I', 'E', 'G', 0,
  /* 5529 */ 'E', 'F', 'D', 'N', 'E', 'G', 0,
  /* 5536 */ 'Q', 'V', 'F', 'N', 'E', 'G', 0,
  /* 5543 */ 'G', '_', 'F', 'N', 'E', 'G', 0,
  /* 5550 */ 'E', 'F', 'S', 'N', 'E', 'G', 0,
  /* 5557 */ 'E', 'V', 'F', 'S', 'N', 'E', 'G', 0,
  /* 5565 */ 'E', 'V', 'N', 'E', 'G', 0,
  /* 5571 */ 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 5586 */ 'I', 'N', 'S', 'E', 'R', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 5600 */ 'S', 'U', 'B', 'R', 'E', 'G', '_', 'T', 'O', '_', 'R', 'E', 'G', 0,
  /* 5614 */ 'G', '_', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', 'X', 'C', 'H', 'G', 0,
  /* 5631 */ 'G', '_', 'A', 'T', 'O', 'M', 'I', 'C', 'R', 'M', 'W', '_', 'X', 'C', 'H', 'G', 0,
  /* 5648 */ 'G', '_', 'F', 'L', 'O', 'G', 0,
  /* 5655 */ 'G', '_', 'V', 'A', 'A', 'R', 'G', 0,
  /* 5663 */ 'V', '_', 'S', 'E', 'T', '0', 'H', 0,
  /* 5671 */ 'V', 'S', 'R', 'A', 'H', 0,
  /* 5677 */ 'E', 'V', 'L', 'D', 'H', 0,
  /* 5683 */ 'E', 'V', 'S', 'T', 'D', 'H', 0,
  /* 5690 */ 'V', 'C', 'M', 'P', 'N', 'E', 'H', 0,
  /* 5698 */ 'V', 'M', 'R', 'G', 'H', 'H', 0,
  /* 5705 */ 'V', 'M', 'R', 'G', 'L', 'H', 0,
  /* 5712 */ 'V', 'R', 'L', 'H', 0,
  /* 5717 */ 'V', 'S', 'L', 'H', 0,
  /* 5722 */ 'G', '_', 'S', 'M', 'U', 'L', 'H', 0,
  /* 5730 */ 'G', '_', 'U', 'M', 'U', 'L', 'H', 0,
  /* 5738 */ 'V', 'P', 'M', 'S', 'U', 'M', 'H', 0,
  /* 5746 */ 'X', 'X', 'B', 'R', 'H', 0,
  /* 5752 */ 'V', 'S', 'R', 'H', 0,
  /* 5757 */ 'V', 'M', 'U', 'L', 'E', 'S', 'H', 0,
  /* 5765 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 'H', 0,
  /* 5779 */ 'V', 'A', 'V', 'G', 'S', 'H', 0,
  /* 5786 */ 'V', 'U', 'P', 'K', 'H', 'S', 'H', 0,
  /* 5794 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'H', 0,
  /* 5803 */ 'V', 'U', 'P', 'K', 'L', 'S', 'H', 0,
  /* 5811 */ 'V', 'M', 'I', 'N', 'S', 'H', 0,
  /* 5818 */ 'V', 'M', 'U', 'L', 'O', 'S', 'H', 0,
  /* 5826 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'H', 0,
  /* 5835 */ 'E', 'V', 'E', 'X', 'T', 'S', 'H', 0,
  /* 5843 */ 'V', 'M', 'A', 'X', 'S', 'H', 0,
  /* 5850 */ 'V', 'S', 'P', 'L', 'T', 'H', 0,
  /* 5857 */ 'V', 'P', 'O', 'P', 'C', 'N', 'T', 'H', 0,
  /* 5866 */ 'V', 'I', 'N', 'S', 'E', 'R', 'T', 'H', 0,
  /* 5875 */ 'S', 'T', 'H', 0,
  /* 5879 */ 'V', 'A', 'B', 'S', 'D', 'U', 'H', 0,
  /* 5887 */ 'V', 'M', 'U', 'L', 'E', 'U', 'H', 0,
  /* 5895 */ 'V', 'A', 'V', 'G', 'U', 'H', 0,
  /* 5902 */ 'V', 'M', 'I', 'N', 'U', 'H', 0,
  /* 5909 */ 'V', 'M', 'U', 'L', 'O', 'U', 'H', 0,
  /* 5917 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'H', 0,
  /* 5926 */ 'V', 'E', 'X', 'T', 'R', 'A', 'C', 'T', 'U', 'H', 0,
  /* 5937 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'H', 0,
  /* 5946 */ 'V', 'M', 'A', 'X', 'U', 'H', 0,
  /* 5953 */ 'V', 'C', 'M', 'P', 'N', 'E', 'Z', 'H', 0,
  /* 5962 */ 'V', 'C', 'L', 'Z', 'H', 0,
  /* 5968 */ 'V', 'C', 'T', 'Z', 'H', 0,
  /* 5974 */ 'D', 'C', 'B', 'I', 0,
  /* 5979 */ 'I', 'C', 'B', 'I', 0,
  /* 5984 */ 'S', 'U', 'B', 'I', 0,
  /* 5989 */ 'D', 'C', 'C', 'C', 'I', 0,
  /* 5995 */ 'I', 'C', 'C', 'C', 'I', 0,
  /* 6001 */ 'T', 'A', 'B', 'O', 'R', 'T', 'D', 'C', 'I', 0,
  /* 6011 */ 'R', 'F', 'C', 'I', 0,
  /* 6016 */ 'R', 'F', 'M', 'C', 'I', 0,
  /* 6022 */ 'Q', 'V', 'G', 'P', 'C', 'I', 0,
  /* 6029 */ 'T', 'A', 'B', 'O', 'R', 'T', 'W', 'C', 'I', 0,
  /* 6039 */ 'S', 'R', 'A', 'D', 'I', 0,
  /* 6045 */ 'A', 'D', 'D', 'I', 0,
  /* 6050 */ 'R', 'F', 'D', 'I', 0,
  /* 6055 */ 'C', 'M', 'P', 'L', 'D', 'I', 0,
  /* 6062 */ 'C', 'L', 'R', 'L', 'S', 'L', 'D', 'I', 0,
  /* 6071 */ 'E', 'X', 'T', 'L', 'D', 'I', 0,
  /* 6078 */ 'X', 'X', 'P', 'E', 'R', 'M', 'D', 'I', 0,
  /* 6087 */ 'C', 'M', 'P', 'D', 'I', 0,
  /* 6093 */ 'C', 'L', 'R', 'R', 'D', 'I', 0,
  /* 6100 */ 'I', 'N', 'S', 'R', 'D', 'I', 0,
  /* 6107 */ 'R', 'O', 'T', 'R', 'D', 'I', 0,
  /* 6114 */ 'E', 'X', 'T', 'R', 'D', 'I', 0,
  /* 6121 */ 'T', 'D', 'I', 0,
  /* 6125 */ 'W', 'R', 'T', 'E', 'E', 'I', 0,
  /* 6132 */ 'R', 'F', 'I', 0,
  /* 6136 */ 'M', 'T', 'F', 'S', 'F', 'I', 0,
  /* 6143 */ 'E', 'V', 'S', 'P', 'L', 'A', 'T', 'F', 'I', 0,
  /* 6153 */ 'E', 'V', 'M', 'E', 'R', 'G', 'E', 'H', 'I', 0,
  /* 6163 */ 'E', 'V', 'M', 'E', 'R', 'G', 'E', 'L', 'O', 'H', 'I', 0,
  /* 6175 */ 'G', '_', 'P', 'H', 'I', 0,
  /* 6181 */ 'T', 'L', 'B', 'L', 'I', 0,
  /* 6187 */ 'M', 'U', 'L', 'L', 'I', 0,
  /* 6193 */ 'E', 'X', 'T', 'S', 'W', 'S', 'L', 'I', 0,
  /* 6202 */ 'V', 'R', 'L', 'D', 'M', 'I', 0,
  /* 6209 */ 'R', 'L', 'D', 'I', 'M', 'I', 0,
  /* 6216 */ 'R', 'L', 'W', 'I', 'M', 'I', 0,
  /* 6223 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'I', 0,
  /* 6232 */ 'E', 'V', 'M', 'W', 'H', 'S', 'M', 'I', 0,
  /* 6241 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'I', 0,
  /* 6250 */ 'E', 'V', 'M', 'W', 'S', 'M', 'I', 0,
  /* 6258 */ 'E', 'V', 'M', 'H', 'E', 'U', 'M', 'I', 0,
  /* 6267 */ 'E', 'V', 'M', 'W', 'H', 'U', 'M', 'I', 0,
  /* 6276 */ 'E', 'V', 'M', 'W', 'L', 'U', 'M', 'I', 0,
  /* 6285 */ 'E', 'V', 'M', 'H', 'O', 'U', 'M', 'I', 0,
  /* 6294 */ 'E', 'V', 'M', 'W', 'U', 'M', 'I', 0,
  /* 6302 */ 'V', 'R', 'L', 'W', 'M', 'I', 0,
  /* 6309 */ 'Q', 'V', 'A', 'L', 'I', 'G', 'N', 'I', 0,
  /* 6318 */ 'M', 'F', 'F', 'S', 'C', 'R', 'N', 'I', 0,
  /* 6327 */ 'M', 'F', 'F', 'S', 'C', 'D', 'R', 'N', 'I', 0,
  /* 6337 */ 'V', 'S', 'L', 'D', 'O', 'I', 0,
  /* 6344 */ 'X', 'S', 'R', 'D', 'P', 'I', 0,
  /* 6351 */ 'X', 'V', 'R', 'D', 'P', 'I', 0,
  /* 6358 */ 'X', 'S', 'R', 'Q', 'P', 'I', 0,
  /* 6365 */ 'X', 'V', 'R', 'S', 'P', 'I', 0,
  /* 6372 */ 'X', 'O', 'R', 'I', 0,
  /* 6377 */ 'E', 'F', 'D', 'C', 'F', 'S', 'I', 0,
  /* 6385 */ 'E', 'F', 'S', 'C', 'F', 'S', 'I', 0,
  /* 6393 */ 'E', 'V', 'F', 'S', 'C', 'F', 'S', 'I', 0,
  /* 6402 */ 'G', '_', 'F', 'P', 'T', 'O', 'S', 'I', 0,
  /* 6411 */ 'E', 'F', 'D', 'C', 'T', 'S', 'I', 0,
  /* 6419 */ 'E', 'F', 'S', 'C', 'T', 'S', 'I', 0,
  /* 6427 */ 'E', 'V', 'F', 'S', 'C', 'T', 'S', 'I', 0,
  /* 6436 */ 'Q', 'V', 'E', 'S', 'P', 'L', 'A', 'T', 'I', 0,
  /* 6446 */ 'E', 'V', 'S', 'P', 'L', 'A', 'T', 'I', 0,
  /* 6455 */ 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 6464 */ 'E', 'F', 'D', 'C', 'F', 'U', 'I', 0,
  /* 6472 */ 'E', 'F', 'S', 'C', 'F', 'U', 'I', 0,
  /* 6480 */ 'E', 'V', 'F', 'S', 'C', 'F', 'U', 'I', 0,
  /* 6489 */ 'G', '_', 'F', 'P', 'T', 'O', 'U', 'I', 0,
  /* 6498 */ 'E', 'F', 'D', 'C', 'T', 'U', 'I', 0,
  /* 6506 */ 'E', 'F', 'S', 'C', 'T', 'U', 'I', 0,
  /* 6514 */ 'E', 'V', 'F', 'S', 'C', 'T', 'U', 'I', 0,
  /* 6523 */ 'S', 'R', 'A', 'W', 'I', 0,
  /* 6529 */ 'X', 'X', 'S', 'L', 'D', 'W', 'I', 0,
  /* 6537 */ 'C', 'M', 'P', 'L', 'W', 'I', 0,
  /* 6544 */ 'E', 'V', 'R', 'L', 'W', 'I', 0,
  /* 6551 */ 'C', 'L', 'R', 'L', 'S', 'L', 'W', 'I', 0,
  /* 6560 */ 'I', 'N', 'S', 'L', 'W', 'I', 0,
  /* 6567 */ 'E', 'V', 'S', 'L', 'W', 'I', 0,
  /* 6574 */ 'E', 'X', 'T', 'L', 'W', 'I', 0,
  /* 6581 */ 'C', 'M', 'P', 'W', 'I', 0,
  /* 6587 */ 'C', 'L', 'R', 'R', 'W', 'I', 0,
  /* 6594 */ 'I', 'N', 'S', 'R', 'W', 'I', 0,
  /* 6601 */ 'R', 'O', 'T', 'R', 'W', 'I', 0,
  /* 6608 */ 'E', 'X', 'T', 'R', 'W', 'I', 0,
  /* 6615 */ 'L', 'S', 'W', 'I', 0,
  /* 6620 */ 'S', 'T', 'S', 'W', 'I', 0,
  /* 6626 */ 'T', 'W', 'I', 0,
  /* 6630 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'D', 'X', 'I', 0,
  /* 6640 */ 'Q', 'V', 'S', 'T', 'F', 'D', 'X', 'I', 0,
  /* 6649 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'S', 'X', 'I', 0,
  /* 6659 */ 'Q', 'V', 'S', 'T', 'F', 'S', 'X', 'I', 0,
  /* 6668 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'D', 'U', 'X', 'I', 0,
  /* 6679 */ 'Q', 'V', 'S', 'T', 'F', 'D', 'U', 'X', 'I', 0,
  /* 6689 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'S', 'U', 'X', 'I', 0,
  /* 6700 */ 'Q', 'V', 'S', 'T', 'F', 'S', 'U', 'X', 'I', 0,
  /* 6710 */ 'T', 'C', 'H', 'E', 'C', 'K', 0,
  /* 6717 */ 'G', '_', 'P', 'T', 'R', '_', 'M', 'A', 'S', 'K', 0,
  /* 6728 */ 'Q', 'V', 'F', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 0,
  /* 6739 */ 'B', 'L', 0,
  /* 6742 */ 'g', 'B', 'C', 'L', 0,
  /* 6747 */ 'B', 'C', 'C', 'L', 0,
  /* 6752 */ 'R', 'L', 'D', 'C', 'L', 0,
  /* 6758 */ 'R', 'L', 'D', 'I', 'C', 'L', 0,
  /* 6765 */ 'G', 'C', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 6774 */ 'D', 'B', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 6784 */ 'E', 'H', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 6793 */ 'A', 'N', 'N', 'O', 'T', 'A', 'T', 'I', 'O', 'N', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 6810 */ 'T', 'L', 'B', 'I', 'E', 'L', 0,
  /* 6817 */ 'I', 'C', 'A', 'L', 'L', '_', 'B', 'R', 'A', 'N', 'C', 'H', '_', 'F', 'U', 'N', 'N', 'E', 'L', 0,
  /* 6837 */ 'Q', 'V', 'F', 'S', 'E', 'L', 0,
  /* 6844 */ 'I', 'S', 'E', 'L', 0,
  /* 6849 */ 'E', 'V', 'S', 'E', 'L', 0,
  /* 6855 */ 'X', 'X', 'S', 'E', 'L', 0,
  /* 6861 */ 'D', 'C', 'B', 'F', 'L', 0,
  /* 6867 */ 'G', '_', 'S', 'H', 'L', 0,
  /* 6873 */ 'G', '_', 'F', 'C', 'E', 'I', 'L', 0,
  /* 6881 */ 'P', 'A', 'T', 'C', 'H', 'A', 'B', 'L', 'E', '_', 'T', 'A', 'I', 'L', '_', 'C', 'A', 'L', 'L', 0,
  /* 6901 */ 'P', 'A', 'T', 'C', 'H', 'A', 'B', 'L', 'E', '_', 'T', 'Y', 'P', 'E', 'D', '_', 'E', 'V', 'E', 'N', 'T', '_', 'C', 'A', 'L', 'L', 0,
  /* 6928 */ 'P', 'A', 'T', 'C', 'H', 'A', 'B', 'L', 'E', '_', 'E', 'V', 'E', 'N', 'T', '_', 'C', 'A', 'L', 'L', 0,
  /* 6949 */ 'F', 'E', 'N', 'T', 'R', 'Y', '_', 'C', 'A', 'L', 'L', 0,
  /* 6961 */ 'D', 'S', 'S', 'A', 'L', 'L', 0,
  /* 6968 */ 'K', 'I', 'L', 'L', 0,
  /* 6973 */ 'L', 'X', 'V', 'L', 'L', 0,
  /* 6979 */ 'S', 'T', 'X', 'V', 'L', 'L', 0,
  /* 6986 */ 'B', 'L', 'R', 'L', 0,
  /* 6991 */ 'g', 'B', 'C', 'L', 'R', 'L', 0,
  /* 6998 */ 'B', 'C', 'C', 'L', 'R', 'L', 0,
  /* 7005 */ 'B', 'D', 'Z', 'L', 'R', 'L', 0,
  /* 7012 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 0,
  /* 7020 */ 'B', 'C', 'T', 'R', 'L', 0,
  /* 7026 */ 'g', 'B', 'C', 'C', 'T', 'R', 'L', 0,
  /* 7034 */ 'B', 'C', 'C', 'C', 'T', 'R', 'L', 0,
  /* 7042 */ 'M', 'F', 'F', 'S', 'L', 0,
  /* 7048 */ 'L', 'V', 'S', 'L', 0,
  /* 7053 */ 'E', 'F', 'D', 'M', 'U', 'L', 0,
  /* 7060 */ 'Q', 'V', 'F', 'M', 'U', 'L', 0,
  /* 7067 */ 'G', '_', 'F', 'M', 'U', 'L', 0,
  /* 7074 */ 'E', 'F', 'S', 'M', 'U', 'L', 0,
  /* 7081 */ 'E', 'V', 'F', 'S', 'M', 'U', 'L', 0,
  /* 7089 */ 'Q', 'V', 'F', 'X', 'M', 'U', 'L', 0,
  /* 7097 */ 'G', '_', 'M', 'U', 'L', 0,
  /* 7103 */ 'L', 'X', 'V', 'L', 0,
  /* 7108 */ 'S', 'T', 'X', 'V', 'L', 0,
  /* 7114 */ 'L', 'B', 'A', 'R', 'X', 'L', 0,
  /* 7121 */ 'L', 'D', 'A', 'R', 'X', 'L', 0,
  /* 7128 */ 'L', 'H', 'A', 'R', 'X', 'L', 0,
  /* 7135 */ 'L', 'W', 'A', 'R', 'X', 'L', 0,
  /* 7142 */ 'L', 'V', 'X', 'L', 0,
  /* 7147 */ 'S', 'T', 'V', 'X', 'L', 0,
  /* 7153 */ 'D', 'C', 'B', 'Z', 'L', 0,
  /* 7159 */ 'B', 'D', 'Z', 'L', 0,
  /* 7164 */ 'B', 'D', 'N', 'Z', 'L', 0,
  /* 7170 */ 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 7177 */ 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 7186 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 7197 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 7208 */ 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 7220 */ 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 7232 */ 'V', 'M', 'S', 'U', 'M', 'M', 'B', 'M', 0,
  /* 7241 */ 'V', 'S', 'U', 'B', 'U', 'B', 'M', 0,
  /* 7249 */ 'V', 'A', 'D', 'D', 'U', 'B', 'M', 0,
  /* 7257 */ 'V', 'M', 'S', 'U', 'M', 'U', 'B', 'M', 0,
  /* 7266 */ 'V', 'S', 'U', 'B', 'U', 'D', 'M', 0,
  /* 7274 */ 'V', 'A', 'D', 'D', 'U', 'D', 'M', 0,
  /* 7282 */ 'G', '_', 'F', 'R', 'E', 'M', 0,
  /* 7289 */ 'G', '_', 'S', 'R', 'E', 'M', 0,
  /* 7296 */ 'G', '_', 'U', 'R', 'E', 'M', 0,
  /* 7303 */ 'V', 'M', 'S', 'U', 'M', 'S', 'H', 'M', 0,
  /* 7312 */ 'V', 'S', 'U', 'B', 'U', 'H', 'M', 0,
  /* 7320 */ 'V', 'M', 'L', 'A', 'D', 'D', 'U', 'H', 'M', 0,
  /* 7330 */ 'V', 'A', 'D', 'D', 'U', 'H', 'M', 0,
  /* 7338 */ 'V', 'M', 'S', 'U', 'M', 'U', 'H', 'M', 0,
  /* 7347 */ 'T', 'R', 'E', 'C', 'L', 'A', 'I', 'M', 0,
  /* 7356 */ 'V', 'R', 'F', 'I', 'M', 0,
  /* 7362 */ 'X', 'S', 'R', 'D', 'P', 'I', 'M', 0,
  /* 7370 */ 'X', 'V', 'R', 'D', 'P', 'I', 'M', 0,
  /* 7378 */ 'X', 'V', 'R', 'S', 'P', 'I', 'M', 0,
  /* 7386 */ 'Q', 'V', 'F', 'R', 'I', 'M', 0,
  /* 7393 */ 'V', 'R', 'L', 'D', 'N', 'M', 0,
  /* 7400 */ 'R', 'L', 'W', 'I', 'N', 'M', 0,
  /* 7407 */ 'V', 'R', 'L', 'W', 'N', 'M', 0,
  /* 7414 */ 'V', 'S', 'U', 'B', 'U', 'Q', 'M', 0,
  /* 7422 */ 'V', 'A', 'D', 'D', 'U', 'Q', 'M', 0,
  /* 7430 */ 'V', 'S', 'U', 'B', 'E', 'U', 'Q', 'M', 0,
  /* 7439 */ 'V', 'A', 'D', 'D', 'E', 'U', 'Q', 'M', 0,
  /* 7448 */ 'Q', 'V', 'F', 'P', 'E', 'R', 'M', 0,
  /* 7456 */ 'V', 'P', 'E', 'R', 'M', 0,
  /* 7462 */ 'X', 'X', 'P', 'E', 'R', 'M', 0,
  /* 7469 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', 0,
  /* 7479 */ 'V', 'P', 'K', 'U', 'D', 'U', 'M', 0,
  /* 7487 */ 'V', 'P', 'K', 'U', 'H', 'U', 'M', 0,
  /* 7495 */ 'G', '_', 'F', 'M', 'I', 'N', 'I', 'M', 'U', 'M', 0,
  /* 7506 */ 'G', '_', 'F', 'M', 'A', 'X', 'I', 'M', 'U', 'M', 0,
  /* 7517 */ 'G', '_', 'F', 'M', 'I', 'N', 'N', 'U', 'M', 0,
  /* 7527 */ 'G', '_', 'F', 'M', 'A', 'X', 'N', 'U', 'M', 0,
  /* 7537 */ 'V', 'P', 'K', 'U', 'W', 'U', 'M', 0,
  /* 7545 */ 'V', 'S', 'U', 'B', 'U', 'W', 'M', 0,
  /* 7553 */ 'V', 'A', 'D', 'D', 'U', 'W', 'M', 0,
  /* 7561 */ 'V', 'M', 'U', 'L', 'U', 'W', 'M', 0,
  /* 7569 */ 'E', 'V', 'M', 'H', 'E', 'G', 'S', 'M', 'F', 'A', 'N', 0,
  /* 7581 */ 'E', 'V', 'M', 'H', 'O', 'G', 'S', 'M', 'F', 'A', 'N', 0,
  /* 7593 */ 'E', 'V', 'M', 'W', 'S', 'M', 'F', 'A', 'N', 0,
  /* 7603 */ 'E', 'V', 'M', 'W', 'S', 'S', 'F', 'A', 'N', 0,
  /* 7613 */ 'E', 'V', 'M', 'H', 'E', 'G', 'S', 'M', 'I', 'A', 'N', 0,
  /* 7625 */ 'E', 'V', 'M', 'H', 'O', 'G', 'S', 'M', 'I', 'A', 'N', 0,
  /* 7637 */ 'E', 'V', 'M', 'W', 'S', 'M', 'I', 'A', 'N', 0,
  /* 7647 */ 'E', 'V', 'M', 'H', 'E', 'G', 'U', 'M', 'I', 'A', 'N', 0,
  /* 7659 */ 'E', 'V', 'M', 'H', 'O', 'G', 'U', 'M', 'I', 'A', 'N', 0,
  /* 7671 */ 'E', 'V', 'M', 'W', 'U', 'M', 'I', 'A', 'N', 0,
  /* 7681 */ 'Q', 'V', 'F', 'T', 'S', 'T', 'N', 'A', 'N', 0,
  /* 7691 */ 'G', '_', 'F', 'C', 'O', 'P', 'Y', 'S', 'I', 'G', 'N', 0,
  /* 7703 */ 'Q', 'V', 'F', 'C', 'P', 'S', 'G', 'N', 0,
  /* 7712 */ 'V', 'R', 'F', 'I', 'N', 0,
  /* 7718 */ 'T', 'B', 'E', 'G', 'I', 'N', 0,
  /* 7725 */ 'G', '_', 'S', 'M', 'I', 'N', 0,
  /* 7732 */ 'G', '_', 'U', 'M', 'I', 'N', 0,
  /* 7739 */ 'G', '_', 'A', 'T', 'O', 'M', 'I', 'C', 'R', 'M', 'W', '_', 'U', 'M', 'I', 'N', 0,
  /* 7756 */ 'G', '_', 'A', 'T', 'O', 'M', 'I', 'C', 'R', 'M', 'W', '_', 'M', 'I', 'N', 0,
  /* 7772 */ 'Q', 'V', 'F', 'R', 'I', 'N', 0,
  /* 7779 */ 'M', 'F', 'S', 'R', 'I', 'N', 0,
  /* 7786 */ 'M', 'T', 'S', 'R', 'I', 'N', 0,
  /* 7793 */ 'G', '_', 'F', 'S', 'I', 'N', 0,
  /* 7800 */ 'C', 'F', 'I', '_', 'I', 'N', 'S', 'T', 'R', 'U', 'C', 'T', 'I', 'O', 'N', 0,
  /* 7816 */ 'X', 'S', 'C', 'V', 'S', 'P', 'D', 'P', 'N', 0,
  /* 7826 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'P', 'N', 0,
  /* 7836 */ 'D', 'A', 'R', 'N', 0,
  /* 7841 */ 'M', 'F', 'F', 'S', 'C', 'R', 'N', 0,
  /* 7849 */ 'M', 'F', 'F', 'S', 'C', 'D', 'R', 'N', 0,
  /* 7858 */ 'A', 'T', 'T', 'N', 0,
  /* 7863 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 0,
  /* 7880 */ 'A', 'D', 'D', '4', 'O', 0,
  /* 7886 */ 'A', 'D', 'D', 'C', '8', 'O', 0,
  /* 7893 */ 'S', 'U', 'B', 'F', 'C', '8', 'O', 0,
  /* 7901 */ 'A', 'D', 'D', '8', 'O', 0,
  /* 7907 */ 'A', 'D', 'D', 'E', '8', 'O', 0,
  /* 7914 */ 'S', 'U', 'B', 'F', 'E', '8', 'O', 0,
  /* 7922 */ 'A', 'D', 'D', 'M', 'E', '8', 'O', 0,
  /* 7930 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 'O', 0,
  /* 7939 */ 'A', 'D', 'D', 'Z', 'E', '8', 'O', 0,
  /* 7947 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 'O', 0,
  /* 7956 */ 'S', 'U', 'B', 'F', '8', 'O', 0,
  /* 7963 */ 'N', 'E', 'G', '8', 'O', 0,
  /* 7969 */ 'G', '_', 'S', 'S', 'U', 'B', 'O', 0,
  /* 7977 */ 'G', '_', 'U', 'S', 'U', 'B', 'O', 0,
  /* 7985 */ 'A', 'D', 'D', 'C', 'O', 0,
  /* 7991 */ 'S', 'U', 'B', 'F', 'C', 'O', 0,
  /* 7998 */ 'G', '_', 'S', 'A', 'D', 'D', 'O', 0,
  /* 8006 */ 'G', '_', 'U', 'A', 'D', 'D', 'O', 0,
  /* 8014 */ 'M', 'U', 'L', 'L', 'D', 'O', 0,
  /* 8021 */ 'D', 'I', 'V', 'D', 'O', 0,
  /* 8027 */ 'A', 'D', 'D', 'E', 'O', 0,
  /* 8033 */ 'D', 'I', 'V', 'D', 'E', 'O', 0,
  /* 8040 */ 'S', 'U', 'B', 'F', 'E', 'O', 0,
  /* 8047 */ 'A', 'D', 'D', 'M', 'E', 'O', 0,
  /* 8054 */ 'S', 'U', 'B', 'F', 'M', 'E', 'O', 0,
  /* 8062 */ 'D', 'I', 'V', 'W', 'E', 'O', 0,
  /* 8069 */ 'A', 'D', 'D', 'Z', 'E', 'O', 0,
  /* 8076 */ 'S', 'U', 'B', 'F', 'Z', 'E', 'O', 0,
  /* 8084 */ 'S', 'U', 'B', 'F', 'O', 0,
  /* 8090 */ 'N', 'E', 'G', 'O', 0,
  /* 8095 */ 'E', 'V', 'S', 'T', 'W', 'H', 'O', 0,
  /* 8103 */ 'E', 'n', 'f', 'o', 'r', 'c', 'e', 'I', 'E', 'I', 'O', 0,
  /* 8115 */ 'E', 'V', 'M', 'E', 'R', 'G', 'E', 'L', 'O', 0,
  /* 8125 */ 'E', 'V', 'M', 'E', 'R', 'G', 'E', 'H', 'I', 'L', 'O', 0,
  /* 8137 */ 'V', 'S', 'L', 'O', 0,
  /* 8142 */ 'G', '_', 'S', 'M', 'U', 'L', 'O', 0,
  /* 8150 */ 'G', '_', 'U', 'M', 'U', 'L', 'O', 0,
  /* 8158 */ 'X', 'S', 'C', 'V', 'Q', 'P', 'D', 'P', 'O', 0,
  /* 8168 */ 'X', 'S', 'N', 'M', 'S', 'U', 'B', 'Q', 'P', 'O', 0,
  /* 8179 */ 'X', 'S', 'M', 'S', 'U', 'B', 'Q', 'P', 'O', 0,
  /* 8189 */ 'X', 'S', 'S', 'U', 'B', 'Q', 'P', 'O', 0,
  /* 8198 */ 'X', 'S', 'N', 'M', 'A', 'D', 'D', 'Q', 'P', 'O', 0,
  /* 8209 */ 'X', 'S', 'M', 'A', 'D', 'D', 'Q', 'P', 'O', 0,
  /* 8219 */ 'X', 'S', 'A', 'D', 'D', 'Q', 'P', 'O', 0,
  /* 8228 */ 'X', 'S', 'M', 'U', 'L', 'Q', 'P', 'O', 0,
  /* 8237 */ 'X', 'S', 'S', 'Q', 'R', 'T', 'Q', 'P', 'O', 0,
  /* 8247 */ 'X', 'S', 'D', 'I', 'V', 'Q', 'P', 'O', 0,
  /* 8256 */ 'V', 'S', 'R', 'O', 0,
  /* 8261 */ 'D', 'I', 'V', 'D', 'U', 'O', 0,
  /* 8268 */ 'D', 'I', 'V', 'D', 'E', 'U', 'O', 0,
  /* 8276 */ 'D', 'I', 'V', 'W', 'E', 'U', 'O', 0,
  /* 8284 */ 'D', 'I', 'V', 'W', 'U', 'O', 0,
  /* 8291 */ 'M', 'U', 'L', 'L', 'W', 'O', 0,
  /* 8298 */ 'D', 'I', 'V', 'W', 'O', 0,
  /* 8304 */ 'E', 'V', 'S', 'T', 'W', 'W', 'O', 0,
  /* 8312 */ 'S', 'T', 'A', 'C', 'K', 'M', 'A', 'P', 0,
  /* 8321 */ 'N', 'A', 'P', 0,
  /* 8325 */ 'T', 'R', 'A', 'P', 0,
  /* 8330 */ 'G', '_', 'B', 'S', 'W', 'A', 'P', 0,
  /* 8338 */ 'X', 'S', 'N', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 8349 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 8360 */ 'X', 'S', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 8370 */ 'X', 'V', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 8380 */ 'X', 'S', 'N', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 8391 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 8402 */ 'X', 'S', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 8412 */ 'X', 'V', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 8422 */ 'X', 'S', 'S', 'U', 'B', 'D', 'P', 0,
  /* 8430 */ 'X', 'V', 'S', 'U', 'B', 'D', 'P', 0,
  /* 8438 */ 'X', 'S', 'T', 'S', 'T', 'D', 'C', 'D', 'P', 0,
  /* 8448 */ 'X', 'V', 'T', 'S', 'T', 'D', 'C', 'D', 'P', 0,
  /* 8458 */ 'X', 'S', 'M', 'I', 'N', 'C', 'D', 'P', 0,
  /* 8467 */ 'X', 'S', 'M', 'A', 'X', 'C', 'D', 'P', 0,
  /* 8476 */ 'X', 'S', 'A', 'D', 'D', 'D', 'P', 0,
  /* 8484 */ 'X', 'V', 'A', 'D', 'D', 'D', 'P', 0,
  /* 8492 */ 'X', 'S', 'C', 'V', 'S', 'X', 'D', 'D', 'P', 0,
  /* 8502 */ 'X', 'V', 'C', 'V', 'S', 'X', 'D', 'D', 'P', 0,
  /* 8512 */ 'X', 'S', 'C', 'V', 'U', 'X', 'D', 'D', 'P', 0,
  /* 8522 */ 'X', 'V', 'C', 'V', 'U', 'X', 'D', 'D', 'P', 0,
  /* 8532 */ 'X', 'S', 'C', 'M', 'P', 'G', 'E', 'D', 'P', 0,
  /* 8542 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'D', 'P', 0,
  /* 8552 */ 'X', 'S', 'R', 'E', 'D', 'P', 0,
  /* 8559 */ 'X', 'V', 'R', 'E', 'D', 'P', 0,
  /* 8566 */ 'X', 'S', 'R', 'S', 'Q', 'R', 'T', 'E', 'D', 'P', 0,
  /* 8577 */ 'X', 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'D', 'P', 0,
  /* 8588 */ 'X', 'S', 'N', 'E', 'G', 'D', 'P', 0,
  /* 8596 */ 'X', 'V', 'N', 'E', 'G', 'D', 'P', 0,
  /* 8604 */ 'X', 'S', 'X', 'S', 'I', 'G', 'D', 'P', 0,
  /* 8613 */ 'X', 'V', 'X', 'S', 'I', 'G', 'D', 'P', 0,
  /* 8622 */ 'X', 'S', 'M', 'I', 'N', 'J', 'D', 'P', 0,
  /* 8631 */ 'X', 'S', 'M', 'A', 'X', 'J', 'D', 'P', 0,
  /* 8640 */ 'X', 'S', 'M', 'U', 'L', 'D', 'P', 0,
  /* 8648 */ 'X', 'V', 'M', 'U', 'L', 'D', 'P', 0,
  /* 8656 */ 'X', 'S', 'N', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 8667 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 8678 */ 'X', 'S', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 8688 */ 'X', 'V', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 8698 */ 'X', 'S', 'N', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 8709 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 8720 */ 'X', 'S', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 8730 */ 'X', 'V', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 8740 */ 'X', 'S', 'C', 'P', 'S', 'G', 'N', 'D', 'P', 0,
  /* 8750 */ 'X', 'V', 'C', 'P', 'S', 'G', 'N', 'D', 'P', 0,
  /* 8760 */ 'X', 'S', 'M', 'I', 'N', 'D', 'P', 0,
  /* 8768 */ 'X', 'V', 'M', 'I', 'N', 'D', 'P', 0,
  /* 8776 */ 'X', 'S', 'C', 'M', 'P', 'O', 'D', 'P', 0,
  /* 8785 */ 'X', 'S', 'C', 'V', 'H', 'P', 'D', 'P', 0,
  /* 8794 */ 'X', 'S', 'C', 'V', 'Q', 'P', 'D', 'P', 0,
  /* 8803 */ 'X', 'S', 'C', 'V', 'S', 'P', 'D', 'P', 0,
  /* 8812 */ 'X', 'V', 'C', 'V', 'S', 'P', 'D', 'P', 0,
  /* 8821 */ 'X', 'S', 'I', 'E', 'X', 'P', 'D', 'P', 0,
  /* 8830 */ 'X', 'V', 'I', 'E', 'X', 'P', 'D', 'P', 0,
  /* 8839 */ 'X', 'S', 'C', 'M', 'P', 'E', 'X', 'P', 'D', 'P', 0,
  /* 8850 */ 'X', 'S', 'X', 'E', 'X', 'P', 'D', 'P', 0,
  /* 8859 */ 'X', 'V', 'X', 'E', 'X', 'P', 'D', 'P', 0,
  /* 8868 */ 'X', 'S', 'C', 'M', 'P', 'E', 'Q', 'D', 'P', 0,
  /* 8878 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'D', 'P', 0,
  /* 8888 */ 'X', 'S', 'N', 'A', 'B', 'S', 'D', 'P', 0,
  /* 8897 */ 'X', 'V', 'N', 'A', 'B', 'S', 'D', 'P', 0,
  /* 8906 */ 'X', 'S', 'A', 'B', 'S', 'D', 'P', 0,
  /* 8914 */ 'X', 'V', 'A', 'B', 'S', 'D', 'P', 0,
  /* 8922 */ 'X', 'S', 'C', 'M', 'P', 'G', 'T', 'D', 'P', 0,
  /* 8932 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'D', 'P', 0,
  /* 8942 */ 'X', 'S', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 8951 */ 'X', 'S', 'T', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 8961 */ 'X', 'V', 'T', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 8971 */ 'X', 'V', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 8980 */ 'X', 'S', 'C', 'M', 'P', 'U', 'D', 'P', 0,
  /* 8989 */ 'X', 'S', 'D', 'I', 'V', 'D', 'P', 0,
  /* 8997 */ 'X', 'S', 'T', 'D', 'I', 'V', 'D', 'P', 0,
  /* 9006 */ 'X', 'V', 'T', 'D', 'I', 'V', 'D', 'P', 0,
  /* 9015 */ 'X', 'V', 'D', 'I', 'V', 'D', 'P', 0,
  /* 9023 */ 'X', 'V', 'C', 'V', 'S', 'X', 'W', 'D', 'P', 0,
  /* 9033 */ 'X', 'V', 'C', 'V', 'U', 'X', 'W', 'D', 'P', 0,
  /* 9043 */ 'X', 'S', 'M', 'A', 'X', 'D', 'P', 0,
  /* 9051 */ 'X', 'V', 'M', 'A', 'X', 'D', 'P', 0,
  /* 9059 */ 'C', 'T', 'R', 'L', '_', 'D', 'E', 'P', 0,
  /* 9068 */ 'D', 'C', 'B', 'F', 'E', 'P', 0,
  /* 9075 */ 'G', '_', 'G', 'E', 'P', 0,
  /* 9081 */ 'I', 'C', 'B', 'I', 'E', 'P', 0,
  /* 9088 */ 'D', 'C', 'B', 'Z', 'L', 'E', 'P', 0,
  /* 9096 */ 'D', 'C', 'B', 'T', 'E', 'P', 0,
  /* 9103 */ 'D', 'C', 'B', 'S', 'T', 'E', 'P', 0,
  /* 9111 */ 'D', 'C', 'B', 'T', 'S', 'T', 'E', 'P', 0,
  /* 9120 */ 'D', 'C', 'B', 'Z', 'E', 'P', 0,
  /* 9127 */ 'V', 'C', 'M', 'P', 'B', 'F', 'P', 0,
  /* 9135 */ 'V', 'N', 'M', 'S', 'U', 'B', 'F', 'P', 0,
  /* 9144 */ 'V', 'S', 'U', 'B', 'F', 'P', 0,
  /* 9151 */ 'V', 'M', 'A', 'D', 'D', 'F', 'P', 0,
  /* 9159 */ 'V', 'A', 'D', 'D', 'F', 'P', 0,
  /* 9166 */ 'V', 'L', 'O', 'G', 'E', 'F', 'P', 0,
  /* 9174 */ 'V', 'C', 'M', 'P', 'G', 'E', 'F', 'P', 0,
  /* 9183 */ 'V', 'R', 'E', 'F', 'P', 0,
  /* 9189 */ 'V', 'E', 'X', 'P', 'T', 'E', 'F', 'P', 0,
  /* 9198 */ 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'F', 'P', 0,
  /* 9208 */ 'V', 'M', 'I', 'N', 'F', 'P', 0,
  /* 9215 */ 'G', '_', 'S', 'I', 'T', 'O', 'F', 'P', 0,
  /* 9224 */ 'G', '_', 'U', 'I', 'T', 'O', 'F', 'P', 0,
  /* 9233 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'F', 'P', 0,
  /* 9242 */ 'V', 'C', 'M', 'P', 'G', 'T', 'F', 'P', 0,
  /* 9251 */ 'V', 'M', 'A', 'X', 'F', 'P', 0,
  /* 9258 */ 'X', 'S', 'C', 'V', 'D', 'P', 'H', 'P', 0,
  /* 9267 */ 'X', 'V', 'C', 'V', 'S', 'P', 'H', 'P', 0,
  /* 9276 */ 'V', 'R', 'F', 'I', 'P', 0,
  /* 9282 */ 'X', 'S', 'R', 'D', 'P', 'I', 'P', 0,
  /* 9290 */ 'X', 'V', 'R', 'D', 'P', 'I', 'P', 0,
  /* 9298 */ 'X', 'V', 'R', 'S', 'P', 'I', 'P', 0,
  /* 9306 */ 'Q', 'V', 'F', 'R', 'I', 'P', 0,
  /* 9313 */ 'D', 'C', 'B', 'F', 'L', 'P', 0,
  /* 9320 */ 'G', '_', 'F', 'C', 'M', 'P', 0,
  /* 9327 */ 'G', '_', 'I', 'C', 'M', 'P', 0,
  /* 9334 */ 'B', 'L', 'A', '8', '_', 'N', 'O', 'P', 0,
  /* 9343 */ 'B', 'L', '8', '_', 'N', 'O', 'P', 0,
  /* 9351 */ 'B', 'L', '_', 'N', 'O', 'P', 0,
  /* 9358 */ 'G', '_', 'C', 'T', 'P', 'O', 'P', 0,
  /* 9366 */ 'S', 'T', 'O', 'P', 0,
  /* 9371 */ 'P', 'A', 'T', 'C', 'H', 'A', 'B', 'L', 'E', '_', 'O', 'P', 0,
  /* 9384 */ 'F', 'A', 'U', 'L', 'T', 'I', 'N', 'G', '_', 'O', 'P', 0,
  /* 9396 */ 'X', 'S', 'N', 'M', 'S', 'U', 'B', 'Q', 'P', 0,
  /* 9406 */ 'X', 'S', 'M', 'S', 'U', 'B', 'Q', 'P', 0,
  /* 9415 */ 'X', 'S', 'S', 'U', 'B', 'Q', 'P', 0,
  /* 9423 */ 'X', 'S', 'T', 'S', 'T', 'D', 'C', 'Q', 'P', 0,
  /* 9433 */ 'X', 'S', 'N', 'M', 'A', 'D', 'D', 'Q', 'P', 0,
  /* 9443 */ 'X', 'S', 'M', 'A', 'D', 'D', 'Q', 'P', 0,
  /* 9452 */ 'X', 'S', 'A', 'D', 'D', 'Q', 'P', 0,
  /* 9460 */ 'X', 'S', 'C', 'V', 'S', 'D', 'Q', 'P', 0,
  /* 9469 */ 'X', 'S', 'C', 'V', 'U', 'D', 'Q', 'P', 0,
  /* 9478 */ 'X', 'S', 'N', 'E', 'G', 'Q', 'P', 0,
  /* 9486 */ 'X', 'S', 'X', 'S', 'I', 'G', 'Q', 'P', 0,
  /* 9495 */ 'X', 'S', 'M', 'U', 'L', 'Q', 'P', 0,
  /* 9503 */ 'X', 'S', 'C', 'P', 'S', 'G', 'N', 'Q', 'P', 0,
  /* 9513 */ 'X', 'S', 'C', 'M', 'P', 'O', 'Q', 'P', 0,
  /* 9522 */ 'X', 'S', 'C', 'V', 'D', 'P', 'Q', 'P', 0,
  /* 9531 */ 'X', 'S', 'I', 'E', 'X', 'P', 'Q', 'P', 0,
  /* 9540 */ 'X', 'S', 'C', 'M', 'P', 'E', 'X', 'P', 'Q', 'P', 0,
  /* 9551 */ 'X', 'S', 'X', 'E', 'X', 'P', 'Q', 'P', 0,
  /* 9560 */ 'X', 'S', 'N', 'A', 'B', 'S', 'Q', 'P', 0,
  /* 9569 */ 'X', 'S', 'A', 'B', 'S', 'Q', 'P', 0,
  /* 9577 */ 'X', 'S', 'S', 'Q', 'R', 'T', 'Q', 'P', 0,
  /* 9586 */ 'X', 'S', 'C', 'M', 'P', 'U', 'Q', 'P', 0,
  /* 9595 */ 'X', 'S', 'D', 'I', 'V', 'Q', 'P', 0,
  /* 9603 */ 'X', 'S', 'N', 'M', 'S', 'U', 'B', 'A', 'S', 'P', 0,
  /* 9614 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'A', 'S', 'P', 0,
  /* 9625 */ 'X', 'S', 'M', 'S', 'U', 'B', 'A', 'S', 'P', 0,
  /* 9635 */ 'X', 'V', 'M', 'S', 'U', 'B', 'A', 'S', 'P', 0,
  /* 9645 */ 'X', 'S', 'N', 'M', 'A', 'D', 'D', 'A', 'S', 'P', 0,
  /* 9656 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'A', 'S', 'P', 0,
  /* 9667 */ 'X', 'S', 'M', 'A', 'D', 'D', 'A', 'S', 'P', 0,
  /* 9677 */ 'X', 'V', 'M', 'A', 'D', 'D', 'A', 'S', 'P', 0,
  /* 9687 */ 'X', 'S', 'S', 'U', 'B', 'S', 'P', 0,
  /* 9695 */ 'X', 'V', 'S', 'U', 'B', 'S', 'P', 0,
  /* 9703 */ 'X', 'S', 'T', 'S', 'T', 'D', 'C', 'S', 'P', 0,
  /* 9713 */ 'X', 'V', 'T', 'S', 'T', 'D', 'C', 'S', 'P', 0,
  /* 9723 */ 'X', 'S', 'A', 'D', 'D', 'S', 'P', 0,
  /* 9731 */ 'X', 'V', 'A', 'D', 'D', 'S', 'P', 0,
  /* 9739 */ 'X', 'S', 'C', 'V', 'S', 'X', 'D', 'S', 'P', 0,
  /* 9749 */ 'X', 'V', 'C', 'V', 'S', 'X', 'D', 'S', 'P', 0,
  /* 9759 */ 'X', 'S', 'C', 'V', 'U', 'X', 'D', 'S', 'P', 0,
  /* 9769 */ 'X', 'V', 'C', 'V', 'U', 'X', 'D', 'S', 'P', 0,
  /* 9779 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'S', 'P', 0,
  /* 9789 */ 'X', 'S', 'R', 'E', 'S', 'P', 0,
  /* 9796 */ 'X', 'V', 'R', 'E', 'S', 'P', 0,
  /* 9803 */ 'X', 'S', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 'P', 0,
  /* 9814 */ 'X', 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 'P', 0,
  /* 9825 */ 'X', 'V', 'N', 'E', 'G', 'S', 'P', 0,
  /* 9833 */ 'X', 'V', 'X', 'S', 'I', 'G', 'S', 'P', 0,
  /* 9842 */ 'X', 'S', 'M', 'U', 'L', 'S', 'P', 0,
  /* 9850 */ 'X', 'V', 'M', 'U', 'L', 'S', 'P', 0,
  /* 9858 */ 'X', 'S', 'N', 'M', 'S', 'U', 'B', 'M', 'S', 'P', 0,
  /* 9869 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'M', 'S', 'P', 0,
  /* 9880 */ 'X', 'S', 'M', 'S', 'U', 'B', 'M', 'S', 'P', 0,
  /* 9890 */ 'X', 'V', 'M', 'S', 'U', 'B', 'M', 'S', 'P', 0,
  /* 9900 */ 'X', 'S', 'N', 'M', 'A', 'D', 'D', 'M', 'S', 'P', 0,
  /* 9911 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'M', 'S', 'P', 0,
  /* 9922 */ 'X', 'S', 'M', 'A', 'D', 'D', 'M', 'S', 'P', 0,
  /* 9932 */ 'X', 'V', 'M', 'A', 'D', 'D', 'M', 'S', 'P', 0,
  /* 9942 */ 'X', 'V', 'C', 'P', 'S', 'G', 'N', 'S', 'P', 0,
  /* 9952 */ 'X', 'V', 'M', 'I', 'N', 'S', 'P', 0,
  /* 9960 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'P', 0,
  /* 9969 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'P', 0,
  /* 9978 */ 'X', 'V', 'C', 'V', 'H', 'P', 'S', 'P', 0,
  /* 9987 */ 'X', 'V', 'I', 'E', 'X', 'P', 'S', 'P', 0,
  /* 9996 */ 'X', 'V', 'X', 'E', 'X', 'P', 'S', 'P', 0,
  /* 10005 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'S', 'P', 0,
  /* 10015 */ 'Q', 'V', 'F', 'R', 'S', 'P', 0,
  /* 10022 */ 'X', 'S', 'R', 'S', 'P', 0,
  /* 10028 */ 'X', 'V', 'N', 'A', 'B', 'S', 'S', 'P', 0,
  /* 10037 */ 'X', 'V', 'A', 'B', 'S', 'S', 'P', 0,
  /* 10045 */ 'L', 'X', 'S', 'S', 'P', 0,
  /* 10051 */ 'S', 'T', 'X', 'S', 'S', 'P', 0,
  /* 10058 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'P', 0,
  /* 10068 */ 'X', 'S', 'S', 'Q', 'R', 'T', 'S', 'P', 0,
  /* 10077 */ 'X', 'V', 'T', 'S', 'Q', 'R', 'T', 'S', 'P', 0,
  /* 10087 */ 'X', 'V', 'S', 'Q', 'R', 'T', 'S', 'P', 0,
  /* 10096 */ 'X', 'S', 'D', 'I', 'V', 'S', 'P', 0,
  /* 10104 */ 'X', 'V', 'T', 'D', 'I', 'V', 'S', 'P', 0,
  /* 10113 */ 'X', 'V', 'D', 'I', 'V', 'S', 'P', 0,
  /* 10121 */ 'X', 'V', 'C', 'V', 'S', 'X', 'W', 'S', 'P', 0,
  /* 10131 */ 'X', 'V', 'C', 'V', 'U', 'X', 'W', 'S', 'P', 0,
  /* 10141 */ 'X', 'V', 'M', 'A', 'X', 'S', 'P', 0,
  /* 10149 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 0,
  /* 10164 */ 'G', '_', 'F', 'E', 'X', 'P', 0,
  /* 10171 */ 'X', 'S', 'R', 'Q', 'P', 'X', 'P', 0,
  /* 10179 */ 'V', 'P', 'R', 'T', 'Y', 'B', 'Q', 0,
  /* 10187 */ 'E', 'F', 'D', 'C', 'M', 'P', 'E', 'Q', 0,
  /* 10196 */ 'Q', 'V', 'F', 'C', 'M', 'P', 'E', 'Q', 0,
  /* 10205 */ 'E', 'F', 'S', 'C', 'M', 'P', 'E', 'Q', 0,
  /* 10214 */ 'E', 'V', 'F', 'S', 'C', 'M', 'P', 'E', 'Q', 0,
  /* 10224 */ 'E', 'V', 'C', 'M', 'P', 'E', 'Q', 0,
  /* 10232 */ 'E', 'F', 'D', 'T', 'S', 'T', 'E', 'Q', 0,
  /* 10241 */ 'E', 'F', 'S', 'T', 'S', 'T', 'E', 'Q', 0,
  /* 10250 */ 'E', 'V', 'F', 'S', 'T', 'S', 'T', 'E', 'Q', 0,
  /* 10260 */ 'I', 'C', 'B', 'L', 'Q', 0,
  /* 10266 */ 'V', 'B', 'P', 'E', 'R', 'M', 'Q', 0,
  /* 10274 */ 'X', 'X', 'B', 'R', 'Q', 0,
  /* 10280 */ 'V', 'M', 'U', 'L', '1', '0', 'U', 'Q', 0,
  /* 10289 */ 'V', 'M', 'U', 'L', '1', '0', 'C', 'U', 'Q', 0,
  /* 10299 */ 'V', 'S', 'U', 'B', 'C', 'U', 'Q', 0,
  /* 10307 */ 'V', 'A', 'D', 'D', 'C', 'U', 'Q', 0,
  /* 10315 */ 'V', 'M', 'U', 'L', '1', '0', 'E', 'C', 'U', 'Q', 0,
  /* 10326 */ 'V', 'S', 'U', 'B', 'E', 'C', 'U', 'Q', 0,
  /* 10335 */ 'V', 'A', 'D', 'D', 'E', 'C', 'U', 'Q', 0,
  /* 10344 */ 'V', 'M', 'U', 'L', '1', '0', 'E', 'U', 'Q', 0,
  /* 10354 */ 'M', 'B', 'A', 'R', 0,
  /* 10359 */ 'U', 'p', 'd', 'a', 't', 'e', 'G', 'B', 'R', 0,
  /* 10369 */ 'G', '_', 'B', 'R', 0,
  /* 10374 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', '_', 'B', 'R', 0,
  /* 10387 */ 'M', 'F', 'D', 'C', 'R', 0,
  /* 10393 */ 'R', 'L', 'D', 'C', 'R', 0,
  /* 10399 */ 'M', 'T', 'D', 'C', 'R', 0,
  /* 10405 */ 'M', 'F', 'C', 'R', 0,
  /* 10410 */ 'R', 'L', 'D', 'I', 'C', 'R', 0,
  /* 10417 */ 'M', 'F', 'V', 'S', 'C', 'R', 0,
  /* 10424 */ 'M', 'T', 'V', 'S', 'C', 'R', 0,
  /* 10431 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 10442 */ 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 10451 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 10466 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 10481 */ 'G', '_', 'B', 'L', 'O', 'C', 'K', '_', 'A', 'D', 'D', 'R', 0,
  /* 10494 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 10507 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 10518 */ 'V', 'N', 'C', 'I', 'P', 'H', 'E', 'R', 0,
  /* 10527 */ 'V', 'C', 'I', 'P', 'H', 'E', 'R', 0,
  /* 10535 */ 'P', 'A', 'T', 'C', 'H', 'A', 'B', 'L', 'E', '_', 'F', 'U', 'N', 'C', 'T', 'I', 'O', 'N', '_', 'E', 'N', 'T', 'E', 'R', 0,
  /* 10560 */ 'G', '_', 'A', 'S', 'H', 'R', 0,
  /* 10567 */ 'G', '_', 'L', 'S', 'H', 'R', 0,
  /* 10574 */ 'B', 'L', 'R', 0,
  /* 10578 */ 'g', 'B', 'C', 'L', 'R', 0,
  /* 10584 */ 'B', 'C', 'C', 'L', 'R', 0,
  /* 10590 */ 'M', 'F', 'L', 'R', 0,
  /* 10595 */ 'M', 'T', 'L', 'R', 0,
  /* 10600 */ 'B', 'D', 'Z', 'L', 'R', 0,
  /* 10606 */ 'B', 'D', 'N', 'Z', 'L', 'R', 0,
  /* 10613 */ 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 10624 */ 'M', 'o', 'v', 'e', 'G', 'O', 'T', 't', 'o', 'L', 'R', 0,
  /* 10636 */ 'Q', 'V', 'F', 'M', 'R', 0,
  /* 10642 */ 'M', 'F', 'P', 'M', 'R', 0,
  /* 10648 */ 'M', 'T', 'P', 'M', 'R', 0,
  /* 10654 */ 'V', 'P', 'E', 'R', 'M', 'R', 0,
  /* 10661 */ 'X', 'X', 'P', 'E', 'R', 'M', 'R', 0,
  /* 10669 */ 'X', 'X', 'L', 'O', 'R', 0,
  /* 10675 */ 'X', 'X', 'L', 'N', 'O', 'R', 0,
  /* 10682 */ 'C', 'R', 'N', 'O', 'R', 0,
  /* 10688 */ 'E', 'V', 'N', 'O', 'R', 0,
  /* 10694 */ 'G', '_', 'F', 'F', 'L', 'O', 'O', 'R', 0,
  /* 10703 */ 'C', 'R', 'O', 'R', 0,
  /* 10708 */ 'G', '_', 'B', 'U', 'I', 'L', 'D', '_', 'V', 'E', 'C', 'T', 'O', 'R', 0,
  /* 10723 */ 'G', '_', 'S', 'H', 'U', 'F', 'F', 'L', 'E', '_', 'V', 'E', 'C', 'T', 'O', 'R', 0,
  /* 10740 */ 'E', 'V', 'O', 'R', 0,
  /* 10745 */ 'X', 'X', 'L', 'X', 'O', 'R', 0,
  /* 10752 */ 'V', 'P', 'E', 'R', 'M', 'X', 'O', 'R', 0,
  /* 10761 */ 'C', 'R', 'X', 'O', 'R', 0,
  /* 10767 */ 'E', 'V', 'X', 'O', 'R', 0,
  /* 10773 */ 'G', '_', 'X', 'O', 'R', 0,
  /* 10779 */ 'G', '_', 'A', 'T', 'O', 'M', 'I', 'C', 'R', 'M', 'W', '_', 'X', 'O', 'R', 0,
  /* 10795 */ 'G', '_', 'O', 'R', 0,
  /* 10800 */ 'G', '_', 'A', 'T', 'O', 'M', 'I', 'C', 'R', 'M', 'W', '_', 'O', 'R', 0,
  /* 10815 */ 'M', 'F', 'S', 'P', 'R', 0,
  /* 10821 */ 'M', 'T', 'S', 'P', 'R', 0,
  /* 10827 */ 'M', 'F', 'S', 'R', 0,
  /* 10832 */ 'M', 'F', 'M', 'S', 'R', 0,
  /* 10838 */ 'M', 'T', 'M', 'S', 'R', 0,
  /* 10844 */ 'M', 'T', 'S', 'R', 0,
  /* 10849 */ 'L', 'V', 'S', 'R', 0,
  /* 10854 */ 'T', 'A', 'I', 'L', 'B', 'C', 'T', 'R', 0,
  /* 10863 */ 'g', 'B', 'C', 'C', 'T', 'R', 0,
  /* 10870 */ 'B', 'C', 'C', 'C', 'T', 'R', 0,
  /* 10877 */ 'M', 'F', 'C', 'T', 'R', 0,
  /* 10883 */ 'M', 'T', 'C', 'T', 'R', 0,
  /* 10889 */ 'G', '_', 'I', 'N', 'T', 'T', 'O', 'P', 'T', 'R', 0,
  /* 10900 */ 'E', 'F', 'D', 'A', 'B', 'S', 0,
  /* 10907 */ 'Q', 'V', 'F', 'A', 'B', 'S', 0,
  /* 10914 */ 'G', '_', 'F', 'A', 'B', 'S', 0,
  /* 10921 */ 'E', 'F', 'D', 'N', 'A', 'B', 'S', 0,
  /* 10929 */ 'Q', 'V', 'F', 'N', 'A', 'B', 'S', 0,
  /* 10937 */ 'E', 'F', 'S', 'N', 'A', 'B', 'S', 0,
  /* 10945 */ 'E', 'V', 'F', 'S', 'N', 'A', 'B', 'S', 0,
  /* 10954 */ 'E', 'F', 'S', 'A', 'B', 'S', 0,
  /* 10961 */ 'E', 'V', 'F', 'S', 'A', 'B', 'S', 0,
  /* 10969 */ 'E', 'V', 'A', 'B', 'S', 0,
  /* 10975 */ 'V', 'S', 'U', 'M', '4', 'S', 'B', 'S', 0,
  /* 10984 */ 'V', 'S', 'U', 'B', 'S', 'B', 'S', 0,
  /* 10992 */ 'V', 'A', 'D', 'D', 'S', 'B', 'S', 0,
  /* 11000 */ 'V', 'S', 'U', 'M', '4', 'U', 'B', 'S', 0,
  /* 11009 */ 'V', 'S', 'U', 'B', 'U', 'B', 'S', 0,
  /* 11017 */ 'V', 'A', 'D', 'D', 'U', 'B', 'S', 0,
  /* 11025 */ 'Q', 'V', 'F', 'S', 'U', 'B', 'S', 0,
  /* 11033 */ 'Q', 'V', 'F', 'M', 'S', 'U', 'B', 'S', 0,
  /* 11042 */ 'Q', 'V', 'F', 'N', 'M', 'S', 'U', 'B', 'S', 0,
  /* 11052 */ 'Q', 'V', 'F', 'A', 'D', 'D', 'S', 0,
  /* 11060 */ 'Q', 'V', 'F', 'M', 'A', 'D', 'D', 'S', 0,
  /* 11069 */ 'Q', 'V', 'F', 'N', 'M', 'A', 'D', 'D', 'S', 0,
  /* 11079 */ 'Q', 'V', 'F', 'X', 'X', 'C', 'P', 'N', 'M', 'A', 'D', 'D', 'S', 0,
  /* 11093 */ 'Q', 'V', 'F', 'X', 'X', 'N', 'P', 'M', 'A', 'D', 'D', 'S', 0,
  /* 11106 */ 'Q', 'V', 'F', 'X', 'M', 'A', 'D', 'D', 'S', 0,
  /* 11116 */ 'Q', 'V', 'F', 'X', 'X', 'M', 'A', 'D', 'D', 'S', 0,
  /* 11127 */ 'Q', 'V', 'F', 'C', 'F', 'I', 'D', 'S', 0,
  /* 11136 */ 'D', 'C', 'B', 'T', 'D', 'S', 0,
  /* 11143 */ 'D', 'C', 'B', 'T', 'S', 'T', 'D', 'S', 0,
  /* 11152 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'X', 'D', 'S', 0,
  /* 11163 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'X', 'D', 'S', 0,
  /* 11174 */ 'X', 'V', 'C', 'V', 'S', 'P', 'S', 'X', 'D', 'S', 0,
  /* 11185 */ 'X', 'S', 'C', 'V', 'D', 'P', 'U', 'X', 'D', 'S', 0,
  /* 11196 */ 'X', 'V', 'C', 'V', 'D', 'P', 'U', 'X', 'D', 'S', 0,
  /* 11207 */ 'X', 'V', 'C', 'V', 'S', 'P', 'U', 'X', 'D', 'S', 0,
  /* 11218 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 0,
  /* 11231 */ 'Q', 'V', 'F', 'R', 'E', 'S', 0,
  /* 11238 */ 'Q', 'V', 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 0,
  /* 11249 */ 'G', '_', 'U', 'N', 'M', 'E', 'R', 'G', 'E', '_', 'V', 'A', 'L', 'U', 'E', 'S', 0,
  /* 11266 */ 'G', '_', 'M', 'E', 'R', 'G', 'E', '_', 'V', 'A', 'L', 'U', 'E', 'S', 0,
  /* 11281 */ 'E', 'F', 'D', 'C', 'F', 'S', 0,
  /* 11288 */ 'M', 'F', 'F', 'S', 0,
  /* 11293 */ 'L', 'F', 'S', 0,
  /* 11297 */ 'M', 'C', 'R', 'F', 'S', 0,
  /* 11303 */ 'S', 'T', 'F', 'S', 0,
  /* 11308 */ 'F', 'N', 'E', 'G', 'S', 0,
  /* 11314 */ 'V', 'S', 'U', 'M', '4', 'S', 'H', 'S', 0,
  /* 11323 */ 'V', 'S', 'U', 'B', 'S', 'H', 'S', 0,
  /* 11331 */ 'V', 'M', 'H', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 11341 */ 'V', 'M', 'H', 'R', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 11352 */ 'V', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 11360 */ 'V', 'M', 'S', 'U', 'M', 'S', 'H', 'S', 0,
  /* 11369 */ 'V', 'S', 'U', 'B', 'U', 'H', 'S', 0,
  /* 11377 */ 'V', 'A', 'D', 'D', 'U', 'H', 'S', 0,
  /* 11385 */ 'V', 'M', 'S', 'U', 'M', 'U', 'H', 'S', 0,
  /* 11394 */ 'S', 'U', 'B', 'I', 'S', 0,
  /* 11400 */ 'S', 'U', 'B', 'P', 'C', 'I', 'S', 0,
  /* 11408 */ 'A', 'D', 'D', 'P', 'C', 'I', 'S', 0,
  /* 11416 */ 'A', 'D', 'D', 'I', 'S', 0,
  /* 11422 */ 'L', 'I', 'S', 0,
  /* 11426 */ 'X', 'O', 'R', 'I', 'S', 0,
  /* 11432 */ 'E', 'V', 'S', 'R', 'W', 'I', 'S', 0,
  /* 11440 */ 'F', 'S', 'E', 'L', 'S', 0,
  /* 11446 */ 'A', 'D', 'D', '4', 'T', 'L', 'S', 0,
  /* 11454 */ 'A', 'D', 'D', '8', 'T', 'L', 'S', 0,
  /* 11462 */ 'I', 'C', 'B', 'T', 'L', 'S', 0,
  /* 11469 */ 'S', 'T', 'B', 'X', 'T', 'L', 'S', 0,
  /* 11477 */ 'L', 'D', 'X', 'T', 'L', 'S', 0,
  /* 11484 */ 'S', 'T', 'D', 'X', 'T', 'L', 'S', 0,
  /* 11492 */ 'S', 'T', 'H', 'X', 'T', 'L', 'S', 0,
  /* 11500 */ 'S', 'T', 'W', 'X', 'T', 'L', 'S', 0,
  /* 11508 */ 'L', 'B', 'Z', 'X', 'T', 'L', 'S', 0,
  /* 11516 */ 'L', 'H', 'Z', 'X', 'T', 'L', 'S', 0,
  /* 11524 */ 'L', 'W', 'Z', 'X', 'T', 'L', 'S', 0,
  /* 11532 */ 'B', 'L', '8', '_', 'T', 'L', 'S', 0,
  /* 11540 */ 'B', 'L', '_', 'T', 'L', 'S', 0,
  /* 11547 */ 'B', 'L', '8', '_', 'N', 'O', 'P', '_', 'T', 'L', 'S', 0,
  /* 11559 */ 'Q', 'V', 'F', 'M', 'U', 'L', 'S', 0,
  /* 11567 */ 'Q', 'V', 'F', 'X', 'M', 'U', 'L', 'S', 0,
  /* 11576 */ 'F', 'R', 'I', 'M', 'S', 0,
  /* 11582 */ 'F', 'C', 'P', 'S', 'G', 'N', 'S', 0,
  /* 11590 */ 'F', 'R', 'I', 'N', 'S', 0,
  /* 11596 */ 'G', '_', 'F', 'C', 'O', 'S', 0,
  /* 11603 */ 'E', 'V', 'L', 'W', 'H', 'O', 'S', 0,
  /* 11611 */ 'F', 'R', 'I', 'P', 'S', 0,
  /* 11617 */ 'G', '_', 'C', 'O', 'N', 'C', 'A', 'T', '_', 'V', 'E', 'C', 'T', 'O', 'R', 'S', 0,
  /* 11634 */ 'C', 'O', 'P', 'Y', '_', 'T', 'O', '_', 'R', 'E', 'G', 'C', 'L', 'A', 'S', 'S', 0,
  /* 11651 */ 'F', 'A', 'B', 'S', 'S', 0,
  /* 11657 */ 'F', 'N', 'A', 'B', 'S', 'S', 0,
  /* 11664 */ 'V', 'P', 'K', 'S', 'D', 'S', 'S', 0,
  /* 11672 */ 'G', '_', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', 'X', 'C', 'H', 'G', '_', 'W', 'I', 'T', 'H', '_', 'S', 'U', 'C', 'C', 'E', 'S', 'S', 0,
  /* 11702 */ 'V', 'P', 'K', 'S', 'H', 'S', 'S', 0,
  /* 11710 */ 'V', 'P', 'K', 'S', 'W', 'S', 'S', 0,
  /* 11718 */ 'G', '_', 'I', 'N', 'T', 'R', 'I', 'N', 'S', 'I', 'C', '_', 'W', '_', 'S', 'I', 'D', 'E', '_', 'E', 'F', 'F', 'E', 'C', 'T', 'S', 0,
  /* 11745 */ 'E', 'V', 'C', 'M', 'P', 'G', 'T', 'S', 0,
  /* 11754 */ 'E', 'V', 'C', 'M', 'P', 'L', 'T', 'S', 0,
  /* 11763 */ 'F', 'S', 'Q', 'R', 'T', 'S', 0,
  /* 11770 */ 'Q', 'V', 'F', 'C', 'F', 'I', 'D', 'U', 'S', 0,
  /* 11780 */ 'V', 'P', 'K', 'S', 'D', 'U', 'S', 0,
  /* 11788 */ 'V', 'P', 'K', 'U', 'D', 'U', 'S', 0,
  /* 11796 */ 'V', 'P', 'K', 'S', 'H', 'U', 'S', 0,
  /* 11804 */ 'V', 'P', 'K', 'U', 'H', 'U', 'S', 0,
  /* 11812 */ 'F', 'C', 'M', 'P', 'U', 'S', 0,
  /* 11819 */ 'V', 'P', 'K', 'S', 'W', 'U', 'S', 0,
  /* 11827 */ 'V', 'P', 'K', 'U', 'W', 'U', 'S', 0,
  /* 11835 */ 'F', 'D', 'I', 'V', 'S', 0,
  /* 11841 */ 'E', 'V', 'S', 'R', 'W', 'S', 0,
  /* 11848 */ 'M', 'T', 'V', 'S', 'R', 'W', 'S', 0,
  /* 11856 */ 'V', 'S', 'U', 'M', '2', 'S', 'W', 'S', 0,
  /* 11865 */ 'V', 'S', 'U', 'B', 'S', 'W', 'S', 0,
  /* 11873 */ 'V', 'A', 'D', 'D', 'S', 'W', 'S', 0,
  /* 11881 */ 'V', 'S', 'U', 'M', 'S', 'W', 'S', 0,
  /* 11889 */ 'V', 'S', 'U', 'B', 'U', 'W', 'S', 0,
  /* 11897 */ 'V', 'A', 'D', 'D', 'U', 'W', 'S', 0,
  /* 11905 */ 'E', 'V', 'D', 'I', 'V', 'W', 'S', 0,
  /* 11913 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'X', 'W', 'S', 0,
  /* 11924 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'X', 'W', 'S', 0,
  /* 11935 */ 'X', 'V', 'C', 'V', 'S', 'P', 'S', 'X', 'W', 'S', 0,
  /* 11946 */ 'X', 'S', 'C', 'V', 'D', 'P', 'U', 'X', 'W', 'S', 0,
  /* 11957 */ 'X', 'V', 'C', 'V', 'D', 'P', 'U', 'X', 'W', 'S', 0,
  /* 11968 */ 'X', 'V', 'C', 'V', 'S', 'P', 'U', 'X', 'W', 'S', 0,
  /* 11979 */ 'V', 'C', 'T', 'S', 'X', 'S', 0,
  /* 11986 */ 'V', 'C', 'T', 'U', 'X', 'S', 0,
  /* 11993 */ 'F', 'R', 'I', 'Z', 'S', 0,
  /* 11999 */ 'L', 'D', 'A', 'T', 0,
  /* 12004 */ 'S', 'T', 'D', 'A', 'T', 0,
  /* 12010 */ 'E', 'V', 'L', 'H', 'H', 'E', 'S', 'P', 'L', 'A', 'T', 0,
  /* 12022 */ 'E', 'V', 'L', 'W', 'H', 'S', 'P', 'L', 'A', 'T', 0,
  /* 12033 */ 'E', 'V', 'L', 'H', 'H', 'O', 'S', 'S', 'P', 'L', 'A', 'T', 0,
  /* 12046 */ 'E', 'V', 'L', 'H', 'H', 'O', 'U', 'S', 'P', 'L', 'A', 'T', 0,
  /* 12059 */ 'E', 'V', 'L', 'W', 'W', 'S', 'P', 'L', 'A', 'T', 0,
  /* 12070 */ 'L', 'W', 'A', 'T', 0,
  /* 12075 */ 'S', 'T', 'W', 'A', 'T', 0,
  /* 12081 */ 'D', 'C', 'B', 'T', 0,
  /* 12086 */ 'I', 'C', 'B', 'T', 0,
  /* 12091 */ 'G', '_', 'E', 'X', 'T', 'R', 'A', 'C', 'T', 0,
  /* 12101 */ 'G', '_', 'S', 'E', 'L', 'E', 'C', 'T', 0,
  /* 12110 */ 'G', '_', 'B', 'R', 'I', 'N', 'D', 'I', 'R', 'E', 'C', 'T', 0,
  /* 12123 */ 'D', 'C', 'B', 'T', 'C', 'T', 0,
  /* 12130 */ 'D', 'C', 'B', 'T', 'S', 'T', 'C', 'T', 0,
  /* 12139 */ 'P', 'A', 'T', 'C', 'H', 'A', 'B', 'L', 'E', '_', 'R', 'E', 'T', 0,
  /* 12153 */ 'T', 'C', 'H', 'E', 'C', 'K', '_', 'R', 'E', 'T', 0,
  /* 12164 */ 'T', 'B', 'E', 'G', 'I', 'N', '_', 'R', 'E', 'T', 0,
  /* 12175 */ 'C', 'R', '6', 'S', 'E', 'T', 0,
  /* 12182 */ 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', 0,
  /* 12196 */ 'C', 'R', '6', 'U', 'N', 'S', 'E', 'T', 0,
  /* 12205 */ 'C', 'R', 'U', 'N', 'S', 'E', 'T', 0,
  /* 12213 */ 'C', 'R', 'S', 'E', 'T', 0,
  /* 12219 */ 'E', 'F', 'D', 'C', 'M', 'P', 'G', 'T', 0,
  /* 12228 */ 'Q', 'V', 'F', 'C', 'M', 'P', 'G', 'T', 0,
  /* 12237 */ 'E', 'F', 'S', 'C', 'M', 'P', 'G', 'T', 0,
  /* 12246 */ 'E', 'V', 'F', 'S', 'C', 'M', 'P', 'G', 'T', 0,
  /* 12256 */ 'E', 'F', 'D', 'T', 'S', 'T', 'G', 'T', 0,
  /* 12265 */ 'E', 'F', 'S', 'T', 'S', 'T', 'G', 'T', 0,
  /* 12274 */ 'E', 'V', 'F', 'S', 'T', 'S', 'T', 'G', 'T', 0,
  /* 12284 */ 'W', 'A', 'I', 'T', 0,
  /* 12289 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 12303 */ 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 12315 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', 0,
  /* 12330 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', 0,
  /* 12345 */ 'P', 'A', 'T', 'C', 'H', 'A', 'B', 'L', 'E', '_', 'F', 'U', 'N', 'C', 'T', 'I', 'O', 'N', '_', 'E', 'X', 'I', 'T', 0,
  /* 12369 */ 'G', '_', 'B', 'R', 'J', 'T', 0,
  /* 12376 */ 'G', '_', 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'V', 'E', 'C', 'T', 'O', 'R', '_', 'E', 'L', 'T', 0,
  /* 12397 */ 'G', '_', 'I', 'N', 'S', 'E', 'R', 'T', '_', 'V', 'E', 'C', 'T', 'O', 'R', '_', 'E', 'L', 'T', 0,
  /* 12417 */ 'E', 'F', 'D', 'C', 'M', 'P', 'L', 'T', 0,
  /* 12426 */ 'Q', 'V', 'F', 'C', 'M', 'P', 'L', 'T', 0,
  /* 12435 */ 'E', 'F', 'S', 'C', 'M', 'P', 'L', 'T', 0,
  /* 12444 */ 'E', 'V', 'F', 'S', 'C', 'M', 'P', 'L', 'T', 0,
  /* 12454 */ 'E', 'F', 'D', 'T', 'S', 'T', 'L', 'T', 0,
  /* 12463 */ 'E', 'F', 'S', 'T', 'S', 'T', 'L', 'T', 0,
  /* 12472 */ 'E', 'V', 'F', 'S', 'T', 'S', 'T', 'L', 'T', 0,
  /* 12482 */ 'G', '_', 'F', 'C', 'O', 'N', 'S', 'T', 'A', 'N', 'T', 0,
  /* 12494 */ 'G', '_', 'C', 'O', 'N', 'S', 'T', 'A', 'N', 'T', 0,
  /* 12505 */ 'S', 'T', 'A', 'T', 'E', 'P', 'O', 'I', 'N', 'T', 0,
  /* 12516 */ 'P', 'A', 'T', 'C', 'H', 'P', 'O', 'I', 'N', 'T', 0,
  /* 12527 */ 'G', '_', 'P', 'T', 'R', 'T', 'O', 'I', 'N', 'T', 0,
  /* 12538 */ 'G', '_', 'F', 'R', 'I', 'N', 'T', 0,
  /* 12546 */ 'G', '_', 'F', 'N', 'E', 'A', 'R', 'B', 'Y', 'I', 'N', 'T', 0,
  /* 12559 */ 'P', 'P', 'C', '3', '2', 'G', 'O', 'T', 0,
  /* 12568 */ 'P', 'P', 'C', '3', '2', 'P', 'I', 'C', 'G', 'O', 'T', 0,
  /* 12580 */ 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 12589 */ 'T', 'R', 'E', 'C', 'H', 'K', 'P', 'T', 0,
  /* 12598 */ 'G', '_', 'V', 'A', 'S', 'T', 'A', 'R', 'T', 0,
  /* 12608 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 12623 */ 'G', '_', 'I', 'N', 'S', 'E', 'R', 'T', 0,
  /* 12632 */ 'T', 'A', 'B', 'O', 'R', 'T', 0,
  /* 12639 */ 'C', 'P', '_', 'A', 'B', 'O', 'R', 'T', 0,
  /* 12648 */ 'G', '_', 'F', 'S', 'Q', 'R', 'T', 0,
  /* 12656 */ 'F', 'T', 'S', 'Q', 'R', 'T', 0,
  /* 12663 */ 'G', '_', 'B', 'I', 'T', 'C', 'A', 'S', 'T', 0,
  /* 12673 */ 'G', '_', 'A', 'D', 'D', 'R', 'S', 'P', 'A', 'C', 'E', '_', 'C', 'A', 'S', 'T', 0,
  /* 12690 */ 'V', 'N', 'C', 'I', 'P', 'H', 'E', 'R', 'L', 'A', 'S', 'T', 0,
  /* 12703 */ 'V', 'C', 'I', 'P', 'H', 'E', 'R', 'L', 'A', 'S', 'T', 0,
  /* 12715 */ 'C', 'P', '_', 'P', 'A', 'S', 'T', 'E', '_', 'L', 'A', 'S', 'T', 0,
  /* 12729 */ 'D', 'C', 'B', 'S', 'T', 0,
  /* 12735 */ 'D', 'S', 'T', 0,
  /* 12739 */ 'C', 'P', '_', 'C', 'O', 'P', 'Y', '_', 'F', 'I', 'R', 'S', 'T', 0,
  /* 12753 */ 'D', 'C', 'B', 'T', 'S', 'T', 0,
  /* 12760 */ 'D', 'S', 'T', 'S', 'T', 0,
  /* 12766 */ 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'S', 'T', 0,
  /* 12780 */ 'D', 'C', 'B', 'T', 'T', 0,
  /* 12786 */ 'D', 'S', 'T', 'T', 0,
  /* 12791 */ 'D', 'C', 'B', 'T', 'S', 'T', 'T', 0,
  /* 12799 */ 'D', 'S', 'T', 'S', 'T', 'T', 0,
  /* 12806 */ 'G', '_', 'F', 'P', 'E', 'X', 'T', 0,
  /* 12814 */ 'G', '_', 'S', 'E', 'X', 'T', 0,
  /* 12821 */ 'G', '_', 'A', 'N', 'Y', 'E', 'X', 'T', 0,
  /* 12830 */ 'G', '_', 'Z', 'E', 'X', 'T', 0,
  /* 12837 */ 'L', 'H', 'A', 'U', 0,
  /* 12842 */ 'S', 'T', 'B', 'U', 0,
  /* 12847 */ 'L', 'F', 'D', 'U', 0,
  /* 12852 */ 'S', 'T', 'F', 'D', 'U', 0,
  /* 12858 */ 'M', 'A', 'D', 'D', 'H', 'D', 'U', 0,
  /* 12866 */ 'M', 'U', 'L', 'H', 'D', 'U', 0,
  /* 12873 */ 'Q', 'V', 'F', 'C', 'F', 'I', 'D', 'U', 0,
  /* 12882 */ 'Q', 'V', 'F', 'C', 'T', 'I', 'D', 'U', 0,
  /* 12891 */ 'L', 'D', 'U', 0,
  /* 12895 */ 'S', 'T', 'D', 'U', 0,
  /* 12900 */ 'D', 'I', 'V', 'D', 'U', 0,
  /* 12906 */ 'D', 'I', 'V', 'D', 'E', 'U', 0,
  /* 12913 */ 'D', 'I', 'V', 'W', 'E', 'U', 0,
  /* 12920 */ 'S', 'T', 'H', 'U', 0,
  /* 12925 */ 'E', 'V', 'S', 'R', 'W', 'I', 'U', 0,
  /* 12933 */ 'E', 'V', 'L', 'W', 'H', 'O', 'U', 0,
  /* 12941 */ 'L', 'F', 'S', 'U', 0,
  /* 12946 */ 'S', 'T', 'F', 'S', 'U', 0,
  /* 12952 */ 'E', 'V', 'C', 'M', 'P', 'G', 'T', 'U', 0,
  /* 12961 */ 'E', 'V', 'C', 'M', 'P', 'L', 'T', 'U', 0,
  /* 12970 */ 'M', 'U', 'L', 'H', 'W', 'U', 0,
  /* 12977 */ 'Q', 'V', 'F', 'C', 'T', 'I', 'W', 'U', 0,
  /* 12986 */ 'E', 'V', 'S', 'R', 'W', 'U', 0,
  /* 12993 */ 'S', 'T', 'W', 'U', 0,
  /* 12998 */ 'E', 'V', 'D', 'I', 'V', 'W', 'U', 0,
  /* 13006 */ 'L', 'B', 'Z', 'U', 0,
  /* 13011 */ 'L', 'H', 'Z', 'U', 0,
  /* 13016 */ 'L', 'W', 'Z', 'U', 0,
  /* 13021 */ 'S', 'L', 'B', 'M', 'F', 'E', 'V', 0,
  /* 13029 */ 'E', 'F', 'D', 'D', 'I', 'V', 0,
  /* 13036 */ 'G', '_', 'F', 'D', 'I', 'V', 0,
  /* 13043 */ 'E', 'F', 'S', 'D', 'I', 'V', 0,
  /* 13050 */ 'E', 'V', 'F', 'S', 'D', 'I', 'V', 0,
  /* 13058 */ 'G', '_', 'S', 'D', 'I', 'V', 0,
  /* 13065 */ 'F', 'T', 'D', 'I', 'V', 0,
  /* 13071 */ 'G', '_', 'U', 'D', 'I', 'V', 0,
  /* 13078 */ 'V', 'S', 'L', 'V', 0,
  /* 13083 */ 'X', 'X', 'L', 'E', 'Q', 'V', 0,
  /* 13090 */ 'C', 'R', 'E', 'Q', 'V', 0,
  /* 13096 */ 'E', 'V', 'E', 'Q', 'V', 0,
  /* 13102 */ 'V', 'S', 'R', 'V', 0,
  /* 13107 */ 'L', 'X', 'V', 0,
  /* 13111 */ 'S', 'T', 'X', 'V', 0,
  /* 13116 */ 'V', 'E', 'X', 'T', 'S', 'B', '2', 'W', 0,
  /* 13125 */ 'V', 'E', 'X', 'T', 'S', 'H', '2', 'W', 0,
  /* 13134 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'F', 'A', 'A', 'W', 0,
  /* 13146 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'F', 'A', 'A', 'W', 0,
  /* 13158 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'F', 'A', 'A', 'W', 0,
  /* 13170 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'F', 'A', 'A', 'W', 0,
  /* 13182 */ 'E', 'V', 'A', 'D', 'D', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 13194 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 13206 */ 'E', 'V', 'S', 'U', 'B', 'F', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 13219 */ 'E', 'V', 'M', 'W', 'L', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 13231 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'I', 'A', 'A', 'W', 0,
  /* 13243 */ 'E', 'V', 'A', 'D', 'D', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 13255 */ 'E', 'V', 'M', 'H', 'E', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 13267 */ 'E', 'V', 'S', 'U', 'B', 'F', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 13280 */ 'E', 'V', 'M', 'W', 'L', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 13292 */ 'E', 'V', 'M', 'H', 'O', 'U', 'M', 'I', 'A', 'A', 'W', 0,
  /* 13304 */ 'E', 'V', 'A', 'D', 'D', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 13316 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 13328 */ 'E', 'V', 'S', 'U', 'B', 'F', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 13341 */ 'E', 'V', 'M', 'W', 'L', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 13353 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'I', 'A', 'A', 'W', 0,
  /* 13365 */ 'E', 'V', 'A', 'D', 'D', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 13377 */ 'E', 'V', 'M', 'H', 'E', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 13389 */ 'E', 'V', 'S', 'U', 'B', 'F', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 13402 */ 'E', 'V', 'M', 'W', 'L', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 13414 */ 'E', 'V', 'M', 'H', 'O', 'U', 'S', 'I', 'A', 'A', 'W', 0,
  /* 13426 */ 'V', 'S', 'H', 'A', 'S', 'I', 'G', 'M', 'A', 'W', 0,
  /* 13437 */ 'V', 'S', 'R', 'A', 'W', 0,
  /* 13443 */ 'V', 'P', 'R', 'T', 'Y', 'B', 'W', 0,
  /* 13451 */ 'E', 'V', 'A', 'D', 'D', 'W', 0,
  /* 13458 */ 'E', 'V', 'L', 'D', 'W', 0,
  /* 13464 */ 'E', 'V', 'R', 'N', 'D', 'W', 0,
  /* 13471 */ 'E', 'V', 'S', 'T', 'D', 'W', 0,
  /* 13478 */ 'V', 'M', 'R', 'G', 'E', 'W', 0,
  /* 13485 */ 'V', 'C', 'M', 'P', 'N', 'E', 'W', 0,
  /* 13493 */ 'E', 'V', 'S', 'U', 'B', 'F', 'W', 0,
  /* 13501 */ 'E', 'V', 'S', 'U', 'B', 'I', 'F', 'W', 0,
  /* 13510 */ 'V', 'N', 'E', 'G', 'W', 0,
  /* 13516 */ 'V', 'M', 'R', 'G', 'H', 'W', 0,
  /* 13523 */ 'X', 'X', 'M', 'R', 'G', 'H', 'W', 0,
  /* 13531 */ 'M', 'U', 'L', 'H', 'W', 0,
  /* 13537 */ 'E', 'V', 'A', 'D', 'D', 'I', 'W', 0,
  /* 13545 */ 'Q', 'V', 'F', 'C', 'T', 'I', 'W', 0,
  /* 13553 */ 'V', 'M', 'R', 'G', 'L', 'W', 0,
  /* 13560 */ 'X', 'X', 'M', 'R', 'G', 'L', 'W', 0,
  /* 13568 */ 'M', 'U', 'L', 'L', 'W', 0,
  /* 13574 */ 'C', 'M', 'P', 'L', 'W', 0,
  /* 13580 */ 'E', 'V', 'R', 'L', 'W', 0,
  /* 13586 */ 'E', 'V', 'S', 'L', 'W', 0,
  /* 13592 */ 'L', 'M', 'W', 0,
  /* 13596 */ 'S', 'T', 'M', 'W', 0,
  /* 13601 */ 'V', 'P', 'M', 'S', 'U', 'M', 'W', 0,
  /* 13609 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'F', 'A', 'N', 'W', 0,
  /* 13621 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'F', 'A', 'N', 'W', 0,
  /* 13633 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'F', 'A', 'N', 'W', 0,
  /* 13645 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'F', 'A', 'N', 'W', 0,
  /* 13657 */ 'E', 'V', 'M', 'H', 'E', 'S', 'M', 'I', 'A', 'N', 'W', 0,
  /* 13669 */ 'E', 'V', 'M', 'W', 'L', 'S', 'M', 'I', 'A', 'N', 'W', 0,
  /* 13681 */ 'E', 'V', 'M', 'H', 'O', 'S', 'M', 'I', 'A', 'N', 'W', 0,
  /* 13693 */ 'E', 'V', 'M', 'H', 'E', 'U', 'M', 'I', 'A', 'N', 'W', 0,
  /* 13705 */ 'E', 'V', 'M', 'W', 'L', 'U', 'M', 'I', 'A', 'N', 'W', 0,
  /* 13717 */ 'E', 'V', 'M', 'H', 'O', 'U', 'M', 'I', 'A', 'N', 'W', 0,
  /* 13729 */ 'E', 'V', 'M', 'H', 'E', 'S', 'S', 'I', 'A', 'N', 'W', 0,
  /* 13741 */ 'E', 'V', 'M', 'W', 'L', 'S', 'S', 'I', 'A', 'N', 'W', 0,
  /* 13753 */ 'E', 'V', 'M', 'H', 'O', 'S', 'S', 'I', 'A', 'N', 'W', 0,
  /* 13765 */ 'E', 'V', 'M', 'H', 'E', 'U', 'S', 'I', 'A', 'N', 'W', 0,
  /* 13777 */ 'E', 'V', 'M', 'W', 'L', 'U', 'S', 'I', 'A', 'N', 'W', 0,
  /* 13789 */ 'E', 'V', 'M', 'H', 'O', 'U', 'S', 'I', 'A', 'N', 'W', 0,
  /* 13801 */ 'V', 'M', 'R', 'G', 'O', 'W', 0,
  /* 13808 */ 'G', '_', 'F', 'P', 'O', 'W', 0,
  /* 13815 */ 'C', 'M', 'P', 'W', 0,
  /* 13820 */ 'X', 'X', 'B', 'R', 'W', 0,
  /* 13826 */ 'V', 'S', 'R', 'W', 0,
  /* 13831 */ 'M', 'O', 'D', 'S', 'W', 0,
  /* 13837 */ 'V', 'M', 'U', 'L', 'E', 'S', 'W', 0,
  /* 13845 */ 'V', 'A', 'V', 'G', 'S', 'W', 0,
  /* 13852 */ 'V', 'U', 'P', 'K', 'H', 'S', 'W', 0,
  /* 13860 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'W', 0,
  /* 13869 */ 'V', 'U', 'P', 'K', 'L', 'S', 'W', 0,
  /* 13877 */ 'E', 'V', 'C', 'N', 'T', 'L', 'S', 'W', 0,
  /* 13886 */ 'V', 'M', 'I', 'N', 'S', 'W', 0,
  /* 13893 */ 'V', 'M', 'U', 'L', 'O', 'S', 'W', 0,
  /* 13901 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'W', 0,
  /* 13910 */ 'E', 'X', 'T', 'S', 'W', 0,
  /* 13916 */ 'V', 'M', 'A', 'X', 'S', 'W', 0,
  /* 13923 */ 'V', 'S', 'P', 'L', 'T', 'W', 0,
  /* 13930 */ 'X', 'X', 'S', 'P', 'L', 'T', 'W', 0,
  /* 13938 */ 'V', 'P', 'O', 'P', 'C', 'N', 'T', 'W', 0,
  /* 13947 */ 'V', 'I', 'N', 'S', 'E', 'R', 'T', 'W', 0,
  /* 13956 */ 'X', 'X', 'I', 'N', 'S', 'E', 'R', 'T', 'W', 0,
  /* 13966 */ 'S', 'P', 'E', 'S', 'T', 'W', 0,
  /* 13973 */ 'V', 'S', 'U', 'B', 'C', 'U', 'W', 0,
  /* 13981 */ 'V', 'A', 'D', 'D', 'C', 'U', 'W', 0,
  /* 13989 */ 'M', 'O', 'D', 'U', 'W', 0,
  /* 13995 */ 'V', 'A', 'B', 'S', 'D', 'U', 'W', 0,
  /* 14003 */ 'V', 'M', 'U', 'L', 'E', 'U', 'W', 0,
  /* 14011 */ 'V', 'A', 'V', 'G', 'U', 'W', 0,
  /* 14018 */ 'V', 'M', 'I', 'N', 'U', 'W', 0,
  /* 14025 */ 'V', 'M', 'U', 'L', 'O', 'U', 'W', 0,
  /* 14033 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'W', 0,
  /* 14042 */ 'V', 'E', 'X', 'T', 'R', 'A', 'C', 'T', 'U', 'W', 0,
  /* 14053 */ 'X', 'X', 'E', 'X', 'T', 'R', 'A', 'C', 'T', 'U', 'W', 0,
  /* 14065 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'W', 0,
  /* 14074 */ 'V', 'M', 'A', 'X', 'U', 'W', 0,
  /* 14081 */ 'D', 'I', 'V', 'W', 0,
  /* 14086 */ 'V', 'C', 'M', 'P', 'N', 'E', 'Z', 'W', 0,
  /* 14095 */ 'V', 'C', 'L', 'Z', 'W', 0,
  /* 14101 */ 'E', 'V', 'C', 'N', 'T', 'L', 'Z', 'W', 0,
  /* 14110 */ 'V', 'C', 'T', 'Z', 'W', 0,
  /* 14116 */ 'C', 'N', 'T', 'T', 'Z', 'W', 0,
  /* 14123 */ 'L', 'X', 'V', 'D', '2', 'X', 0,
  /* 14130 */ 'S', 'T', 'X', 'V', 'D', '2', 'X', 0,
  /* 14138 */ 'L', 'X', 'V', 'W', '4', 'X', 0,
  /* 14145 */ 'S', 'T', 'X', 'V', 'W', '4', 'X', 0,
  /* 14153 */ 'L', 'X', 'V', 'B', '1', '6', 'X', 0,
  /* 14161 */ 'S', 'T', 'X', 'V', 'B', '1', '6', 'X', 0,
  /* 14170 */ 'L', 'X', 'V', 'H', '8', 'X', 0,
  /* 14177 */ 'S', 'T', 'X', 'V', 'H', '8', 'X', 0,
  /* 14185 */ 'L', 'H', 'A', 'X', 0,
  /* 14190 */ 'G', '_', 'S', 'M', 'A', 'X', 0,
  /* 14197 */ 'G', '_', 'U', 'M', 'A', 'X', 0,
  /* 14204 */ 'G', '_', 'A', 'T', 'O', 'M', 'I', 'C', 'R', 'M', 'W', '_', 'U', 'M', 'A', 'X', 0,
  /* 14221 */ 'G', '_', 'A', 'T', 'O', 'M', 'I', 'C', 'R', 'M', 'W', '_', 'M', 'A', 'X', 0,
  /* 14237 */ 'T', 'L', 'B', 'I', 'V', 'A', 'X', 0,
  /* 14245 */ 'Q', 'V', 'L', 'F', 'I', 'W', 'A', 'X', 0,
  /* 14254 */ 'L', 'I', 'W', 'A', 'X', 0,
  /* 14260 */ 'L', 'X', 'S', 'I', 'W', 'A', 'X', 0,
  /* 14268 */ 'L', 'W', 'A', 'X', 0,
  /* 14273 */ 'L', 'V', 'E', 'B', 'X', 0,
  /* 14279 */ 'S', 'T', 'V', 'E', 'B', 'X', 0,
  /* 14286 */ 'S', 'T', 'X', 'S', 'I', 'B', 'X', 0,
  /* 14294 */ 'S', 'T', 'B', 'X', 0,
  /* 14299 */ 'S', 'T', 'B', 'C', 'X', 0,
  /* 14305 */ 'S', 'T', 'D', 'C', 'X', 0,
  /* 14311 */ 'S', 'T', 'H', 'C', 'X', 0,
  /* 14317 */ 'S', 'T', 'W', 'C', 'X', 0,
  /* 14323 */ 'Q', 'V', 'L', 'F', 'C', 'D', 'X', 0,
  /* 14331 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'D', 'X', 0,
  /* 14340 */ 'E', 'V', 'L', 'D', 'D', 'X', 0,
  /* 14347 */ 'E', 'V', 'S', 'T', 'D', 'D', 'X', 0,
  /* 14355 */ 'Q', 'V', 'L', 'F', 'D', 'X', 0,
  /* 14362 */ 'Q', 'V', 'S', 'T', 'F', 'D', 'X', 0,
  /* 14370 */ 'Q', 'V', 'L', 'P', 'C', 'L', 'D', 'X', 0,
  /* 14379 */ 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'L', 'D', 'X', 0,
  /* 14394 */ 'Q', 'V', 'L', 'P', 'C', 'R', 'D', 'X', 0,
  /* 14403 */ 'L', 'X', 'S', 'D', 'X', 0,
  /* 14409 */ 'S', 'T', 'X', 'S', 'D', 'X', 0,
  /* 14416 */ 'S', 'T', 'D', 'X', 0,
  /* 14421 */ 'G', '_', 'F', 'R', 'A', 'M', 'E', '_', 'I', 'N', 'D', 'E', 'X', 0,
  /* 14435 */ 'E', 'V', 'L', 'W', 'H', 'E', 'X', 0,
  /* 14443 */ 'E', 'V', 'S', 'T', 'W', 'H', 'E', 'X', 0,
  /* 14452 */ 'E', 'V', 'S', 'T', 'W', 'W', 'E', 'X', 0,
  /* 14461 */ 'E', 'V', 'L', 'D', 'H', 'X', 0,
  /* 14468 */ 'E', 'V', 'S', 'T', 'D', 'H', 'X', 0,
  /* 14476 */ 'L', 'V', 'E', 'H', 'X', 0,
  /* 14482 */ 'S', 'T', 'V', 'E', 'H', 'X', 0,
  /* 14489 */ 'S', 'T', 'X', 'S', 'I', 'H', 'X', 0,
  /* 14497 */ 'S', 'T', 'H', 'X', 0,
  /* 14502 */ 'S', 'T', 'B', 'C', 'I', 'X', 0,
  /* 14509 */ 'L', 'D', 'C', 'I', 'X', 0,
  /* 14515 */ 'S', 'T', 'D', 'C', 'I', 'X', 0,
  /* 14522 */ 'S', 'T', 'H', 'C', 'I', 'X', 0,
  /* 14529 */ 'S', 'T', 'W', 'C', 'I', 'X', 0,
  /* 14536 */ 'L', 'B', 'Z', 'C', 'I', 'X', 0,
  /* 14543 */ 'L', 'H', 'Z', 'C', 'I', 'X', 0,
  /* 14550 */ 'L', 'W', 'Z', 'C', 'I', 'X', 0,
  /* 14557 */ 'X', 'S', 'R', 'Q', 'P', 'I', 'X', 0,
  /* 14565 */ 'V', 'E', 'X', 'T', 'U', 'B', 'L', 'X', 0,
  /* 14574 */ 'V', 'E', 'X', 'T', 'U', 'H', 'L', 'X', 0,
  /* 14583 */ 'V', 'E', 'X', 'T', 'U', 'W', 'L', 'X', 0,
  /* 14592 */ 'L', 'D', 'M', 'X', 0,
  /* 14597 */ 'V', 'S', 'B', 'O', 'X', 0,
  /* 14603 */ 'E', 'V', 'S', 'T', 'W', 'H', 'O', 'X', 0,
  /* 14612 */ 'E', 'V', 'S', 'T', 'W', 'W', 'O', 'X', 0,
  /* 14621 */ 'L', 'B', 'E', 'P', 'X', 0,
  /* 14627 */ 'S', 'T', 'B', 'E', 'P', 'X', 0,
  /* 14634 */ 'L', 'F', 'D', 'E', 'P', 'X', 0,
  /* 14641 */ 'S', 'T', 'F', 'D', 'E', 'P', 'X', 0,
  /* 14649 */ 'L', 'H', 'E', 'P', 'X', 0,
  /* 14655 */ 'S', 'T', 'H', 'E', 'P', 'X', 0,
  /* 14662 */ 'L', 'W', 'E', 'P', 'X', 0,
  /* 14668 */ 'S', 'T', 'W', 'E', 'P', 'X', 0,
  /* 14675 */ 'V', 'U', 'P', 'K', 'H', 'P', 'X', 0,
  /* 14683 */ 'V', 'P', 'K', 'P', 'X', 0,
  /* 14689 */ 'V', 'U', 'P', 'K', 'L', 'P', 'X', 0,
  /* 14697 */ 'L', 'X', 'S', 'S', 'P', 'X', 0,
  /* 14704 */ 'S', 'T', 'X', 'S', 'S', 'P', 'X', 0,
  /* 14712 */ 'L', 'B', 'A', 'R', 'X', 0,
  /* 14718 */ 'L', 'D', 'A', 'R', 'X', 0,
  /* 14724 */ 'L', 'H', 'A', 'R', 'X', 0,
  /* 14730 */ 'L', 'W', 'A', 'R', 'X', 0,
  /* 14736 */ 'L', 'D', 'B', 'R', 'X', 0,
  /* 14742 */ 'S', 'T', 'D', 'B', 'R', 'X', 0,
  /* 14749 */ 'L', 'H', 'B', 'R', 'X', 0,
  /* 14755 */ 'S', 'T', 'H', 'B', 'R', 'X', 0,
  /* 14762 */ 'V', 'E', 'X', 'T', 'U', 'B', 'R', 'X', 0,
  /* 14771 */ 'L', 'W', 'B', 'R', 'X', 0,
  /* 14777 */ 'S', 'T', 'W', 'B', 'R', 'X', 0,
  /* 14784 */ 'V', 'E', 'X', 'T', 'U', 'H', 'R', 'X', 0,
  /* 14793 */ 'V', 'E', 'X', 'T', 'U', 'W', 'R', 'X', 0,
  /* 14802 */ 'M', 'C', 'R', 'X', 'R', 'X', 0,
  /* 14809 */ 'T', 'L', 'B', 'S', 'X', 0,
  /* 14815 */ 'Q', 'V', 'L', 'F', 'C', 'S', 'X', 0,
  /* 14823 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'S', 'X', 0,
  /* 14832 */ 'L', 'X', 'V', 'D', 'S', 'X', 0,
  /* 14839 */ 'V', 'C', 'F', 'S', 'X', 0,
  /* 14845 */ 'Q', 'V', 'L', 'F', 'S', 'X', 0,
  /* 14852 */ 'Q', 'V', 'S', 'T', 'F', 'S', 'X', 0,
  /* 14860 */ 'Q', 'V', 'L', 'P', 'C', 'L', 'S', 'X', 0,
  /* 14869 */ 'E', 'V', 'L', 'W', 'H', 'O', 'S', 'X', 0,
  /* 14878 */ 'Q', 'V', 'L', 'P', 'C', 'R', 'S', 'X', 0,
  /* 14887 */ 'L', 'X', 'V', 'W', 'S', 'X', 0,
  /* 14894 */ 'E', 'V', 'L', 'H', 'H', 'E', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 14907 */ 'E', 'V', 'L', 'W', 'H', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 14919 */ 'E', 'V', 'L', 'H', 'H', 'O', 'S', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 14933 */ 'E', 'V', 'L', 'H', 'H', 'O', 'U', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 14947 */ 'E', 'V', 'L', 'W', 'W', 'S', 'P', 'L', 'A', 'T', 'X', 0,
  /* 14959 */ 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'S', 'T', 'X', 0,
  /* 14974 */ 'L', 'H', 'A', 'U', 'X', 0,
  /* 14980 */ 'L', 'W', 'A', 'U', 'X', 0,
  /* 14986 */ 'S', 'T', 'B', 'U', 'X', 0,
  /* 14992 */ 'Q', 'V', 'L', 'F', 'C', 'D', 'U', 'X', 0,
  /* 15001 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'D', 'U', 'X', 0,
  /* 15011 */ 'Q', 'V', 'L', 'F', 'D', 'U', 'X', 0,
  /* 15019 */ 'Q', 'V', 'S', 'T', 'F', 'D', 'U', 'X', 0,
  /* 15028 */ 'L', 'D', 'U', 'X', 0,
  /* 15033 */ 'S', 'T', 'D', 'U', 'X', 0,
  /* 15039 */ 'V', 'C', 'F', 'U', 'X', 0,
  /* 15045 */ 'S', 'T', 'H', 'U', 'X', 0,
  /* 15051 */ 'E', 'V', 'L', 'W', 'H', 'O', 'U', 'X', 0,
  /* 15060 */ 'Q', 'V', 'L', 'F', 'C', 'S', 'U', 'X', 0,
  /* 15069 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'S', 'U', 'X', 0,
  /* 15079 */ 'Q', 'V', 'L', 'F', 'S', 'U', 'X', 0,
  /* 15087 */ 'Q', 'V', 'S', 'T', 'F', 'S', 'U', 'X', 0,
  /* 15096 */ 'S', 'T', 'W', 'U', 'X', 0,
  /* 15102 */ 'L', 'B', 'Z', 'U', 'X', 0,
  /* 15108 */ 'L', 'H', 'Z', 'U', 'X', 0,
  /* 15114 */ 'L', 'W', 'Z', 'U', 'X', 0,
  /* 15120 */ 'L', 'V', 'X', 0,
  /* 15124 */ 'S', 'T', 'V', 'X', 0,
  /* 15129 */ 'L', 'X', 'V', 'X', 0,
  /* 15134 */ 'S', 'T', 'X', 'V', 'X', 0,
  /* 15140 */ 'E', 'V', 'L', 'D', 'W', 'X', 0,
  /* 15147 */ 'E', 'V', 'S', 'T', 'D', 'W', 'X', 0,
  /* 15155 */ 'L', 'V', 'E', 'W', 'X', 0,
  /* 15161 */ 'S', 'T', 'V', 'E', 'W', 'X', 0,
  /* 15168 */ 'Q', 'V', 'S', 'T', 'F', 'I', 'W', 'X', 0,
  /* 15177 */ 'S', 'T', 'X', 'S', 'I', 'W', 'X', 0,
  /* 15185 */ 'S', 'T', 'I', 'W', 'X', 0,
  /* 15191 */ 'S', 'P', 'E', 'S', 'T', 'W', 'X', 0,
  /* 15199 */ 'L', 'X', 'S', 'I', 'B', 'Z', 'X', 0,
  /* 15207 */ 'L', 'B', 'Z', 'X', 0,
  /* 15212 */ 'L', 'X', 'S', 'I', 'H', 'Z', 'X', 0,
  /* 15220 */ 'L', 'H', 'Z', 'X', 0,
  /* 15225 */ 'Q', 'V', 'L', 'F', 'I', 'W', 'Z', 'X', 0,
  /* 15234 */ 'L', 'I', 'W', 'Z', 'X', 0,
  /* 15240 */ 'L', 'X', 'S', 'I', 'W', 'Z', 'X', 0,
  /* 15248 */ 'S', 'P', 'E', 'L', 'W', 'Z', 'X', 0,
  /* 15256 */ 'C', 'P', '_', 'C', 'O', 'P', 'Y', 0,
  /* 15264 */ 'D', 'C', 'B', 'Z', 0,
  /* 15269 */ 'L', 'B', 'Z', 0,
  /* 15273 */ 'B', 'D', 'Z', 0,
  /* 15277 */ 'E', 'F', 'D', 'C', 'T', 'S', 'I', 'D', 'Z', 0,
  /* 15287 */ 'Q', 'V', 'F', 'C', 'T', 'I', 'D', 'Z', 0,
  /* 15296 */ 'E', 'F', 'D', 'C', 'T', 'U', 'I', 'D', 'Z', 0,
  /* 15306 */ 'X', 'S', 'C', 'V', 'Q', 'P', 'S', 'D', 'Z', 0,
  /* 15316 */ 'X', 'S', 'C', 'V', 'Q', 'P', 'U', 'D', 'Z', 0,
  /* 15326 */ 'L', 'H', 'Z', 0,
  /* 15330 */ 'V', 'R', 'F', 'I', 'Z', 0,
  /* 15336 */ 'X', 'S', 'R', 'D', 'P', 'I', 'Z', 0,
  /* 15344 */ 'X', 'V', 'R', 'D', 'P', 'I', 'Z', 0,
  /* 15352 */ 'X', 'V', 'R', 'S', 'P', 'I', 'Z', 0,
  /* 15360 */ 'Q', 'V', 'F', 'R', 'I', 'Z', 0,
  /* 15367 */ 'E', 'F', 'D', 'C', 'T', 'S', 'I', 'Z', 0,
  /* 15376 */ 'E', 'F', 'S', 'C', 'T', 'S', 'I', 'Z', 0,
  /* 15385 */ 'E', 'V', 'F', 'S', 'C', 'T', 'S', 'I', 'Z', 0,
  /* 15395 */ 'E', 'F', 'D', 'C', 'T', 'U', 'I', 'Z', 0,
  /* 15404 */ 'E', 'F', 'S', 'C', 'T', 'U', 'I', 'Z', 0,
  /* 15413 */ 'E', 'V', 'F', 'S', 'C', 'T', 'U', 'I', 'Z', 0,
  /* 15423 */ 'G', '_', 'C', 'T', 'L', 'Z', 0,
  /* 15430 */ 'B', 'D', 'N', 'Z', 0,
  /* 15435 */ 'G', '_', 'C', 'T', 'T', 'Z', 0,
  /* 15442 */ 'Q', 'V', 'F', 'C', 'T', 'I', 'D', 'U', 'Z', 0,
  /* 15452 */ 'Q', 'V', 'F', 'C', 'T', 'I', 'W', 'U', 'Z', 0,
  /* 15462 */ 'Q', 'V', 'F', 'C', 'T', 'I', 'W', 'Z', 0,
  /* 15471 */ 'S', 'P', 'E', 'L', 'W', 'Z', 0,
  /* 15478 */ 'M', 'F', 'V', 'S', 'R', 'W', 'Z', 0,
  /* 15486 */ 'M', 'T', 'V', 'S', 'R', 'W', 'Z', 0,
  /* 15494 */ 'X', 'S', 'C', 'V', 'Q', 'P', 'S', 'W', 'Z', 0,
  /* 15504 */ 'X', 'S', 'C', 'V', 'Q', 'P', 'U', 'W', 'Z', 0,
  /* 15514 */ 'A', 'D', 'D', '8', 'T', 'L', 'S', '_', 0,
  /* 15523 */ 'S', 'T', 'B', 'X', 'T', 'L', 'S', '_', 0,
  /* 15532 */ 'L', 'D', 'X', 'T', 'L', 'S', '_', 0,
  /* 15540 */ 'S', 'T', 'D', 'X', 'T', 'L', 'S', '_', 0,
  /* 15549 */ 'S', 'T', 'H', 'X', 'T', 'L', 'S', '_', 0,
  /* 15558 */ 'S', 'T', 'W', 'X', 'T', 'L', 'S', '_', 0,
  /* 15567 */ 'L', 'B', 'Z', 'X', 'T', 'L', 'S', '_', 0,
  /* 15576 */ 'L', 'H', 'Z', 'X', 'T', 'L', 'S', '_', 0,
  /* 15585 */ 'L', 'W', 'Z', 'X', 'T', 'L', 'S', '_', 0,
  /* 15594 */ 'B', 'L', '8', '_', 'T', 'L', 'S', '_', 0,
  /* 15603 */ 'Q', 'V', 'F', 'C', 'F', 'I', 'D', 'b', 0,
  /* 15612 */ 'Q', 'V', 'F', 'C', 'T', 'I', 'D', 'b', 0,
  /* 15621 */ 'M', 'T', 'F', 'S', 'F', 'b', 0,
  /* 15628 */ 'Q', 'V', 'A', 'L', 'I', 'G', 'N', 'I', 'b', 0,
  /* 15638 */ 'Q', 'V', 'E', 'S', 'P', 'L', 'A', 'T', 'I', 'b', 0,
  /* 15649 */ 'Q', 'V', 'F', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 'b', 0,
  /* 15661 */ 'Q', 'V', 'F', 'S', 'E', 'L', 'b', 0,
  /* 15669 */ 'Q', 'V', 'F', 'T', 'S', 'T', 'N', 'A', 'N', 'b', 0,
  /* 15680 */ 'Q', 'V', 'F', 'C', 'M', 'P', 'E', 'Q', 'b', 0,
  /* 15690 */ 'Q', 'V', 'F', 'M', 'R', 'b', 0,
  /* 15697 */ 'Q', 'V', 'F', 'C', 'M', 'P', 'G', 'T', 'b', 0,
  /* 15707 */ 'Q', 'V', 'F', 'C', 'M', 'P', 'L', 'T', 'b', 0,
  /* 15717 */ 'Q', 'V', 'L', 'F', 'D', 'X', 'b', 0,
  /* 15725 */ 'Q', 'V', 'S', 'T', 'F', 'D', 'X', 'b', 0,
  /* 15734 */ 'Q', 'V', 'L', 'F', 'S', 'X', 'b', 0,
  /* 15742 */ 'Q', 'V', 'F', 'S', 'E', 'L', 'b', 'b', 0,
  /* 15751 */ 'L', 'D', 't', 'o', 'c', 0,
  /* 15757 */ 'L', 'W', 'Z', 't', 'o', 'c', 0,
  /* 15764 */ 'B', 'C', 'T', 'R', 'L', '8', '_', 'L', 'D', 'i', 'n', 't', 'o', '_', 't', 'o', 'c', 0,
  /* 15782 */ 'X', 'X', 'L', 'O', 'R', 'f', 0,
  /* 15789 */ 'S', 'E', 'T', 'R', 'N', 'D', 'i', 0,
  /* 15797 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 'i', 0,
  /* 15808 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 'i', 0,
  /* 15819 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 'i', 0,
  /* 15830 */ 'B', 'D', 'Z', 'L', 'A', 'm', 0,
  /* 15837 */ 'B', 'D', 'N', 'Z', 'L', 'A', 'm', 0,
  /* 15845 */ 'B', 'D', 'Z', 'A', 'm', 0,
  /* 15851 */ 'B', 'D', 'N', 'Z', 'A', 'm', 0,
  /* 15858 */ 'B', 'D', 'Z', 'L', 'R', 'L', 'm', 0,
  /* 15866 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 'm', 0,
  /* 15875 */ 'B', 'D', 'Z', 'L', 'm', 0,
  /* 15881 */ 'B', 'D', 'N', 'Z', 'L', 'm', 0,
  /* 15888 */ 'B', 'D', 'Z', 'L', 'R', 'm', 0,
  /* 15895 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'm', 0,
  /* 15903 */ 'B', 'D', 'Z', 'm', 0,
  /* 15908 */ 'B', 'D', 'N', 'Z', 'm', 0,
  /* 15914 */ 'R', 'L', 'W', 'I', 'M', 'I', 'b', 'm', 0,
  /* 15923 */ 'R', 'L', 'W', 'I', 'N', 'M', 'b', 'm', 0,
  /* 15932 */ 'R', 'L', 'W', 'N', 'M', 'b', 'm', 0,
  /* 15940 */ 'R', 'L', 'W', 'I', 'M', 'I', 'o', 'b', 'm', 0,
  /* 15950 */ 'R', 'L', 'W', 'I', 'N', 'M', 'o', 'b', 'm', 0,
  /* 15960 */ 'R', 'L', 'W', 'N', 'M', 'o', 'b', 'm', 0,
  /* 15969 */ 'B', 'C', 'C', 'T', 'R', 'L', '8', 'n', 0,
  /* 15978 */ 'B', 'C', 'C', 'T', 'R', '8', 'n', 0,
  /* 15986 */ 'B', 'C', 'n', 0,
  /* 15990 */ 'B', 'C', 'L', 'n', 0,
  /* 15995 */ 'B', 'C', 'L', 'R', 'L', 'n', 0,
  /* 16002 */ 'B', 'C', 'C', 'T', 'R', 'L', 'n', 0,
  /* 16010 */ 'B', 'C', 'L', 'R', 'n', 0,
  /* 16016 */ 'B', 'C', 'C', 'T', 'R', 'n', 0,
  /* 16023 */ 'R', 'L', 'D', 'I', 'C', 'L', '_', '3', '2', 'o', 0,
  /* 16034 */ 'E', 'X', 'T', 'S', 'W', 'S', 'L', 'I', '_', '3', '2', '_', '6', '4', 'o', 0,
  /* 16050 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', '_', '6', '4', 'o', 0,
  /* 16063 */ 'A', 'D', 'D', '4', 'o', 0,
  /* 16069 */ 'E', 'X', 'T', 'S', 'B', '8', 'o', 0,
  /* 16077 */ 'A', 'D', 'D', 'C', '8', 'o', 0,
  /* 16084 */ 'A', 'N', 'D', 'C', '8', 'o', 0,
  /* 16091 */ 'S', 'U', 'B', 'F', 'C', '8', 'o', 0,
  /* 16099 */ 'O', 'R', 'C', '8', 'o', 0,
  /* 16105 */ 'A', 'D', 'D', '8', 'o', 0,
  /* 16111 */ 'N', 'A', 'N', 'D', '8', 'o', 0,
  /* 16118 */ 'A', 'D', 'D', 'E', '8', 'o', 0,
  /* 16125 */ 'S', 'U', 'B', 'F', 'E', '8', 'o', 0,
  /* 16133 */ 'A', 'D', 'D', 'M', 'E', '8', 'o', 0,
  /* 16141 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 'o', 0,
  /* 16150 */ 'C', 'P', '_', 'P', 'A', 'S', 'T', 'E', '8', 'o', 0,
  /* 16161 */ 'A', 'D', 'D', 'Z', 'E', '8', 'o', 0,
  /* 16169 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 'o', 0,
  /* 16178 */ 'S', 'U', 'B', 'F', '8', 'o', 0,
  /* 16185 */ 'N', 'E', 'G', '8', 'o', 0,
  /* 16191 */ 'E', 'X', 'T', 'S', 'H', '8', 'o', 0,
  /* 16199 */ 'R', 'L', 'W', 'I', 'M', 'I', '8', 'o', 0,
  /* 16208 */ 'R', 'L', 'W', 'I', 'N', 'M', '8', 'o', 0,
  /* 16217 */ 'R', 'L', 'W', 'N', 'M', '8', 'o', 0,
  /* 16225 */ 'N', 'O', 'R', '8', 'o', 0,
  /* 16231 */ 'X', 'O', 'R', '8', 'o', 0,
  /* 16237 */ 'E', 'Q', 'V', '8', 'o', 0,
  /* 16243 */ 'S', 'L', 'W', '8', 'o', 0,
  /* 16249 */ 'S', 'R', 'W', '8', 'o', 0,
  /* 16255 */ 'C', 'N', 'T', 'L', 'Z', 'W', '8', 'o', 0,
  /* 16264 */ 'C', 'N', 'T', 'T', 'Z', 'W', '8', 'o', 0,
  /* 16273 */ 'V', 'C', 'M', 'P', 'N', 'E', 'B', 'o', 0,
  /* 16282 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'B', 'o', 0,
  /* 16292 */ 'E', 'X', 'T', 'S', 'B', 'o', 0,
  /* 16299 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'B', 'o', 0,
  /* 16309 */ 'F', 'S', 'U', 'B', 'o', 0,
  /* 16315 */ 'F', 'M', 'S', 'U', 'B', 'o', 0,
  /* 16322 */ 'F', 'N', 'M', 'S', 'U', 'B', 'o', 0,
  /* 16330 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'B', 'o', 0,
  /* 16340 */ 'V', 'C', 'M', 'P', 'N', 'E', 'Z', 'B', 'o', 0,
  /* 16350 */ 'A', 'D', 'D', 'C', 'o', 0,
  /* 16356 */ 'A', 'N', 'D', 'C', 'o', 0,
  /* 16362 */ 'S', 'U', 'B', 'F', 'C', 'o', 0,
  /* 16369 */ 'S', 'U', 'B', 'I', 'C', 'o', 0,
  /* 16376 */ 'A', 'D', 'D', 'I', 'C', 'o', 0,
  /* 16383 */ 'R', 'L', 'D', 'I', 'C', 'o', 0,
  /* 16390 */ 'B', 'C', 'D', 'T', 'R', 'U', 'N', 'C', 'o', 0,
  /* 16400 */ 'B', 'C', 'D', 'U', 'T', 'R', 'U', 'N', 'C', 'o', 0,
  /* 16411 */ 'O', 'R', 'C', 'o', 0,
  /* 16416 */ 'S', 'R', 'A', 'D', 'o', 0,
  /* 16422 */ 'F', 'A', 'D', 'D', 'o', 0,
  /* 16428 */ 'F', 'M', 'A', 'D', 'D', 'o', 0,
  /* 16435 */ 'F', 'N', 'M', 'A', 'D', 'D', 'o', 0,
  /* 16443 */ 'F', 'N', 'E', 'G', 'D', 'o', 0,
  /* 16450 */ 'M', 'U', 'L', 'H', 'D', 'o', 0,
  /* 16457 */ 'F', 'C', 'F', 'I', 'D', 'o', 0,
  /* 16464 */ 'F', 'C', 'T', 'I', 'D', 'o', 0,
  /* 16471 */ 'F', 'S', 'E', 'L', 'D', 'o', 0,
  /* 16478 */ 'M', 'U', 'L', 'L', 'D', 'o', 0,
  /* 16485 */ 'S', 'L', 'D', 'o', 0,
  /* 16490 */ 'F', 'R', 'I', 'M', 'D', 'o', 0,
  /* 16497 */ 'N', 'A', 'N', 'D', 'o', 0,
  /* 16503 */ 'F', 'C', 'P', 'S', 'G', 'N', 'D', 'o', 0,
  /* 16512 */ 'F', 'R', 'I', 'N', 'D', 'o', 0,
  /* 16519 */ 'F', 'R', 'I', 'P', 'D', 'o', 0,
  /* 16526 */ 'S', 'R', 'D', 'o', 0,
  /* 16531 */ 'F', 'A', 'B', 'S', 'D', 'o', 0,
  /* 16538 */ 'F', 'N', 'A', 'B', 'S', 'D', 'o', 0,
  /* 16546 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'D', 'o', 0,
  /* 16556 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'D', 'o', 0,
  /* 16566 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'D', 'o', 0,
  /* 16576 */ 'D', 'I', 'V', 'D', 'o', 0,
  /* 16582 */ 'F', 'R', 'I', 'Z', 'D', 'o', 0,
  /* 16589 */ 'C', 'N', 'T', 'L', 'Z', 'D', 'o', 0,
  /* 16597 */ 'C', 'N', 'T', 'T', 'Z', 'D', 'o', 0,
  /* 16605 */ 'A', 'D', 'D', 'E', 'o', 0,
  /* 16611 */ 'D', 'I', 'V', 'D', 'E', 'o', 0,
  /* 16618 */ 'S', 'L', 'B', 'F', 'E', 'E', 'o', 0,
  /* 16626 */ 'S', 'U', 'B', 'F', 'E', 'o', 0,
  /* 16633 */ 'A', 'D', 'D', 'M', 'E', 'o', 0,
  /* 16640 */ 'S', 'U', 'B', 'F', 'M', 'E', 'o', 0,
  /* 16648 */ 'F', 'R', 'E', 'o', 0,
  /* 16653 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'o', 0,
  /* 16662 */ 'C', 'P', '_', 'P', 'A', 'S', 'T', 'E', 'o', 0,
  /* 16672 */ 'D', 'I', 'V', 'W', 'E', 'o', 0,
  /* 16679 */ 'A', 'D', 'D', 'Z', 'E', 'o', 0,
  /* 16686 */ 'S', 'U', 'B', 'F', 'Z', 'E', 'o', 0,
  /* 16694 */ 'S', 'U', 'B', 'F', 'o', 0,
  /* 16700 */ 'M', 'T', 'F', 'S', 'F', 'o', 0,
  /* 16707 */ 'N', 'E', 'G', 'o', 0,
  /* 16712 */ 'V', 'C', 'M', 'P', 'N', 'E', 'H', 'o', 0,
  /* 16721 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'H', 'o', 0,
  /* 16731 */ 'E', 'X', 'T', 'S', 'H', 'o', 0,
  /* 16738 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'H', 'o', 0,
  /* 16748 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'H', 'o', 0,
  /* 16758 */ 'V', 'C', 'M', 'P', 'N', 'E', 'Z', 'H', 'o', 0,
  /* 16768 */ 'S', 'R', 'A', 'D', 'I', 'o', 0,
  /* 16775 */ 'C', 'L', 'R', 'L', 'S', 'L', 'D', 'I', 'o', 0,
  /* 16785 */ 'E', 'X', 'T', 'L', 'D', 'I', 'o', 0,
  /* 16793 */ 'A', 'N', 'D', 'I', 'o', 0,
  /* 16799 */ 'C', 'L', 'R', 'R', 'D', 'I', 'o', 0,
  /* 16807 */ 'I', 'N', 'S', 'R', 'D', 'I', 'o', 0,
  /* 16815 */ 'R', 'O', 'T', 'R', 'D', 'I', 'o', 0,
  /* 16823 */ 'E', 'X', 'T', 'R', 'D', 'I', 'o', 0,
  /* 16831 */ 'M', 'T', 'F', 'S', 'F', 'I', 'o', 0,
  /* 16839 */ 'E', 'X', 'T', 'S', 'W', 'S', 'L', 'I', 'o', 0,
  /* 16849 */ 'R', 'L', 'D', 'I', 'M', 'I', 'o', 0,
  /* 16857 */ 'R', 'L', 'W', 'I', 'M', 'I', 'o', 0,
  /* 16865 */ 'S', 'R', 'A', 'W', 'I', 'o', 0,
  /* 16872 */ 'C', 'L', 'R', 'L', 'S', 'L', 'W', 'I', 'o', 0,
  /* 16882 */ 'I', 'N', 'S', 'L', 'W', 'I', 'o', 0,
  /* 16890 */ 'E', 'X', 'T', 'L', 'W', 'I', 'o', 0,
  /* 16898 */ 'C', 'L', 'R', 'R', 'W', 'I', 'o', 0,
  /* 16906 */ 'I', 'N', 'S', 'R', 'W', 'I', 'o', 0,
  /* 16914 */ 'R', 'O', 'T', 'R', 'W', 'I', 'o', 0,
  /* 16922 */ 'E', 'X', 'T', 'R', 'W', 'I', 'o', 0,
  /* 16930 */ 'R', 'L', 'D', 'C', 'L', 'o', 0,
  /* 16937 */ 'R', 'L', 'D', 'I', 'C', 'L', 'o', 0,
  /* 16945 */ 'F', 'M', 'U', 'L', 'o', 0,
  /* 16951 */ 'R', 'L', 'W', 'I', 'N', 'M', 'o', 0,
  /* 16959 */ 'R', 'L', 'W', 'N', 'M', 'o', 0,
  /* 16966 */ 'B', 'C', 'D', 'C', 'F', 'N', 'o', 0,
  /* 16974 */ 'B', 'C', 'D', 'C', 'P', 'S', 'G', 'N', 'o', 0,
  /* 16984 */ 'B', 'C', 'D', 'S', 'E', 'T', 'S', 'G', 'N', 'o', 0,
  /* 16995 */ 'B', 'C', 'D', 'C', 'T', 'N', 'o', 0,
  /* 17003 */ 'A', 'D', 'D', '4', 'O', 'o', 0,
  /* 17010 */ 'A', 'D', 'D', 'C', '8', 'O', 'o', 0,
  /* 17018 */ 'S', 'U', 'B', 'F', 'C', '8', 'O', 'o', 0,
  /* 17027 */ 'A', 'D', 'D', '8', 'O', 'o', 0,
  /* 17034 */ 'A', 'D', 'D', 'E', '8', 'O', 'o', 0,
  /* 17042 */ 'S', 'U', 'B', 'F', 'E', '8', 'O', 'o', 0,
  /* 17051 */ 'A', 'D', 'D', 'M', 'E', '8', 'O', 'o', 0,
  /* 17060 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 'O', 'o', 0,
  /* 17070 */ 'A', 'D', 'D', 'Z', 'E', '8', 'O', 'o', 0,
  /* 17079 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 'O', 'o', 0,
  /* 17089 */ 'S', 'U', 'B', 'F', '8', 'O', 'o', 0,
  /* 17097 */ 'N', 'E', 'G', '8', 'O', 'o', 0,
  /* 17104 */ 'A', 'D', 'D', 'C', 'O', 'o', 0,
  /* 17111 */ 'S', 'U', 'B', 'F', 'C', 'O', 'o', 0,
  /* 17119 */ 'M', 'U', 'L', 'L', 'D', 'O', 'o', 0,
  /* 17127 */ 'D', 'I', 'V', 'D', 'O', 'o', 0,
  /* 17134 */ 'A', 'D', 'D', 'E', 'O', 'o', 0,
  /* 17141 */ 'D', 'I', 'V', 'D', 'E', 'O', 'o', 0,
  /* 17149 */ 'S', 'U', 'B', 'F', 'E', 'O', 'o', 0,
  /* 17157 */ 'A', 'D', 'D', 'M', 'E', 'O', 'o', 0,
  /* 17165 */ 'S', 'U', 'B', 'F', 'M', 'E', 'O', 'o', 0,
  /* 17174 */ 'D', 'I', 'V', 'W', 'E', 'O', 'o', 0,
  /* 17182 */ 'A', 'D', 'D', 'Z', 'E', 'O', 'o', 0,
  /* 17190 */ 'S', 'U', 'B', 'F', 'Z', 'E', 'O', 'o', 0,
  /* 17199 */ 'S', 'U', 'B', 'F', 'O', 'o', 0,
  /* 17206 */ 'N', 'E', 'G', 'O', 'o', 0,
  /* 17212 */ 'D', 'I', 'V', 'D', 'U', 'O', 'o', 0,
  /* 17220 */ 'D', 'I', 'V', 'D', 'E', 'U', 'O', 'o', 0,
  /* 17229 */ 'D', 'I', 'V', 'W', 'E', 'U', 'O', 'o', 0,
  /* 17238 */ 'D', 'I', 'V', 'W', 'U', 'O', 'o', 0,
  /* 17246 */ 'M', 'U', 'L', 'L', 'W', 'O', 'o', 0,
  /* 17254 */ 'D', 'I', 'V', 'W', 'O', 'o', 0,
  /* 17261 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'D', 'P', 'o', 0,
  /* 17272 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'D', 'P', 'o', 0,
  /* 17283 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'D', 'P', 'o', 0,
  /* 17294 */ 'V', 'C', 'M', 'P', 'B', 'F', 'P', 'o', 0,
  /* 17303 */ 'V', 'C', 'M', 'P', 'G', 'E', 'F', 'P', 'o', 0,
  /* 17313 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'F', 'P', 'o', 0,
  /* 17323 */ 'V', 'C', 'M', 'P', 'G', 'T', 'F', 'P', 'o', 0,
  /* 17333 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'S', 'P', 'o', 0,
  /* 17344 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'S', 'P', 'o', 0,
  /* 17355 */ 'F', 'R', 'S', 'P', 'o', 0,
  /* 17361 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'P', 'o', 0,
  /* 17372 */ 'B', 'C', 'D', 'C', 'F', 'S', 'Q', 'o', 0,
  /* 17381 */ 'B', 'C', 'D', 'C', 'T', 'S', 'Q', 'o', 0,
  /* 17390 */ 'R', 'L', 'D', 'C', 'R', 'o', 0,
  /* 17397 */ 'R', 'L', 'D', 'I', 'C', 'R', 'o', 0,
  /* 17405 */ 'F', 'M', 'R', 'o', 0,
  /* 17410 */ 'N', 'O', 'R', 'o', 0,
  /* 17415 */ 'X', 'O', 'R', 'o', 0,
  /* 17420 */ 'B', 'C', 'D', 'S', 'R', 'o', 0,
  /* 17427 */ 'F', 'S', 'U', 'B', 'S', 'o', 0,
  /* 17434 */ 'F', 'M', 'S', 'U', 'B', 'S', 'o', 0,
  /* 17442 */ 'F', 'N', 'M', 'S', 'U', 'B', 'S', 'o', 0,
  /* 17451 */ 'B', 'C', 'D', 'S', 'o', 0,
  /* 17457 */ 'F', 'A', 'D', 'D', 'S', 'o', 0,
  /* 17464 */ 'F', 'M', 'A', 'D', 'D', 'S', 'o', 0,
  /* 17472 */ 'F', 'N', 'M', 'A', 'D', 'D', 'S', 'o', 0,
  /* 17481 */ 'F', 'C', 'F', 'I', 'D', 'S', 'o', 0,
  /* 17489 */ 'F', 'R', 'E', 'S', 'o', 0,
  /* 17495 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 'o', 0,
  /* 17505 */ 'M', 'F', 'F', 'S', 'o', 0,
  /* 17511 */ 'F', 'N', 'E', 'G', 'S', 'o', 0,
  /* 17518 */ 'A', 'N', 'D', 'I', 'S', 'o', 0,
  /* 17525 */ 'F', 'S', 'E', 'L', 'S', 'o', 0,
  /* 17532 */ 'F', 'M', 'U', 'L', 'S', 'o', 0,
  /* 17539 */ 'F', 'R', 'I', 'M', 'S', 'o', 0,
  /* 17546 */ 'F', 'C', 'P', 'S', 'G', 'N', 'S', 'o', 0,
  /* 17555 */ 'F', 'R', 'I', 'N', 'S', 'o', 0,
  /* 17562 */ 'F', 'R', 'I', 'P', 'S', 'o', 0,
  /* 17569 */ 'F', 'A', 'B', 'S', 'S', 'o', 0,
  /* 17576 */ 'F', 'N', 'A', 'B', 'S', 'S', 'o', 0,
  /* 17584 */ 'F', 'S', 'Q', 'R', 'T', 'S', 'o', 0,
  /* 17592 */ 'B', 'C', 'D', 'U', 'S', 'o', 0,
  /* 17599 */ 'F', 'C', 'F', 'I', 'D', 'U', 'S', 'o', 0,
  /* 17608 */ 'F', 'D', 'I', 'V', 'S', 'o', 0,
  /* 17615 */ 'F', 'R', 'I', 'Z', 'S', 'o', 0,
  /* 17622 */ 'F', 'S', 'Q', 'R', 'T', 'o', 0,
  /* 17629 */ 'M', 'U', 'L', 'H', 'D', 'U', 'o', 0,
  /* 17637 */ 'F', 'C', 'F', 'I', 'D', 'U', 'o', 0,
  /* 17645 */ 'F', 'C', 'T', 'I', 'D', 'U', 'o', 0,
  /* 17653 */ 'D', 'I', 'V', 'D', 'U', 'o', 0,
  /* 17660 */ 'D', 'I', 'V', 'D', 'E', 'U', 'o', 0,
  /* 17668 */ 'D', 'I', 'V', 'W', 'E', 'U', 'o', 0,
  /* 17676 */ 'M', 'U', 'L', 'H', 'W', 'U', 'o', 0,
  /* 17684 */ 'F', 'C', 'T', 'I', 'W', 'U', 'o', 0,
  /* 17692 */ 'D', 'I', 'V', 'W', 'U', 'o', 0,
  /* 17699 */ 'F', 'D', 'I', 'V', 'o', 0,
  /* 17705 */ 'E', 'Q', 'V', 'o', 0,
  /* 17710 */ 'S', 'R', 'A', 'W', 'o', 0,
  /* 17716 */ 'V', 'C', 'M', 'P', 'N', 'E', 'W', 'o', 0,
  /* 17725 */ 'M', 'U', 'L', 'H', 'W', 'o', 0,
  /* 17732 */ 'F', 'C', 'T', 'I', 'W', 'o', 0,
  /* 17739 */ 'M', 'U', 'L', 'L', 'W', 'o', 0,
  /* 17746 */ 'S', 'L', 'W', 'o', 0,
  /* 17751 */ 'S', 'R', 'W', 'o', 0,
  /* 17756 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'W', 'o', 0,
  /* 17766 */ 'E', 'X', 'T', 'S', 'W', 'o', 0,
  /* 17773 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'W', 'o', 0,
  /* 17783 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'W', 'o', 0,
  /* 17793 */ 'D', 'I', 'V', 'W', 'o', 0,
  /* 17799 */ 'V', 'C', 'M', 'P', 'N', 'E', 'Z', 'W', 'o', 0,
  /* 17809 */ 'C', 'N', 'T', 'L', 'Z', 'W', 'o', 0,
  /* 17817 */ 'C', 'N', 'T', 'T', 'Z', 'W', 'o', 0,
  /* 17825 */ 'F', 'C', 'T', 'I', 'D', 'Z', 'o', 0,
  /* 17833 */ 'B', 'C', 'D', 'C', 'F', 'Z', 'o', 0,
  /* 17841 */ 'B', 'C', 'D', 'C', 'T', 'Z', 'o', 0,
  /* 17849 */ 'F', 'C', 'T', 'I', 'D', 'U', 'Z', 'o', 0,
  /* 17858 */ 'F', 'C', 'T', 'I', 'W', 'U', 'Z', 'o', 0,
  /* 17867 */ 'F', 'C', 'T', 'I', 'W', 'Z', 'o', 0,
  /* 17875 */ 'B', 'D', 'Z', 'L', 'A', 'p', 0,
  /* 17882 */ 'B', 'D', 'N', 'Z', 'L', 'A', 'p', 0,
  /* 17890 */ 'B', 'D', 'Z', 'A', 'p', 0,
  /* 17896 */ 'B', 'D', 'N', 'Z', 'A', 'p', 0,
  /* 17903 */ 'B', 'D', 'Z', 'L', 'R', 'L', 'p', 0,
  /* 17911 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 'p', 0,
  /* 17920 */ 'B', 'D', 'Z', 'L', 'p', 0,
  /* 17926 */ 'B', 'D', 'N', 'Z', 'L', 'p', 0,
  /* 17933 */ 'B', 'D', 'Z', 'L', 'R', 'p', 0,
  /* 17940 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'p', 0,
  /* 17948 */ 'B', 'D', 'Z', 'p', 0,
  /* 17953 */ 'B', 'D', 'N', 'Z', 'p', 0,
  /* 17959 */ 'M', 'T', 'C', 'T', 'R', '8', 'l', 'o', 'o', 'p', 0,
  /* 17970 */ 'M', 'T', 'C', 'T', 'R', 'l', 'o', 'o', 'p', 0,
  /* 17980 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 0,
  /* 17994 */ 'V', 'S', 'P', 'L', 'T', 'B', 's', 0,
  /* 18002 */ 'V', 'E', 'X', 'T', 'S', 'B', '2', 'D', 's', 0,
  /* 18012 */ 'V', 'E', 'X', 'T', 'S', 'H', '2', 'D', 's', 0,
  /* 18022 */ 'V', 'E', 'X', 'T', 'S', 'W', '2', 'D', 's', 0,
  /* 18032 */ 'Q', 'V', 'F', 'N', 'E', 'G', 's', 0,
  /* 18040 */ 'V', 'S', 'P', 'L', 'T', 'H', 's', 0,
  /* 18048 */ 'X', 'X', 'P', 'E', 'R', 'M', 'D', 'I', 's', 0,
  /* 18058 */ 'Q', 'V', 'A', 'L', 'I', 'G', 'N', 'I', 's', 0,
  /* 18068 */ 'Q', 'V', 'E', 'S', 'P', 'L', 'A', 'T', 'I', 's', 0,
  /* 18079 */ 'X', 'X', 'S', 'L', 'D', 'W', 'I', 's', 0,
  /* 18088 */ 'Q', 'V', 'F', 'L', 'O', 'G', 'I', 'C', 'A', 'L', 's', 0,
  /* 18100 */ 'Q', 'V', 'F', 'R', 'I', 'M', 's', 0,
  /* 18108 */ 'Q', 'V', 'F', 'P', 'E', 'R', 'M', 's', 0,
  /* 18117 */ 'Q', 'V', 'F', 'C', 'P', 'S', 'G', 'N', 's', 0,
  /* 18127 */ 'Q', 'V', 'F', 'R', 'I', 'N', 's', 0,
  /* 18135 */ 'Q', 'V', 'F', 'R', 'I', 'P', 's', 0,
  /* 18143 */ 'Q', 'V', 'F', 'R', 'S', 'P', 's', 0,
  /* 18151 */ 'Q', 'V', 'F', 'M', 'R', 's', 0,
  /* 18158 */ 'Q', 'V', 'F', 'A', 'B', 'S', 's', 0,
  /* 18166 */ 'Q', 'V', 'F', 'N', 'A', 'B', 'S', 's', 0,
  /* 18175 */ 'Q', 'V', 'F', 'S', 'U', 'B', 'S', 's', 0,
  /* 18184 */ 'Q', 'V', 'F', 'M', 'S', 'U', 'B', 'S', 's', 0,
  /* 18194 */ 'Q', 'V', 'F', 'N', 'M', 'S', 'U', 'B', 'S', 's', 0,
  /* 18205 */ 'Q', 'V', 'F', 'A', 'D', 'D', 'S', 's', 0,
  /* 18214 */ 'Q', 'V', 'F', 'M', 'A', 'D', 'D', 'S', 's', 0,
  /* 18224 */ 'Q', 'V', 'F', 'N', 'M', 'A', 'D', 'D', 'S', 's', 0,
  /* 18235 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'X', 'D', 'S', 's', 0,
  /* 18247 */ 'X', 'S', 'C', 'V', 'D', 'P', 'U', 'X', 'D', 'S', 's', 0,
  /* 18259 */ 'Q', 'V', 'F', 'R', 'E', 'S', 's', 0,
  /* 18267 */ 'Q', 'V', 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 's', 0,
  /* 18279 */ 'Q', 'V', 'F', 'M', 'U', 'L', 'S', 's', 0,
  /* 18288 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'X', 'W', 'S', 's', 0,
  /* 18300 */ 'X', 'S', 'C', 'V', 'D', 'P', 'U', 'X', 'W', 'S', 's', 0,
  /* 18312 */ 'V', 'E', 'X', 'T', 'S', 'B', '2', 'W', 's', 0,
  /* 18322 */ 'V', 'E', 'X', 'T', 'S', 'H', '2', 'W', 's', 0,
  /* 18332 */ 'X', 'X', 'S', 'P', 'L', 'T', 'W', 's', 0,
  /* 18341 */ 'Q', 'V', 'L', 'F', 'C', 'S', 'X', 's', 0,
  /* 18350 */ 'Q', 'V', 'S', 'T', 'F', 'C', 'S', 'X', 's', 0,
  /* 18360 */ 'Q', 'V', 'L', 'F', 'S', 'X', 's', 0,
  /* 18368 */ 'Q', 'V', 'S', 'T', 'F', 'S', 'X', 's', 0,
  /* 18377 */ 'Q', 'V', 'S', 'T', 'F', 'S', 'U', 'X', 's', 0,
  /* 18387 */ 'Q', 'V', 'F', 'R', 'I', 'Z', 's', 0,
  /* 18395 */ 'Q', 'V', 'F', 'S', 'E', 'L', 'b', 's', 0,
  /* 18404 */ 'Q', 'V', 'F', 'T', 'S', 'T', 'N', 'A', 'N', 'b', 's', 0,
  /* 18416 */ 'Q', 'V', 'F', 'C', 'M', 'P', 'E', 'Q', 'b', 's', 0,
  /* 18427 */ 'Q', 'V', 'F', 'C', 'M', 'P', 'G', 'T', 'b', 's', 0,
  /* 18438 */ 'Q', 'V', 'F', 'C', 'M', 'P', 'L', 'T', 'b', 's', 0,
  /* 18449 */ 'B', 'C', 'L', 'a', 'l', 'w', 'a', 'y', 's', 0,
  /* 18459 */ 'g', 'B', 'C', 'A', 'a', 't', 0,
  /* 18466 */ 'g', 'B', 'C', 'L', 'A', 'a', 't', 0,
  /* 18474 */ 'g', 'B', 'C', 'a', 't', 0,
  /* 18480 */ 'g', 'B', 'C', 'L', 'a', 't', 0,
  /* 18487 */ 'Q', 'V', 'L', 'P', 'C', 'L', 'S', 'X', 'i', 'n', 't', 0,
  /* 18499 */ 'M', 'F', 'V', 'R', 'S', 'A', 'V', 'E', 'v', 0,
  /* 18509 */ 'M', 'T', 'V', 'R', 'S', 'A', 'V', 'E', 'v', 0,
  /* 18519 */ 'S', 'T', 'X', 'S', 'I', 'B', 'X', 'v', 0,
  /* 18528 */ 'S', 'T', 'X', 'S', 'I', 'H', 'X', 'v', 0,
  /* 18537 */ 'L', 'A', 'x', 0,
  /* 18541 */ 'C', 'P', '_', 'P', 'A', 'S', 'T', 'E', 'x', 0,
  /* 18551 */ 'D', 'C', 'B', 'F', 'x', 0,
  /* 18557 */ 'D', 'C', 'B', 'T', 'x', 0,
  /* 18563 */ 'D', 'C', 'B', 'T', 'S', 'T', 'x', 0,
  /* 18571 */ 'C', 'P', '_', 'C', 'O', 'P', 'Y', 'x', 0,
  /* 18580 */ 'X', 'X', 'L', 'X', 'O', 'R', 'z', 0,
  /* 18588 */ 'X', 'X', 'L', 'X', 'O', 'R', 'd', 'p', 'z', 0,
  /* 18598 */ 'X', 'X', 'L', 'X', 'O', 'R', 's', 'p', 'z', 0,
  /* 18608 */ 'F', 'A', 'D', 'D', 'r', 't', 'z', 0,
};

extern const unsigned PPCInstrNameIndices[] = {
    6177U, 7469U, 10374U, 7800U, 6784U, 6765U, 6793U, 6968U, 
    5571U, 5586U, 5308U, 5600U, 11634U, 5126U, 6774U, 4890U, 
    15259U, 5022U, 12608U, 4569U, 8312U, 6949U, 12516U, 4641U, 
    12505U, 5042U, 9384U, 9371U, 10535U, 12139U, 12345U, 6881U, 
    6928U, 6901U, 6817U, 4275U, 3564U, 7097U, 13058U, 13071U, 
    7289U, 7296U, 4542U, 10795U, 10773U, 5306U, 6175U, 14421U, 
    5136U, 12091U, 11249U, 12623U, 11266U, 10708U, 3793U, 11617U, 
    12527U, 10889U, 12663U, 3767U, 4612U, 4151U, 4129U, 4140U, 
    5092U, 11672U, 5614U, 5631U, 4281U, 3570U, 4548U, 4513U, 
    10800U, 10779U, 14221U, 7756U, 14204U, 7739U, 4882U, 4596U, 
    12110U, 3733U, 11718U, 12821U, 3785U, 12494U, 12482U, 12598U, 
    5655U, 12814U, 12830U, 6867U, 10567U, 10560U, 9327U, 9320U, 
    12101U, 8006U, 4918U, 7977U, 4874U, 7998U, 4910U, 7969U, 
    4866U, 8150U, 8142U, 5730U, 5722U, 4192U, 3525U, 7067U, 
    2984U, 13036U, 7282U, 13808U, 10164U, 652U, 5648U, 644U, 
    0U, 5543U, 12806U, 3757U, 6402U, 6489U, 9215U, 9224U, 
    10914U, 7691U, 5244U, 7517U, 7527U, 4932U, 4947U, 7495U, 
    7506U, 9075U, 6717U, 7725U, 14190U, 7732U, 14197U, 10369U, 
    12369U, 12397U, 12376U, 10723U, 15435U, 5288U, 15423U, 5270U, 
    9358U, 8330U, 6873U, 11596U, 7793U, 12648U, 10694U, 12538U, 
    12546U, 12673U, 10481U, 5009U, 1573U, 6062U, 16775U, 6551U, 
    16872U, 6093U, 16799U, 6587U, 16898U, 12739U, 18571U, 12715U, 
    18541U, 6861U, 9313U, 18551U, 12123U, 11136U, 12130U, 11143U, 
    12791U, 18563U, 12780U, 18557U, 553U, 1001U, 573U, 1021U, 
    6071U, 16785U, 6574U, 16890U, 6114U, 16823U, 6608U, 16922U, 
    6560U, 16882U, 6100U, 16807U, 6594U, 16906U, 18537U, 14254U, 
    15234U, 15914U, 15940U, 15923U, 15950U, 15932U, 15960U, 6107U, 
    16815U, 6601U, 16914U, 6066U, 16779U, 6555U, 16876U, 4448U, 
    14379U, 12766U, 14959U, 6102U, 16809U, 6596U, 16908U, 15185U, 
    5984U, 3684U, 16369U, 11394U, 11400U, 563U, 1011U, 584U, 
    1032U, 1078U, 7880U, 17003U, 11446U, 16063U, 1554U, 7901U, 
    17027U, 11454U, 15514U, 16105U, 3642U, 1505U, 7886U, 17010U, 
    16077U, 7985U, 17104U, 16350U, 4913U, 1581U, 7907U, 17034U, 
    16118U, 8027U, 17134U, 16605U, 6045U, 1703U, 3690U, 1524U, 
    16376U, 11416U, 2141U, 2753U, 64U, 2737U, 2711U, 2724U, 
    2700U, 7220U, 358U, 7186U, 318U, 10451U, 372U, 7197U, 
    331U, 10466U, 389U, 7177U, 5029U, 1594U, 7922U, 17051U, 
    16133U, 8047U, 17157U, 16633U, 11408U, 5231U, 1619U, 7939U, 
    17070U, 16161U, 8069U, 17182U, 16679U, 7863U, 10149U, 4487U, 
    1568U, 16112U, 3650U, 1511U, 16084U, 16356U, 17518U, 2468U, 
    16793U, 2461U, 12315U, 2175U, 12330U, 2191U, 16498U, 1319U, 
    218U, 805U, 1874U, 1201U, 100U, 687U, 1762U, 1242U, 
    141U, 728U, 1801U, 1399U, 298U, 885U, 1960U, 1283U, 
    182U, 769U, 1840U, 1221U, 120U, 707U, 1781U, 1359U, 
    258U, 845U, 1912U, 1181U, 80U, 667U, 1730U, 1378U, 
    277U, 864U, 1940U, 1262U, 161U, 748U, 1820U, 1339U, 
    238U, 825U, 1893U, 1303U, 202U, 789U, 1859U, 7858U, 
    3207U, 2590U, 3635U, 3638U, 2613U, 10870U, 2119U, 7034U, 
    2004U, 6747U, 2965U, 10584U, 6998U, 10864U, 2112U, 15978U, 
    7027U, 1996U, 15969U, 16002U, 16016U, 16966U, 17372U, 17833U, 
    16974U, 16995U, 17381U, 17841U, 16984U, 17420U, 17451U, 16390U, 
    17592U, 16400U, 6743U, 10579U, 6992U, 15995U, 16010U, 18449U, 
    15990U, 10858U, 2106U, 7020U, 1989U, 15764U, 15986U, 15430U, 
    2414U, 3195U, 15851U, 17896U, 7164U, 2977U, 15837U, 17882U, 
    10606U, 2058U, 7012U, 15866U, 17911U, 15895U, 17940U, 15881U, 
    17926U, 15908U, 17953U, 15273U, 2404U, 3190U, 15845U, 17890U, 
    7159U, 2971U, 15830U, 17875U, 10600U, 2051U, 7005U, 15858U, 
    17903U, 15888U, 17933U, 15875U, 17920U, 15903U, 17948U, 6739U, 
    1979U, 9343U, 11547U, 11532U, 15594U, 2955U, 1456U, 9334U, 
    10574U, 2034U, 6986U, 9351U, 11540U, 4469U, 3751U, 3306U, 
    3294U, 1468U, 4636U, 6087U, 3299U, 4424U, 6055U, 13574U, 
    6537U, 3314U, 1474U, 13815U, 6581U, 4838U, 16589U, 14103U, 
    2269U, 16255U, 17809U, 4851U, 16597U, 14116U, 2277U, 16264U, 
    17817U, 12639U, 15256U, 2390U, 5117U, 1609U, 16150U, 16662U, 
    12175U, 12196U, 4530U, 3655U, 13090U, 4499U, 10682U, 10703U, 
    3949U, 12213U, 12205U, 10761U, 9059U, 7836U, 2588U, 5260U, 
    9068U, 5974U, 12729U, 9103U, 12081U, 9096U, 12753U, 9111U, 
    15264U, 9120U, 7153U, 9088U, 5989U, 4821U, 4926U, 8033U, 
    17141U, 12906U, 8268U, 17220U, 17660U, 16611U, 8021U, 17127U, 
    12900U, 8261U, 17212U, 17653U, 16576U, 14081U, 5217U, 8062U, 
    17174U, 12913U, 8276U, 17229U, 17668U, 16672U, 8298U, 17254U, 
    13000U, 8284U, 17238U, 17692U, 17793U, 11668U, 6961U, 12735U, 
    905U, 12760U, 911U, 12799U, 926U, 12786U, 919U, 3850U, 
    1539U, 12182U, 2160U, 10900U, 4178U, 11281U, 5381U, 6377U, 
    4373U, 5472U, 6464U, 4390U, 10187U, 12219U, 12417U, 5447U, 
    6411U, 15277U, 15367U, 5497U, 6498U, 15296U, 15395U, 13029U, 
    7053U, 10921U, 5529U, 3511U, 10232U, 12256U, 12454U, 10954U, 
    4260U, 4318U, 5389U, 6385U, 5480U, 6472U, 10205U, 12237U, 
    12435U, 5455U, 6419U, 15376U, 5505U, 6506U, 15404U, 13043U, 
    7074U, 10937U, 5550U, 3549U, 10241U, 12265U, 12463U, 595U, 
    1043U, 613U, 1061U, 17980U, 13086U, 2249U, 16237U, 17705U, 
    10969U, 13537U, 13182U, 13304U, 13243U, 13365U, 13451U, 4536U, 
    3662U, 10224U, 11745U, 12952U, 11754U, 12961U, 13877U, 14101U, 
    11905U, 12998U, 13096U, 3403U, 5835U, 10961U, 4267U, 5397U, 
    6393U, 5488U, 6480U, 10214U, 12246U, 12444U, 5463U, 6427U, 
    15385U, 5513U, 6514U, 15413U, 13050U, 7081U, 10945U, 5557U, 
    3556U, 10250U, 12274U, 12472U, 4297U, 14340U, 5677U, 14461U, 
    13458U, 15140U, 12010U, 14894U, 12033U, 14919U, 12046U, 14933U, 
    4982U, 14435U, 11603U, 14869U, 12933U, 15051U, 12022U, 14907U, 
    12059U, 14947U, 6153U, 8125U, 8115U, 6163U, 2476U, 7569U, 
    2520U, 7613U, 2554U, 7647U, 5321U, 2618U, 13134U, 13609U, 
    6223U, 2779U, 13194U, 13657U, 5412U, 2657U, 13158U, 13633U, 
    13316U, 13729U, 6258U, 2818U, 13255U, 13693U, 13377U, 13765U, 
    2488U, 7581U, 2532U, 7625U, 2566U, 7659U, 5339U, 2638U, 
    13146U, 13621U, 6241U, 2799U, 13231U, 13681U, 5430U, 2677U, 
    13170U, 13645U, 13353U, 13753U, 6285U, 2848U, 13292U, 13717U, 
    13414U, 13789U, 2990U, 5330U, 2628U, 6232U, 2789U, 5421U, 
    2667U, 6267U, 2828U, 13219U, 13669U, 13341U, 13741U, 6276U, 
    2838U, 13280U, 13705U, 13402U, 13777U, 5348U, 2648U, 2500U, 
    7593U, 6250U, 2809U, 2544U, 7637U, 5439U, 2687U, 2510U, 
    7603U, 6294U, 2858U, 2578U, 7671U, 4506U, 5565U, 10688U, 
    10740U, 3955U, 13580U, 6544U, 13464U, 6849U, 13586U, 6567U, 
    6143U, 6446U, 11432U, 12925U, 11841U, 12986U, 4311U, 14347U, 
    5683U, 14468U, 13471U, 15147U, 4989U, 14443U, 8095U, 14603U, 
    5223U, 14452U, 8304U, 14612U, 13206U, 13328U, 13267U, 13389U, 
    13493U, 13501U, 10767U, 3405U, 1481U, 935U, 16069U, 16292U, 
    5837U, 1691U, 948U, 16191U, 16731U, 13910U, 6193U, 961U, 
    16034U, 16839U, 536U, 989U, 16050U, 17766U, 8103U, 4691U, 
    16531U, 11651U, 17569U, 4187U, 11054U, 17457U, 16422U, 18608U, 
    4361U, 11129U, 17481U, 12875U, 11772U, 17599U, 17637U, 16457U, 
    4789U, 11812U, 4582U, 16503U, 11582U, 17546U, 4384U, 12884U, 
    15444U, 17849U, 17645U, 15289U, 17825U, 16464U, 13547U, 12979U, 
    15454U, 17858U, 17684U, 15464U, 17867U, 17732U, 13038U, 11835U, 
    17608U, 17699U, 4201U, 11062U, 17464U, 16428U, 10638U, 17405U, 
    3534U, 11035U, 17434U, 16315U, 7062U, 11561U, 17532U, 16945U, 
    4697U, 16538U, 11657U, 17576U, 4334U, 16443U, 11308U, 17511U, 
    4209U, 11071U, 17472U, 16435U, 3542U, 11044U, 17442U, 16322U, 
    5088U, 11233U, 17489U, 16648U, 4462U, 16490U, 11576U, 17539U, 
    4590U, 16512U, 11590U, 17555U, 4630U, 16519U, 11611U, 17562U, 
    4826U, 16582U, 11993U, 17615U, 10017U, 17355U, 5109U, 11240U, 
    17495U, 16653U, 4412U, 16471U, 11440U, 17525U, 12650U, 11763U, 
    17584U, 17622U, 3520U, 11027U, 17427U, 16309U, 13065U, 12656U, 
    10507U, 421U, 10494U, 406U, 4367U, 5979U, 9081U, 3745U, 
    10260U, 12086U, 11462U, 5995U, 6844U, 1983U, 3838U, 2956U, 
    14712U, 7114U, 14621U, 15269U, 2399U, 14536U, 13006U, 2231U, 
    15102U, 2345U, 15207U, 2372U, 11508U, 15567U, 503U, 4402U, 
    14718U, 7121U, 11999U, 14736U, 14509U, 14592U, 12891U, 15028U, 
    14375U, 11477U, 15532U, 7208U, 344U, 15751U, 2600U, 12580U, 
    6455U, 7170U, 4325U, 14634U, 12847U, 15013U, 14357U, 14247U, 
    15227U, 11293U, 12941U, 15081U, 14847U, 2696U, 1451U, 14724U, 
    7128U, 12837U, 2207U, 14974U, 2317U, 14185U, 2285U, 14749U, 
    2303U, 14649U, 15326U, 2409U, 14543U, 13011U, 2237U, 15108U, 
    2352U, 15220U, 2378U, 11516U, 15576U, 514U, 6184U, 1712U, 
    11422U, 2148U, 13592U, 6615U, 14273U, 14476U, 15155U, 7048U, 
    10849U, 15120U, 7142U, 2996U, 14730U, 7135U, 12070U, 14980U, 
    14268U, 545U, 434U, 14771U, 2310U, 14662U, 15474U, 2420U, 
    14550U, 13016U, 2243U, 15114U, 2359U, 15251U, 2384U, 11524U, 
    15585U, 525U, 15757U, 4733U, 14403U, 15199U, 15212U, 14260U, 
    15240U, 10045U, 14697U, 13107U, 14153U, 14123U, 14832U, 14170U, 
    7103U, 6973U, 14138U, 14887U, 15129U, 4346U, 12858U, 4405U, 
    1559U, 10354U, 5356U, 11297U, 14802U, 4858U, 10405U, 2028U, 
    10877U, 2127U, 10387U, 11288U, 7849U, 6327U, 4903U, 7841U, 
    6318U, 7042U, 17505U, 10590U, 2039U, 10832U, 5361U, 1640U, 
    10642U, 10815U, 2088U, 10827U, 7779U, 3423U, 1494U, 4685U, 
    5151U, 18499U, 10417U, 4671U, 4430U, 15478U, 4704U, 13831U, 
    4776U, 13989U, 3830U, 3844U, 5375U, 1656U, 10883U, 2134U, 
    17959U, 17970U, 10399U, 9U, 57U, 5406U, 6136U, 16831U, 
    15621U, 16700U, 10595U, 2045U, 10838U, 4664U, 5368U, 1648U, 
    10648U, 10821U, 2095U, 10844U, 7786U, 5160U, 18509U, 10424U, 
    4678U, 4303U, 3000U, 11848U, 15486U, 4353U, 12866U, 17629U, 
    16450U, 13531U, 12970U, 17676U, 17725U, 4418U, 8014U, 17119U, 
    16478U, 6187U, 1709U, 13568U, 8291U, 17246U, 17739U, 10624U, 
    10613U, 2066U, 4494U, 1567U, 16111U, 16497U, 8321U, 5532U, 
    1686U, 7963U, 17097U, 16185U, 8090U, 17206U, 16707U, 9339U, 
    1419U, 1431U, 10678U, 2078U, 16225U, 17410U, 10672U, 2079U, 
    16226U, 3945U, 1549U, 16099U, 16411U, 6373U, 1725U, 11427U, 
    2154U, 17411U, 3436U, 4755U, 13939U, 12559U, 12568U, 6309U, 
    15628U, 18058U, 6436U, 15638U, 18068U, 10907U, 18158U, 4185U, 
    11052U, 18205U, 4359U, 11127U, 12873U, 11770U, 15603U, 10196U, 
    15680U, 18416U, 12228U, 15697U, 18427U, 12426U, 15707U, 18438U, 
    7703U, 18117U, 4382U, 12882U, 15442U, 15287U, 15612U, 13545U, 
    12977U, 15452U, 15462U, 6728U, 15649U, 18088U, 4199U, 11060U, 
    18214U, 10636U, 15690U, 18151U, 3532U, 11033U, 18184U, 7060U, 
    11559U, 18279U, 10929U, 18166U, 5536U, 18032U, 4207U, 11069U, 
    18224U, 3540U, 11042U, 18194U, 7448U, 18108U, 5086U, 11231U, 
    18259U, 7386U, 18100U, 7772U, 18127U, 9306U, 18135U, 15360U, 
    18387U, 10015U, 18143U, 5107U, 11238U, 18267U, 6837U, 15661U, 
    15742U, 18395U, 3518U, 11025U, 18175U, 7681U, 15669U, 18404U, 
    4241U, 11106U, 7089U, 11567U, 4216U, 11079U, 4250U, 11116U, 
    4229U, 11093U, 6022U, 14992U, 3090U, 14323U, 3018U, 15060U, 
    3130U, 14815U, 3054U, 18341U, 15011U, 3111U, 14355U, 3037U, 
    15717U, 14245U, 3008U, 15225U, 3180U, 15079U, 3151U, 14845U, 
    3073U, 15734U, 18360U, 14370U, 14860U, 18487U, 14394U, 14878U, 
    15001U, 3100U, 6668U, 2909U, 14331U, 3027U, 6630U, 2867U, 
    15069U, 3140U, 6689U, 2932U, 14823U, 3063U, 6649U, 2888U, 
    18350U, 15019U, 3120U, 6679U, 2921U, 14362U, 3045U, 6640U, 
    2878U, 15725U, 15168U, 3170U, 15087U, 3160U, 6700U, 2944U, 
    18377U, 14852U, 3081U, 6659U, 2899U, 18368U, 10431U, 12289U, 
    5169U, 6011U, 6050U, 3215U, 6132U, 4368U, 6016U, 6752U, 
    16930U, 10393U, 17390U, 3696U, 6758U, 450U, 976U, 16023U, 
    16937U, 10410U, 460U, 17397U, 16383U, 6209U, 16849U, 6216U, 
    1716U, 16199U, 16857U, 7400U, 2013U, 16208U, 16951U, 7408U, 
    2021U, 16217U, 16959U, 3457U, 4071U, 1156U, 1110U, 1663U, 
    1133U, 1749U, 3859U, 3886U, 3988U, 5055U, 1083U, 3961U, 
    3913U, 4044U, 4015U, 1170U, 1123U, 1676U, 1146U, 1930U, 
    3874U, 3901U, 4003U, 5069U, 1098U, 3976U, 3929U, 4059U, 
    4031U, 3418U, 1488U, 4605U, 15789U, 16618U, 2767U, 4997U, 
    5522U, 4962U, 13021U, 5100U, 3814U, 4444U, 16485U, 13588U, 
    2254U, 16243U, 17746U, 15471U, 15248U, 13966U, 15191U, 10442U, 
    12303U, 5198U, 4159U, 6039U, 441U, 16768U, 16416U, 13438U, 
    6523U, 16865U, 17710U, 4667U, 16526U, 13827U, 2259U, 16249U, 
    17751U, 3453U, 1500U, 14502U, 14299U, 14627U, 12842U, 2213U, 
    14986U, 2324U, 14294U, 2291U, 11469U, 15523U, 470U, 4772U, 
    12004U, 14742U, 14515U, 14305U, 12895U, 15033U, 14416U, 11484U, 
    15540U, 4329U, 14641U, 12852U, 15021U, 14364U, 15170U, 11303U, 
    12946U, 15089U, 14854U, 5875U, 1698U, 14755U, 14522U, 14311U, 
    14655U, 12920U, 2219U, 15045U, 2331U, 14497U, 2297U, 11492U, 
    15549U, 481U, 13596U, 9366U, 6620U, 14279U, 14482U, 15161U, 
    15124U, 7147U, 13969U, 2264U, 12075U, 14777U, 14529U, 14317U, 
    14668U, 12993U, 2225U, 15096U, 2338U, 15194U, 2366U, 11500U, 
    15558U, 492U, 4738U, 14409U, 14286U, 18519U, 14489U, 18528U, 
    15177U, 10051U, 14704U, 13111U, 14161U, 14130U, 14177U, 7108U, 
    6979U, 14145U, 15134U, 5265U, 1634U, 7956U, 17089U, 16178U, 
    3678U, 1517U, 7893U, 17018U, 16091U, 7991U, 17111U, 16362U, 
    4976U, 1587U, 7914U, 17042U, 16125U, 8040U, 17149U, 16626U, 
    3702U, 1531U, 5035U, 1601U, 7930U, 17060U, 16141U, 8054U, 
    17165U, 16640U, 8084U, 17199U, 5237U, 1626U, 7947U, 17079U, 
    16169U, 8076U, 17190U, 16686U, 16694U, 3817U, 12632U, 3669U, 
    6001U, 4074U, 6029U, 3270U, 1461U, 2593U, 1443U, 10854U, 
    2102U, 7718U, 12164U, 6710U, 12153U, 15797U, 2425U, 15808U, 
    2437U, 15819U, 2449U, 4751U, 6121U, 4564U, 2773U, 5003U, 
    6810U, 14237U, 4399U, 6181U, 5080U, 630U, 14809U, 660U, 
    4110U, 3822U, 5211U, 637U, 8325U, 12589U, 7347U, 10845U, 
    13927U, 6626U, 5184U, 10359U, 3464U, 5879U, 13995U, 10307U, 
    13981U, 10335U, 7439U, 9159U, 10992U, 11352U, 11873U, 7249U, 
    11017U, 7274U, 7330U, 11377U, 7422U, 7553U, 11897U, 4537U, 
    3663U, 3347U, 5779U, 13845U, 3480U, 5895U, 14011U, 4468U, 
    10266U, 14839U, 41U, 15039U, 49U, 10527U, 12703U, 3622U, 
    4832U, 5962U, 3221U, 14095U, 9127U, 17294U, 9233U, 17313U, 
    3502U, 16299U, 4796U, 16556U, 5917U, 16738U, 14033U, 17773U, 
    9174U, 17303U, 9242U, 17323U, 3394U, 16282U, 4717U, 16546U, 
    5826U, 16721U, 13901U, 17756U, 3597U, 16330U, 4805U, 16566U, 
    5937U, 16748U, 14065U, 17783U, 3239U, 16273U, 5690U, 16712U, 
    13485U, 17716U, 3613U, 16340U, 5953U, 16758U, 14086U, 17799U, 
    11979U, 23U, 11986U, 32U, 3628U, 4845U, 5968U, 3230U, 
    14110U, 13097U, 9189U, 4744U, 3586U, 5926U, 14042U, 4083U, 
    18002U, 13116U, 18312U, 4092U, 18012U, 13125U, 18322U, 4101U, 
    18022U, 14565U, 14762U, 14574U, 14784U, 14583U, 14793U, 4164U, 
    3444U, 4763U, 5866U, 13947U, 9166U, 9151U, 9251U, 3411U, 
    4726U, 5843U, 13916U, 3606U, 4814U, 5946U, 14074U, 11331U, 
    11341U, 9208U, 3379U, 4710U, 5811U, 13886U, 3487U, 4782U, 
    5902U, 14018U, 7320U, 13478U, 3247U, 5698U, 13516U, 3263U, 
    5705U, 13553U, 13801U, 7232U, 7303U, 11360U, 7257U, 7338U, 
    11385U, 10289U, 10315U, 10344U, 10280U, 3325U, 5757U, 13837U, 
    3472U, 5887U, 14003U, 3386U, 5818U, 13893U, 3494U, 5909U, 
    14025U, 7561U, 4507U, 10518U, 12690U, 4340U, 13510U, 9135U, 
    10689U, 10741U, 3956U, 7456U, 10654U, 10752U, 14683U, 11664U, 
    11780U, 11702U, 11796U, 11710U, 11819U, 7479U, 11788U, 7487U, 
    11804U, 7537U, 11827U, 3286U, 4476U, 5738U, 13601U, 3435U, 
    4754U, 5857U, 13938U, 4170U, 10179U, 13443U, 9183U, 7356U, 
    7712U, 9276U, 15330U, 3276U, 4438U, 6202U, 7393U, 5712U, 
    13581U, 6302U, 7407U, 9198U, 14597U, 6850U, 4118U, 13426U, 
    7049U, 3281U, 4443U, 6337U, 5717U, 8137U, 13078U, 13587U, 
    3428U, 17994U, 5850U, 18040U, 3362U, 5794U, 13860U, 13923U, 
    10850U, 3209U, 4158U, 5671U, 13437U, 3320U, 4673U, 5752U, 
    8256U, 13102U, 13826U, 10299U, 13973U, 10326U, 7430U, 9144U, 
    10984U, 11323U, 11865U, 7241U, 11009U, 7266U, 7312U, 11369U, 
    7414U, 7545U, 11889U, 11856U, 10975U, 11314U, 11000U, 11881U, 
    14675U, 3354U, 5786U, 13852U, 14689U, 3371U, 5803U, 13869U, 
    10768U, 16U, 3201U, 5663U, 11218U, 3333U, 5765U, 12284U, 
    4970U, 6125U, 10748U, 2083U, 16231U, 6372U, 1724U, 11426U, 
    2153U, 17415U, 8906U, 9569U, 8476U, 9452U, 8219U, 9723U, 
    8868U, 8839U, 9540U, 8532U, 8922U, 8776U, 9513U, 8980U, 
    9586U, 8740U, 9503U, 9258U, 9522U, 9960U, 7826U, 11152U, 
    18235U, 11913U, 18288U, 11185U, 18247U, 11946U, 18300U, 8785U, 
    8794U, 8158U, 15306U, 15494U, 15316U, 15504U, 9460U, 8803U, 
    7816U, 8492U, 9739U, 9469U, 8512U, 9759U, 8989U, 9595U, 
    8247U, 10096U, 8821U, 9531U, 8402U, 9667U, 8720U, 9922U, 
    9443U, 8209U, 8467U, 9043U, 8631U, 8458U, 8760U, 8622U, 
    8360U, 9625U, 8678U, 9880U, 9406U, 8179U, 8640U, 9495U, 
    8228U, 9842U, 8888U, 9560U, 8588U, 9478U, 8380U, 9645U, 
    8698U, 9900U, 9433U, 8198U, 8338U, 9603U, 8656U, 9858U, 
    9396U, 8168U, 6344U, 3709U, 7362U, 9282U, 15336U, 8552U, 
    9789U, 6358U, 14557U, 10171U, 10022U, 8566U, 9803U, 8942U, 
    9577U, 8237U, 10068U, 8422U, 9415U, 8189U, 9687U, 8997U, 
    8951U, 8438U, 9423U, 9703U, 8850U, 9551U, 8604U, 9486U, 
    8914U, 10037U, 8484U, 9731U, 8878U, 17272U, 10005U, 17344U, 
    8542U, 17261U, 9779U, 17333U, 8932U, 17283U, 10058U, 17361U, 
    8750U, 9942U, 9969U, 11163U, 11924U, 11196U, 11957U, 9978U, 
    8812U, 9267U, 11174U, 11935U, 11207U, 11968U, 8502U, 9749U, 
    9023U, 10121U, 8522U, 9769U, 9033U, 10131U, 9015U, 10113U, 
    8830U, 9987U, 8412U, 9677U, 8730U, 9932U, 9051U, 10141U, 
    8768U, 9952U, 8370U, 9635U, 8688U, 9890U, 8648U, 9850U, 
    8897U, 10028U, 8596U, 9825U, 8391U, 9656U, 8709U, 9911U, 
    8349U, 9614U, 8667U, 9869U, 6351U, 3717U, 7370U, 9290U, 
    15344U, 8559U, 9796U, 6365U, 3725U, 7378U, 9298U, 15352U, 
    8577U, 9814U, 8971U, 10087U, 8430U, 9695U, 9006U, 10104U, 
    8961U, 10077U, 8448U, 9713U, 8859U, 9996U, 8613U, 9833U, 
    4658U, 5746U, 10274U, 13820U, 14053U, 13956U, 4484U, 3647U, 
    13083U, 4491U, 10675U, 10669U, 3942U, 15782U, 10745U, 18588U, 
    18598U, 18580U, 13523U, 13560U, 7462U, 6078U, 18048U, 10661U, 
    6855U, 6529U, 18079U, 3254U, 13930U, 18332U, 3634U, 2608U, 
    18459U, 10863U, 7026U, 6742U, 2959U, 18466U, 10578U, 6991U, 
    18480U, 18474U, 
};

static inline void InitPPCMCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(PPCInsts, PPCInstrNameIndices, PPCInstrNameData, 2266);
}

} // end llvm namespace
#endif // GET_INSTRINFO_MC_DESC

#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct PPCGenInstrInfo : public TargetInstrInfo {
  explicit PPCGenInstrInfo(int CFSetupOpcode = -1, int CFDestroyOpcode = -1, int CatchRetOpcode = -1, int ReturnOpcode = -1);
  ~PPCGenInstrInfo() override = default;

};
} // end llvm namespace
#endif // GET_INSTRINFO_HEADER

#ifdef GET_INSTRINFO_HELPER_DECLS
#undef GET_INSTRINFO_HELPER_DECLS


#endif // GET_INSTRINFO_HELPER_DECLS

#ifdef GET_INSTRINFO_HELPERS
#undef GET_INSTRINFO_HELPERS

#endif // GET_INSTRINFO_HELPERS

#ifdef GET_INSTRINFO_CTOR_DTOR
#undef GET_INSTRINFO_CTOR_DTOR
namespace llvm {
extern const MCInstrDesc PPCInsts[];
extern const unsigned PPCInstrNameIndices[];
extern const char PPCInstrNameData[];
PPCGenInstrInfo::PPCGenInstrInfo(int CFSetupOpcode, int CFDestroyOpcode, int CatchRetOpcode, int ReturnOpcode)
  : TargetInstrInfo(CFSetupOpcode, CFDestroyOpcode, CatchRetOpcode, ReturnOpcode) {
  InitMCInstrInfo(PPCInsts, PPCInstrNameIndices, PPCInstrNameData, 2266);
}
} // end llvm namespace
#endif // GET_INSTRINFO_CTOR_DTOR

#ifdef GET_INSTRINFO_OPERAND_ENUM
#undef GET_INSTRINFO_OPERAND_ENUM
namespace llvm {
namespace PPC {
namespace OpName {
enum {
OPERAND_LAST
};
} // end namespace OpName
} // end namespace PPC
} // end namespace llvm
#endif //GET_INSTRINFO_OPERAND_ENUM

#ifdef GET_INSTRINFO_NAMED_OPS
#undef GET_INSTRINFO_NAMED_OPS
namespace llvm {
namespace PPC {
LLVM_READONLY
int16_t getNamedOperandIdx(uint16_t Opcode, uint16_t NamedIdx) {
  return -1;
}
} // end namespace PPC
} // end namespace llvm
#endif //GET_INSTRINFO_NAMED_OPS

#ifdef GET_INSTRINFO_OPERAND_TYPES_ENUM
#undef GET_INSTRINFO_OPERAND_TYPES_ENUM
namespace llvm {
namespace PPC {
namespace OpTypes {
enum OperandType {
  abscalltarget = 0,
  abscondbrtarget = 1,
  absdirectbrtarget = 2,
  atimm = 3,
  calltarget = 4,
  condbrtarget = 5,
  crbitm = 6,
  directbrtarget = 7,
  dispRI = 8,
  dispRIX = 9,
  dispRIX16 = 10,
  dispSPE2 = 11,
  dispSPE4 = 12,
  dispSPE8 = 13,
  f32imm = 14,
  f64imm = 15,
  i16imm = 16,
  i1imm = 17,
  i32imm = 18,
  i64imm = 19,
  i8imm = 20,
  imm32SExt16 = 21,
  imm64SExt16 = 22,
  imm64ZExt32 = 23,
  memr = 24,
  memri = 25,
  memrix = 26,
  memrix16 = 27,
  memrr = 28,
  pred = 29,
  ptr_rc_idx = 30,
  ptr_rc_nor0 = 31,
  ptype0 = 32,
  ptype1 = 33,
  ptype2 = 34,
  ptype3 = 35,
  ptype4 = 36,
  ptype5 = 37,
  s16imm = 38,
  s16imm64 = 39,
  s17imm = 40,
  s17imm64 = 41,
  s5imm = 42,
  spe2dis = 43,
  spe4dis = 44,
  spe8dis = 45,
  tlscall = 46,
  tlscall32 = 47,
  tlsgd = 48,
  tlsgd32 = 49,
  tlsreg = 50,
  tlsreg32 = 51,
  tocentry = 52,
  tocentry32 = 53,
  type0 = 54,
  type1 = 55,
  type2 = 56,
  type3 = 57,
  type4 = 58,
  type5 = 59,
  u10imm = 60,
  u12imm = 61,
  u16imm = 62,
  u16imm64 = 63,
  u1imm = 64,
  u2imm = 65,
  u3imm = 66,
  u4imm = 67,
  u5imm = 68,
  u6imm = 69,
  u7imm = 70,
  u8imm = 71,
  OPERAND_TYPE_LIST_END
};
} // end namespace OpTypes
} // end namespace PPC
} // end namespace llvm
#endif // GET_INSTRINFO_OPERAND_TYPES_ENUM

#ifdef GET_INSTRINFO_OPERAND_TYPE
#undef GET_INSTRINFO_OPERAND_TYPE
namespace llvm {
namespace PPC {
LLVM_READONLY
int getOperandType(uint16_t Opcode, uint16_t OpIdx) {
  const int Offsets[] = {
    0,
    1,
    1,
    1,
    2,
    3,
    4,
    5,
    5,
    8,
    12,
    13,
    17,
    20,
    20,
    21,
    23,
    25,
    25,
    26,
    27,
    29,
    29,
    35,
    36,
    36,
    38,
    39,
    39,
    39,
    39,
    39,
    39,
    41,
    44,
    44,
    47,
    50,
    53,
    56,
    59,
    62,
    65,
    68,
    71,
    74,
    75,
    76,
    78,
    80,
    83,
    85,
    89,
    91,
    93,
    95,
    97,
    99,
    101,
    103,
    105,
    107,
    109,
    111,
    113,
    115,
    120,
    124,
    127,
    130,
    133,
    136,
    139,
    142,
    145,
    148,
    151,
    154,
    157,
    159,
    161,
    162,
    163,
    164,
    166,
    168,
    170,
    172,
    173,
    176,
    178,
    180,
    183,
    186,
    189,
    193,
    197,
    201,
    205,
    210,
    214,
    219,
    223,
    228,
    232,
    237,
    241,
    245,
    248,
    251,
    254,
    257,
    260,
    264,
    267,
    270,
    273,
    275,
    277,
    279,
    281,
    283,
    285,
    287,
    289,
    291,
    293,
    295,
    297,
    299,
    302,
    304,
    307,
    310,
    313,
    316,
    319,
    322,
    325,
    328,
    331,
    334,
    337,
    340,
    341,
    344,
    348,
    351,
    355,
    357,
    359,
    361,
    363,
    365,
    367,
    369,
    371,
    373,
    375,
    377,
    379,
    381,
    383,
    385,
    387,
    388,
    392,
    396,
    400,
    404,
    407,
    410,
    413,
    416,
    418,
    420,
    422,
    424,
    426,
    428,
    430,
    433,
    436,
    439,
    442,
    444,
    446,
    448,
    450,
    453,
    456,
    459,
    462,
    466,
    470,
    474,
    478,
    482,
    486,
    490,
    494,
    498,
    502,
    506,
    510,
    514,
    518,
    521,
    524,
    527,
    531,
    535,
    539,
    543,
    547,
    551,
    554,
    557,
    560,
    563,
    566,
    569,
    572,
    575,
    578,
    581,
    584,
    587,
    590,
    593,
    596,
    599,
    602,
    605,
    608,
    611,
    614,
    616,
    619,
    622,
    625,
    628,
    631,
    634,
    637,
    640,
    643,
    646,
    649,
    652,
    655,
    658,
    661,
    664,
    667,
    670,
    673,
    676,
    679,
    682,
    685,
    688,
    691,
    694,
    697,
    700,
    703,
    706,
    709,
    712,
    715,
    718,
    721,
    724,
    727,
    730,
    733,
    736,
    739,
    742,
    745,
    748,
    751,
    754,
    757,
    760,
    764,
    768,
    771,
    774,
    778,
    782,
    785,
    787,
    789,
    791,
    793,
    795,
    797,
    799,
    801,
    803,
    805,
    807,
    809,
    811,
    813,
    815,
    817,
    819,
    821,
    823,
    826,
    829,
    832,
    835,
    838,
    841,
    844,
    847,
    850,
    853,
    856,
    858,
    860,
    862,
    864,
    867,
    872,
    877,
    882,
    887,
    891,
    895,
    899,
    903,
    907,
    911,
    915,
    919,
    923,
    927,
    931,
    935,
    939,
    943,
    947,
    951,
    955,
    959,
    963,
    967,
    971,
    975,
    979,
    983,
    987,
    991,
    995,
    999,
    1003,
    1007,
    1011,
    1015,
    1019,
    1023,
    1027,
    1031,
    1035,
    1039,
    1043,
    1047,
    1051,
    1055,
    1059,
    1063,
    1063,
    1064,
    1065,
    1067,
    1070,
    1073,
    1075,
    1077,
    1079,
    1081,
    1084,
    1087,
    1089,
    1091,
    1092,
    1093,
    1094,
    1095,
    1096,
    1097,
    1098,
    1099,
    1102,
    1105,
    1108,
    1111,
    1113,
    1115,
    1118,
    1121,
    1125,
    1129,
    1133,
    1136,
    1139,
    1141,
    1142,
    1143,
    1144,
    1145,
    1146,
    1148,
    1148,
    1148,
    1148,
    1148,
    1150,
    1152,
    1153,
    1154,
    1155,
    1156,
    1157,
    1158,
    1159,
    1160,
    1161,
    1161,
    1161,
    1161,
    1161,
    1161,
    1161,
    1161,
    1162,
    1163,
    1164,
    1165,
    1166,
    1167,
    1168,
    1169,
    1170,
    1171,
    1172,
    1173,
    1174,
    1174,
    1174,
    1174,
    1174,
    1174,
    1174,
    1174,
    1175,
    1176,
    1177,
    1178,
    1179,
    1180,
    1181,
    1183,
    1185,
    1187,
    1188,
    1189,
    1190,
    1190,
    1190,
    1190,
    1191,
    1193,
    1196,
    1199,
    1199,
    1202,
    1205,
    1208,
    1211,
    1214,
    1217,
    1220,
    1223,
    1226,
    1230,
    1234,
    1237,
    1240,
    1242,
    1244,
    1246,
    1248,
    1250,
    1252,
    1254,
    1256,
    1258,
    1260,
    1262,
    1264,
    1264,
    1267,
    1270,
    1273,
    1276,
    1279,
    1282,
    1282,
    1282,
    1285,
    1288,
    1291,
    1294,
    1297,
    1300,
    1303,
    1304,
    1305,
    1308,
    1311,
    1313,
    1315,
    1318,
    1320,
    1322,
    1324,
    1326,
    1329,
    1332,
    1335,
    1338,
    1340,
    1342,
    1344,
    1346,
    1348,
    1351,
    1354,
    1357,
    1360,
    1363,
    1366,
    1369,
    1372,
    1375,
    1378,
    1381,
    1384,
    1387,
    1390,
    1393,
    1396,
    1399,
    1402,
    1405,
    1408,
    1411,
    1414,
    1417,
    1420,
    1423,
    1426,
    1429,
    1432,
    1435,
    1438,
    1441,
    1444,
    1445,
    1445,
    1448,
    1451,
    1454,
    1457,
    1460,
    1463,
    1466,
    1469,
    1473,
    1477,
    1480,
    1483,
    1485,
    1488,
    1490,
    1492,
    1494,
    1496,
    1498,
    1500,
    1502,
    1505,
    1508,
    1511,
    1513,
    1515,
    1517,
    1519,
    1521,
    1523,
    1525,
    1527,
    1530,
    1533,
    1535,
    1537,
    1540,
    1543,
    1546,
    1549,
    1551,
    1554,
    1556,
    1558,
    1560,
    1562,
    1564,
    1567,
    1570,
    1573,
    1575,
    1577,
    1579,
    1581,
    1583,
    1585,
    1588,
    1591,
    1593,
    1595,
    1598,
    1601,
    1604,
    1607,
    1608,
    1609,
    1611,
    1613,
    1614,
    1617,
    1620,
    1623,
    1626,
    1628,
    1631,
    1633,
    1635,
    1637,
    1639,
    1642,
    1645,
    1648,
    1651,
    1654,
    1657,
    1660,
    1663,
    1665,
    1667,
    1670,
    1673,
    1676,
    1678,
    1680,
    1682,
    1685,
    1687,
    1689,
    1691,
    1693,
    1696,
    1699,
    1702,
    1704,
    1706,
    1708,
    1710,
    1712,
    1714,
    1717,
    1720,
    1722,
    1724,
    1727,
    1730,
    1733,
    1736,
    1739,
    1742,
    1745,
    1748,
    1751,
    1754,
    1757,
    1760,
    1763,
    1766,
    1769,
    1772,
    1775,
    1778,
    1781,
    1784,
    1787,
    1790,
    1793,
    1796,
    1799,
    1802,
    1805,
    1808,
    1811,
    1814,
    1817,
    1820,
    1823,
    1826,
    1829,
    1832,
    1835,
    1838,
    1841,
    1844,
    1847,
    1850,
    1853,
    1856,
    1859,
    1862,
    1865,
    1868,
    1871,
    1874,
    1877,
    1880,
    1883,
    1886,
    1889,
    1892,
    1895,
    1898,
    1901,
    1904,
    1907,
    1910,
    1913,
    1916,
    1919,
    1922,
    1925,
    1928,
    1931,
    1934,
    1937,
    1940,
    1943,
    1946,
    1949,
    1952,
    1955,
    1958,
    1961,
    1964,
    1967,
    1970,
    1972,
    1975,
    1978,
    1981,
    1984,
    1987,
    1990,
    1993,
    1996,
    1999,
    2002,
    2005,
    2008,
    2011,
    2014,
    2017,
    2020,
    2023,
    2026,
    2029,
    2032,
    2035,
    2038,
    2041,
    2044,
    2047,
    2050,
    2053,
    2056,
    2059,
    2062,
    2065,
    2068,
    2071,
    2074,
    2077,
    2079,
    2082,
    2085,
    2088,
    2091,
    2094,
    2096,
    2100,
    2103,
    2106,
    2108,
    2110,
    2113,
    2116,
    2119,
    2122,
    2125,
    2128,
    2131,
    2134,
    2137,
    2140,
    2143,
    2146,
    2149,
    2152,
    2155,
    2158,
    2161,
    2164,
    2166,
    2168,
    2170,
    2172,
    2175,
    2178,
    2181,
    2183,
    2185,
    2187,
    2189,
    2191,
    2193,
    2195,
    2197,
    2199,
    2201,
    2203,
    2206,
    2209,
    2212,
    2215,
    2217,
    2219,
    2221,
    2223,
    2223,
    2225,
    2227,
    2229,
    2231,
    2234,
    2237,
    2240,
    2243,
    2246,
    2248,
    2250,
    2252,
    2254,
    2256,
    2258,
    2260,
    2262,
    2265,
    2268,
    2271,
    2274,
    2277,
    2280,
    2282,
    2284,
    2286,
    2288,
    2290,
    2292,
    2294,
    2296,
    2298,
    2300,
    2302,
    2304,
    2306,
    2308,
    2310,
    2312,
    2315,
    2318,
    2321,
    2324,
    2328,
    2332,
    2336,
    2340,
    2342,
    2344,
    2348,
    2352,
    2356,
    2360,
    2363,
    2366,
    2369,
    2372,
    2374,
    2376,
    2378,
    2380,
    2382,
    2384,
    2386,
    2388,
    2392,
    2396,
    2400,
    2404,
    2408,
    2412,
    2416,
    2420,
    2422,
    2424,
    2426,
    2428,
    2430,
    2432,
    2434,
    2436,
    2438,
    2440,
    2442,
    2444,
    2446,
    2448,
    2450,
    2452,
    2454,
    2456,
    2458,
    2460,
    2462,
    2464,
    2466,
    2468,
    2470,
    2472,
    2476,
    2480,
    2484,
    2488,
    2490,
    2492,
    2494,
    2496,
    2499,
    2502,
    2505,
    2508,
    2511,
    2513,
    2516,
    2519,
    2522,
    2525,
    2525,
    2527,
    2529,
    2532,
    2535,
    2538,
    2541,
    2543,
    2547,
    2551,
    2551,
    2554,
    2557,
    2560,
    2563,
    2566,
    2569,
    2572,
    2576,
    2580,
    2584,
    2588,
    2591,
    2594,
    2597,
    2600,
    2603,
    2606,
    2609,
    2612,
    2615,
    2618,
    2621,
    2624,
    2628,
    2632,
    2635,
    2638,
    2641,
    2644,
    2647,
    2650,
    2653,
    2656,
    2659,
    2662,
    2665,
    2668,
    2672,
    2676,
    2679,
    2682,
    2685,
    2688,
    2692,
    2696,
    2699,
    2702,
    2705,
    2708,
    2711,
    2715,
    2719,
    2723,
    2727,
    2730,
    2733,
    2736,
    2739,
    2742,
    2745,
    2748,
    2751,
    2755,
    2759,
    2763,
    2767,
    2770,
    2773,
    2776,
    2779,
    2782,
    2784,
    2786,
    2788,
    2790,
    2793,
    2796,
    2799,
    2802,
    2805,
    2808,
    2811,
    2814,
    2817,
    2820,
    2823,
    2826,
    2829,
    2833,
    2836,
    2839,
    2842,
    2845,
    2848,
    2851,
    2854,
    2857,
    2860,
    2864,
    2868,
    2872,
    2876,
    2879,
    2882,
    2885,
    2888,
    2891,
    2894,
    2897,
    2900,
    2903,
    2906,
    2909,
    2912,
    2915,
    2918,
    2921,
    2924,
    2927,
    2930,
    2933,
    2936,
    2939,
    2942,
    2945,
    2948,
    2952,
    2956,
    2960,
    2964,
    2965,
    2967,
    2969,
    2970,
    2973,
    2974,
    2975,
    2976,
    2977,
    2979,
    2980,
    2982,
    2984,
    2985,
    2987,
    2989,
    2990,
    2991,
    2992,
    2993,
    2994,
    2996,
    2998,
    3000,
    3002,
    3004,
    3006,
    3008,
    3010,
    3011,
    3013,
    3014,
    3016,
    3017,
    3019,
    3021,
    3023,
    3026,
    3029,
    3032,
    3035,
    3035,
    3035,
    3037,
    3039,
    3040,
    3041,
    3042,
    3043,
    3045,
    3046,
    3047,
    3051,
    3054,
    3057,
    3059,
    3063,
    3064,
    3065,
    3067,
    3069,
    3071,
    3073,
    3075,
    3077,
    3079,
    3081,
    3083,
    3084,
    3086,
    3087,
    3089,
    3092,
    3094,
    3096,
    3098,
    3101,
    3104,
    3107,
    3110,
    3113,
    3116,
    3119,
    3122,
    3125,
    3128,
    3131,
    3134,
    3137,
    3140,
    3143,
    3146,
    3149,
    3152,
    3152,
    3152,
    3152,
    3155,
    3158,
    3161,
    3164,
    3164,
    3166,
    3168,
    3170,
    3172,
    3174,
    3176,
    3178,
    3180,
    3180,
    3180,
    3180,
    3183,
    3186,
    3189,
    3192,
    3195,
    3198,
    3201,
    3204,
    3207,
    3210,
    3213,
    3216,
    3219,
    3222,
    3225,
    3228,
    3230,
    3232,
    3234,
    3235,
    3237,
    3241,
    3245,
    3249,
    3252,
    3255,
    3258,
    3260,
    3262,
    3265,
    3268,
    3271,
    3273,
    3275,
    3277,
    3279,
    3281,
    3284,
    3287,
    3290,
    3293,
    3296,
    3299,
    3302,
    3305,
    3308,
    3311,
    3314,
    3316,
    3318,
    3320,
    3322,
    3324,
    3326,
    3328,
    3330,
    3332,
    3336,
    3340,
    3344,
    3348,
    3352,
    3356,
    3358,
    3360,
    3362,
    3366,
    3370,
    3374,
    3377,
    3380,
    3383,
    3385,
    3387,
    3389,
    3391,
    3395,
    3399,
    3403,
    3407,
    3411,
    3415,
    3419,
    3423,
    3425,
    3427,
    3429,
    3431,
    3433,
    3435,
    3437,
    3439,
    3441,
    3443,
    3445,
    3447,
    3449,
    3451,
    3453,
    3455,
    3459,
    3463,
    3467,
    3471,
    3474,
    3477,
    3480,
    3483,
    3486,
    3489,
    3493,
    3497,
    3500,
    3503,
    3507,
    3511,
    3515,
    3519,
    3523,
    3527,
    3529,
    3532,
    3535,
    3538,
    3541,
    3544,
    3547,
    3550,
    3553,
    3556,
    3560,
    3563,
    3566,
    3569,
    3572,
    3575,
    3578,
    3581,
    3584,
    3588,
    3591,
    3594,
    3597,
    3600,
    3603,
    3606,
    3609,
    3611,
    3614,
    3617,
    3620,
    3623,
    3626,
    3629,
    3632,
    3635,
    3638,
    3641,
    3644,
    3647,
    3650,
    3653,
    3656,
    3659,
    3662,
    3665,
    3668,
    3672,
    3675,
    3678,
    3681,
    3684,
    3687,
    3690,
    3693,
    3696,
    3699,
    3702,
    3706,
    3709,
    3712,
    3715,
    3719,
    3722,
    3725,
    3728,
    3731,
    3734,
    3737,
    3740,
    3743,
    3743,
    3743,
    3744,
    3744,
    3744,
    3744,
    3748,
    3752,
    3756,
    3760,
    3764,
    3768,
    3772,
    3776,
    3780,
    3784,
    3788,
    3792,
    3796,
    3800,
    3805,
    3810,
    3816,
    3822,
    3828,
    3834,
    3839,
    3844,
    3849,
    3854,
    3859,
    3864,
    3869,
    3874,
    3876,
    3877,
    3882,
    3887,
    3892,
    3897,
    3902,
    3907,
    3912,
    3917,
    3922,
    3927,
    3932,
    3937,
    3942,
    3947,
    3951,
    3955,
    3959,
    3963,
    3967,
    3971,
    3975,
    3979,
    3983,
    3987,
    3991,
    3995,
    3999,
    4003,
    4005,
    4007,
    4009,
    4011,
    4013,
    4013,
    4014,
    4016,
    4018,
    4020,
    4022,
    4022,
    4025,
    4028,
    4031,
    4034,
    4037,
    4040,
    4043,
    4046,
    4049,
    4052,
    4055,
    4058,
    4061,
    4064,
    4067,
    4070,
    4073,
    4076,
    4079,
    4082,
    4085,
    4088,
    4091,
    4094,
    4097,
    4100,
    4103,
    4106,
    4109,
    4112,
    4115,
    4118,
    4121,
    4125,
    4129,
    4133,
    4137,
    4140,
    4143,
    4146,
    4149,
    4152,
    4155,
    4158,
    4161,
    4164,
    4167,
    4171,
    4175,
    4178,
    4181,
    4184,
    4187,
    4190,
    4194,
    4198,
    4201,
    4204,
    4207,
    4211,
    4215,
    4218,
    4221,
    4224,
    4227,
    4230,
    4233,
    4236,
    4240,
    4244,
    4248,
    4252,
    4255,
    4258,
    4261,
    4264,
    4267,
    4270,
    4270,
    4273,
    4276,
    4279,
    4282,
    4285,
    4288,
    4291,
    4294,
    4297,
    4300,
    4303,
    4306,
    4309,
    4313,
    4317,
    4321,
    4325,
    4328,
    4331,
    4334,
    4337,
    4340,
    4343,
    4346,
    4349,
    4352,
    4355,
    4358,
    4361,
    4364,
    4367,
    4370,
    4373,
    4376,
    4379,
    4382,
    4385,
    4388,
    4391,
    4394,
    4397,
    4400,
    4403,
    4406,
    4409,
    4412,
    4415,
    4418,
    4421,
    4424,
    4427,
    4430,
    4433,
    4436,
    4439,
    4442,
    4445,
    4448,
    4451,
    4454,
    4457,
    4460,
    4462,
    4464,
    4466,
    4468,
    4470,
    4472,
    4474,
    4476,
    4479,
    4482,
    4484,
    4486,
    4488,
    4490,
    4492,
    4494,
    4496,
    4498,
    4501,
    4502,
    4503,
    4506,
    4509,
    4512,
    4515,
    4516,
    4517,
    4518,
    4519,
    4519,
    4519,
    4520,
    4522,
    4523,
    4524,
    4526,
    4528,
    4530,
    4532,
    4534,
    4536,
    4539,
    4542,
    4543,
    4543,
    4545,
    4546,
    4548,
    4549,
    4550,
    4550,
    4553,
    4555,
    4558,
    4561,
    4561,
    4561,
    4564,
    4564,
    4564,
    4565,
    4566,
    4569,
    4572,
    4574,
    4577,
    4580,
    4583,
    4586,
    4589,
    4592,
    4596,
    4600,
    4603,
    4606,
    4609,
    4612,
    4615,
    4618,
    4621,
    4624,
    4627,
    4630,
    4633,
    4636,
    4639,
    4642,
    4645,
    4648,
    4651,
    4654,
    4657,
    4660,
    4663,
    4666,
    4669,
    4671,
    4674,
    4676,
    4679,
    4682,
    4684,
    4686,
    4688,
    4690,
    4692,
    4695,
    4698,
    4701,
    4704,
    4707,
    4710,
    4713,
    4716,
    4719,
    4722,
    4725,
    4728,
    4731,
    4734,
    4737,
    4740,
    4743,
    4746,
    4749,
    4752,
    4755,
    4758,
    4761,
    4764,
    4767,
    4770,
    4773,
    4776,
    4779,
    4782,
    4785,
    4788,
    4791,
    4794,
    4797,
    4800,
    4803,
    4806,
    4809,
    4812,
    4815,
    4818,
    4821,
    4824,
    4827,
    4829,
    4832,
    4834,
    4836,
    4838,
    4840,
    4842,
    4844,
    4847,
    4849,
    4852,
    4855,
    4858,
    4861,
    4863,
    4865,
    4867,
    4869,
    4871,
    4873,
    4875,
    4877,
    4879,
    4881,
    4884,
    4887,
    4890,
    4893,
    4896,
    4899,
    4901,
    4905,
    4908,
    4912,
    4915,
    4917,
    4921,
    4924,
    4927,
    4930,
    4933,
    4936,
    4939,
    4942,
    4945,
    4948,
    4952,
    4956,
    4959,
    4962,
    4965,
    4968,
    4971,
    4974,
    4977,
    4980,
    4983,
    4987,
    4990,
    4993,
    4996,
    4999,
    5002,
    5005,
    5008,
    5011,
    5015,
    5019,
    5023,
    5027,
    5031,
    5035,
    5037,
    5040,
    5043,
    5045,
    5048,
    5051,
    5054,
    5057,
    5060,
    5063,
    5066,
    5069,
    5072,
    5075,
    5078,
    5081,
    5084,
    5087,
    5090,
    5093,
    5095,
    5097,
    5101,
    5104,
    5107,
    5110,
    5114,
    5118,
    5122,
    5125,
    5128,
    5131,
    5134,
    5137,
    5140,
    5143,
    5146,
    5149,
    5152,
    5155,
    5158,
    5161,
    5164,
    5167,
    5170,
    5173,
    5175,
    5177,
    5179,
    5181,
    5183,
    5185,
    5187,
    5189,
    5191,
    5193,
    5195,
    5197,
    5200,
    5203,
    5207,
    5210,
    5213,
    5216,
    5220,
    5223,
    5225,
    5227,
    5231,
    5235,
    5239,
    5242,
    5245,
    5248,
    5252,
    5255,
    5258,
    5261,
    5264,
    5267,
    5270,
    5273,
    5276,
    5278,
    5280,
    5282,
    5285,
    5288,
    5291,
    5294,
    5297,
    5300,
    5303,
    5306,
    5309,
    5312,
    5315,
    5318,
    5321,
    5324,
    5328,
    5332,
    5335,
    5338,
    5341,
    5344,
    5347,
    5350,
    5353,
    5356,
    5359,
    5362,
    5365,
    5368,
    5371,
    5374,
    5377,
    5380,
    5383,
    5385,
    5387,
    5389,
    5391,
    5393,
    5395,
    5397,
    5399,
    5402,
    5403,
    5404,
    5405,
    5406,
    5407,
    5408,
    5409,
    5410,
    5411,
    5414,
    5417,
    5420,
    5423,
    5426,
    5429,
    5432,
    5435,
    5437,
    5439,
    5442,
    5445,
    5448,
    5451,
    5454,
    5457,
    5460,
    5463,
    5466,
    5469,
    5472,
    5475,
    5478,
    5481,
    5484,
    5486,
    5488,
    5490,
    5492,
    5494,
    5496,
    5498,
    5500,
    5502,
    5504,
    5506,
    5508,
    5510,
    5512,
    5514,
    5516,
    5518,
    5520,
    5522,
    5524,
    5526,
    5528,
    5530,
    5532,
    5534,
    5536,
    5538,
    5541,
    5544,
    5547,
    5550,
    5553,
    5556,
    5560,
    5564,
    5568,
    5572,
    5576,
    5580,
    5583,
    5586,
    5589,
    5592,
    5595,
    5598,
    5602,
    5606,
    5610,
    5614,
    5618,
    5622,
    5625,
    5628,
    5631,
    5634,
    5636,
    5638,
    5640,
    5642,
    5646,
    5650,
    5654,
    5658,
    5662,
    5666,
    5670,
    5674,
    5678,
    5682,
    5686,
    5690,
    5692,
    5694,
    5696,
    5698,
    5700,
    5702,
    5704,
    5708,
    5712,
    5716,
    5718,
    5720,
    5722,
    5724,
    5726,
    5728,
    5730,
    5733,
    5736,
    5739,
    5742,
    5745,
    5747,
    5750,
    5753,
    5756,
    5758,
    5760,
    5762,
    5764,
    5766,
    5768,
    5771,
    5774,
    5777,
    5780,
    5783,
    5786,
    5789,
    5792,
    5795,
    5798,
    5801,
    5804,
    5807,
    5810,
    5813,
    5816,
    5818,
    5820,
    5822,
    5824,
    5826,
    5828,
    5830,
    5832,
    5834,
    5836,
    5838,
    5840,
    5842,
    5844,
    5846,
    5848,
    5850,
    5852,
    5854,
    5856,
    5859,
    5862,
    5865,
    5868,
    5872,
    5876,
    5880,
    5884,
    5887,
    5890,
    5893,
    5896,
    5900,
    5904,
    5908,
    5912,
    5915,
    5918,
    5920,
    5922,
    5924,
    5926,
    5930,
    5934,
    5938,
    5942,
    5946,
    5950,
    5954,
    5958,
    5960,
    5962,
    5964,
    5966,
    5968,
    5970,
    5972,
    5974,
    5976,
    5978,
    5980,
    5982,
    5984,
    5986,
    5988,
    5990,
    5993,
    5996,
    5999,
    6002,
    6004,
    6006,
    6009,
    6012,
    6014,
    6016,
    6018,
    6020,
    6022,
    6024,
    6026,
    6028,
    6031,
    6035,
    6038,
    6041,
    6044,
    6047,
    6050,
    6053,
    6056,
    6059,
    6062,
    6063,
    6064,
    6065,
    6068,
    6071,
    6074,
    6078,
    6081,
    6084,
    6088,
    6092,
    6095,
    6097,
    6100,
    6103,
    6106,
    6109,
    6113,
    6116,
    6119,
    6122,
    6125,
    6129,
    6132,
    6135,
    6139,
  };
  const int OpcodeOperandTypes[] = {
    -1, 
    /**/
    /**/
    OpTypes::i32imm, 
    OpTypes::i32imm, 
    OpTypes::i32imm, 
    OpTypes::i32imm, 
    /**/
    -1, -1, OpTypes::i32imm, 
    -1, -1, -1, OpTypes::i32imm, 
    -1, 
    -1, -1, -1, OpTypes::i32imm, 
    -1, -1, OpTypes::i32imm, 
    /**/
    -1, 
    -1, -1, 
    -1, -1, 
    /**/
    OpTypes::i32imm, 
    OpTypes::i32imm, 
    OpTypes::i64imm, OpTypes::i32imm, 
    /**/
    -1, OpTypes::i64imm, OpTypes::i32imm, -1, OpTypes::i32imm, OpTypes::i32imm, 
    -1, 
    /**/
    -1, OpTypes::i32imm, 
    -1, 
    /**/
    /**/
    /**/
    /**/
    /**/
    -1, OpTypes::i8imm, 
    OpTypes::i16imm, -1, OpTypes::i32imm, 
    /**/
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, 
    OpTypes::type0, 
    OpTypes::type0, -1, 
    OpTypes::type0, -1, 
    OpTypes::type0, OpTypes::type1, -1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type0, OpTypes::type1, -1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::ptype1, 
    OpTypes::type0, OpTypes::ptype1, 
    OpTypes::type0, OpTypes::ptype1, 
    OpTypes::type0, OpTypes::ptype1, 
    OpTypes::type0, OpTypes::type1, OpTypes::type2, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::ptype1, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::ptype1, OpTypes::type0, 
    OpTypes::type0, OpTypes::ptype1, OpTypes::type0, 
    OpTypes::type0, OpTypes::ptype1, OpTypes::type0, 
    OpTypes::type0, OpTypes::ptype1, OpTypes::type0, 
    OpTypes::type0, OpTypes::ptype1, OpTypes::type0, 
    OpTypes::type0, OpTypes::ptype1, OpTypes::type0, 
    OpTypes::type0, OpTypes::ptype1, OpTypes::type0, 
    OpTypes::type0, OpTypes::ptype1, OpTypes::type0, 
    OpTypes::type0, OpTypes::ptype1, OpTypes::type0, 
    OpTypes::type0, OpTypes::ptype1, OpTypes::type0, 
    OpTypes::type0, OpTypes::ptype1, OpTypes::type0, 
    OpTypes::i32imm, OpTypes::i32imm, 
    OpTypes::type0, -1, 
    OpTypes::type0, 
    -1, 
    -1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, -1, 
    OpTypes::type0, -1, 
    OpTypes::type0, 
    OpTypes::type0, OpTypes::type1, -1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, -1, OpTypes::type1, OpTypes::type1, 
    OpTypes::type0, -1, OpTypes::type1, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type1, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type1, OpTypes::type0, OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type1, OpTypes::type0, OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type1, OpTypes::type0, OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type1, OpTypes::type0, OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type1, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type0, -1, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, OpTypes::type0, 
    -1, 
    OpTypes::ptype0, -1, OpTypes::type1, 
    OpTypes::type0, OpTypes::type0, OpTypes::type1, OpTypes::type2, 
    OpTypes::type0, OpTypes::type1, OpTypes::type2, 
    OpTypes::type0, OpTypes::type1, OpTypes::type1, OpTypes::type2, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type0, 
    OpTypes::type0, OpTypes::type1, 
    OpTypes::type0, -1, 
    OpTypes::type0, -1, 
    -1, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, OpTypes::u5imm, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, OpTypes::u5imm, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, OpTypes::u5imm, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, OpTypes::u5imm, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, OpTypes::u5imm, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, OpTypes::u5imm, OpTypes::i32imm, 
    -1, -1, OpTypes::u5imm, OpTypes::i32imm, 
    -1, -1, OpTypes::u5imm, OpTypes::i32imm, 
    -1, -1, OpTypes::u5imm, OpTypes::i32imm, 
    -1, -1, OpTypes::u5imm, OpTypes::i32imm, 
    -1, -1, OpTypes::u5imm, OpTypes::i32imm, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, 
    -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, OpTypes::s16imm, 
    -1, -1, OpTypes::s16imm, 
    -1, -1, OpTypes::s16imm, 
    -1, -1, OpTypes::s16imm, 
    -1, OpTypes::s16imm, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, OpTypes::tlsreg32, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, OpTypes::tlsreg, 
    -1, -1, OpTypes::tlsreg, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, OpTypes::s16imm, 
    -1, -1, OpTypes::s16imm64, 
    -1, -1, OpTypes::s16imm, 
    -1, -1, OpTypes::s16imm64, 
    -1, -1, OpTypes::s16imm, 
    -1, -1, OpTypes::s17imm, 
    -1, -1, OpTypes::s17imm64, 
    -1, -1, OpTypes::s16imm64, 
    -1, -1, OpTypes::s16imm, 
    -1, -1, OpTypes::s16imm64, 
    -1, -1, OpTypes::s16imm64, 
    -1, -1, OpTypes::s16imm64, 
    -1, -1, OpTypes::i64imm, 
    -1, -1, OpTypes::s16imm64, 
    -1, -1, OpTypes::s16imm, 
    -1, -1, OpTypes::s16imm64, 
    -1, -1, OpTypes::s16imm, 
    -1, -1, OpTypes::s16imm64, OpTypes::tlsgd, 
    -1, -1, OpTypes::s16imm, OpTypes::tlsgd32, 
    -1, -1, OpTypes::s16imm64, 
    -1, -1, OpTypes::s16imm, 
    -1, -1, OpTypes::s16imm64, OpTypes::tlsgd, 
    -1, -1, OpTypes::s16imm, OpTypes::tlsgd32, 
    -1, -1, OpTypes::i64imm, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, OpTypes::i32imm, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    OpTypes::u16imm, OpTypes::u16imm, 
    OpTypes::u16imm, OpTypes::u16imm, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, OpTypes::u16imm, 
    -1, -1, OpTypes::u16imm64, 
    -1, -1, OpTypes::u16imm, 
    -1, -1, OpTypes::u16imm64, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, -1, 
    /**/
    OpTypes::directbrtarget, 
    OpTypes::absdirectbrtarget, 
    -1, OpTypes::condbrtarget, 
    OpTypes::i32imm, -1, OpTypes::condbrtarget, 
    OpTypes::i32imm, -1, OpTypes::abscondbrtarget, 
    OpTypes::i32imm, -1, 
    OpTypes::i32imm, -1, 
    OpTypes::i32imm, -1, 
    OpTypes::i32imm, -1, 
    OpTypes::i32imm, -1, OpTypes::condbrtarget, 
    OpTypes::i32imm, -1, OpTypes::abscondbrtarget, 
    OpTypes::i32imm, -1, 
    OpTypes::i32imm, -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, -1, OpTypes::u1imm, 
    -1, -1, OpTypes::u1imm, 
    -1, -1, OpTypes::u1imm, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, OpTypes::u1imm, 
    -1, -1, OpTypes::u1imm, 
    -1, -1, -1, OpTypes::u1imm, 
    -1, -1, -1, OpTypes::u1imm, 
    -1, -1, -1, OpTypes::u1imm, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, OpTypes::condbrtarget, 
    -1, 
    -1, 
    -1, 
    -1, 
    OpTypes::condbrtarget, 
    -1, OpTypes::condbrtarget, 
    /**/
    /**/
    /**/
    /**/
    OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::condbrtarget, 
    OpTypes::condbrtarget, 
    OpTypes::condbrtarget, 
    OpTypes::abscondbrtarget, 
    OpTypes::abscondbrtarget, 
    OpTypes::abscondbrtarget, 
    OpTypes::condbrtarget, 
    OpTypes::abscondbrtarget, 
    OpTypes::abscondbrtarget, 
    OpTypes::abscondbrtarget, 
    /**/
    /**/
    /**/
    /**/
    /**/
    /**/
    /**/
    OpTypes::condbrtarget, 
    OpTypes::condbrtarget, 
    OpTypes::condbrtarget, 
    OpTypes::condbrtarget, 
    OpTypes::condbrtarget, 
    OpTypes::condbrtarget, 
    OpTypes::abscondbrtarget, 
    OpTypes::abscondbrtarget, 
    OpTypes::abscondbrtarget, 
    OpTypes::condbrtarget, 
    OpTypes::abscondbrtarget, 
    OpTypes::abscondbrtarget, 
    OpTypes::abscondbrtarget, 
    /**/
    /**/
    /**/
    /**/
    /**/
    /**/
    /**/
    OpTypes::condbrtarget, 
    OpTypes::condbrtarget, 
    OpTypes::condbrtarget, 
    OpTypes::condbrtarget, 
    OpTypes::calltarget, 
    OpTypes::calltarget, 
    OpTypes::calltarget, 
    OpTypes::calltarget, OpTypes::tlsgd, 
    OpTypes::calltarget, OpTypes::tlsgd, 
    OpTypes::calltarget, OpTypes::tlsgd, 
    OpTypes::abscalltarget, 
    OpTypes::abscalltarget, 
    OpTypes::abscalltarget, 
    /**/
    /**/
    /**/
    OpTypes::calltarget, 
    OpTypes::calltarget, OpTypes::tlsgd32, 
    -1, -1, -1, 
    -1, -1, -1, 
    /**/
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, OpTypes::s16imm64, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, OpTypes::u16imm64, 
    -1, -1, -1, 
    -1, -1, OpTypes::u16imm, 
    -1, OpTypes::u1imm, -1, -1, 
    -1, OpTypes::u1imm, -1, -1, 
    -1, -1, -1, 
    -1, -1, OpTypes::s16imm, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    /**/
    -1, -1, OpTypes::u1imm, 
    -1, -1, OpTypes::u1imm, 
    -1, -1, OpTypes::u1imm, 
    -1, -1, OpTypes::u1imm, 
    -1, -1, OpTypes::u1imm, 
    -1, -1, OpTypes::u1imm, 
    /**/
    /**/
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, 
    -1, 
    -1, -1, -1, 
    OpTypes::i32imm, -1, OpTypes::condbrtarget, 
    -1, OpTypes::i32imm, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::u5imm, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::u5imm, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, OpTypes::u5imm, 
    OpTypes::u5imm, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, OpTypes::u5imm, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    OpTypes::u5imm, 
    /**/
    OpTypes::u5imm, -1, -1, 
    OpTypes::u5imm, -1, -1, 
    OpTypes::u5imm, -1, -1, 
    OpTypes::u5imm, -1, -1, 
    OpTypes::u5imm, -1, -1, 
    OpTypes::u5imm, -1, -1, 
    OpTypes::u5imm, -1, -1, 
    OpTypes::u5imm, -1, -1, 
    -1, -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    OpTypes::i32imm, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    OpTypes::i64imm, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    OpTypes::ptr_rc_nor0, 
    OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, 
    OpTypes::directbrtarget, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, OpTypes::u5imm, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, OpTypes::dispSPE8, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE8, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE8, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE2, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE2, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE2, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE4, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE4, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE4, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE4, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE4, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, OpTypes::u5imm, 
    -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, OpTypes::u5imm, 
    -1, OpTypes::s5imm, 
    -1, OpTypes::s5imm, 
    -1, -1, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, OpTypes::dispSPE8, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE8, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE8, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE4, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE4, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE4, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispSPE4, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, OpTypes::u5imm, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    /**/
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, OpTypes::tlsgd, 
    -1, -1, OpTypes::tlsgd32, 
    -1, -1, OpTypes::tlsgd, 
    -1, -1, OpTypes::tlsgd32, 
    /**/
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::u4imm, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::u4imm, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::u4imm, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::u4imm, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    /**/
    -1, -1, OpTypes::s16imm, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, -1, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, OpTypes::u5imm, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::s16imm64, -1, 
    -1, OpTypes::s16imm, -1, 
    -1, OpTypes::i64imm, -1, 
    -1, OpTypes::i64imm, -1, 
    -1, OpTypes::i64imm, -1, 
    -1, OpTypes::i64imm, -1, 
    -1, OpTypes::i64imm, -1, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, -1, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::s16imm, 
    -1, OpTypes::s16imm64, 
    -1, OpTypes::s17imm, 
    -1, OpTypes::s17imm64, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, -1, OpTypes::u5imm, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, OpTypes::u5imm, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, -1, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::i32imm, -1, 
    -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRIX16, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, -1, 
    -1, OpTypes::ptr_rc_nor0, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    OpTypes::u5imm, 
    -1, -1, 
    -1, -1, 
    -1, 
    -1, OpTypes::u10imm, OpTypes::u10imm, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, OpTypes::i32imm, 
    -1, 
    -1, -1, 
    -1, OpTypes::u3imm, 
    -1, 
    -1, -1, 
    -1, OpTypes::u2imm, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, OpTypes::crbitm, 
    -1, OpTypes::crbitm, 
    -1, OpTypes::i32imm, 
    -1, OpTypes::i32imm, 
    -1, OpTypes::i32imm, 
    -1, OpTypes::u4imm, 
    -1, -1, 
    -1, OpTypes::i32imm, 
    -1, 
    -1, -1, 
    -1, 
    -1, -1, 
    -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    /**/
    /**/
    OpTypes::i32imm, -1, 
    OpTypes::i32imm, -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, OpTypes::i32imm, 
    OpTypes::u5imm, 
    OpTypes::u5imm, 
    OpTypes::i32imm, -1, OpTypes::i32imm, OpTypes::i32imm, 
    -1, OpTypes::i32imm, OpTypes::i32imm, 
    -1, OpTypes::i32imm, OpTypes::i32imm, 
    OpTypes::i32imm, -1, 
    OpTypes::i32imm, -1, OpTypes::i32imm, OpTypes::i32imm, 
    -1, 
    -1, 
    -1, OpTypes::i32imm, 
    -1, OpTypes::i32imm, 
    OpTypes::crbitm, -1, 
    OpTypes::crbitm, -1, 
    OpTypes::i32imm, -1, 
    OpTypes::i32imm, -1, 
    OpTypes::i32imm, -1, 
    -1, OpTypes::u4imm, 
    -1, -1, 
    -1, 
    -1, -1, 
    -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, OpTypes::s16imm, 
    -1, -1, OpTypes::s16imm64, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    /**/
    /**/
    /**/
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    /**/
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    /**/
    /**/
    /**/
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, OpTypes::u16imm, 
    -1, -1, OpTypes::u16imm64, 
    -1, -1, OpTypes::u16imm, 
    -1, -1, OpTypes::u16imm64, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, 
    -1, -1, 
    -1, -1, -1, OpTypes::u2imm, 
    -1, -1, -1, OpTypes::u2imm, 
    -1, -1, -1, OpTypes::u2imm, 
    -1, -1, OpTypes::u2imm, 
    -1, -1, OpTypes::u2imm, 
    -1, -1, OpTypes::u2imm, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, OpTypes::u12imm, 
    -1, -1, -1, OpTypes::u12imm, 
    -1, -1, -1, OpTypes::u12imm, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, OpTypes::u12imm, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    /**/
    /**/
    OpTypes::u1imm, 
    /**/
    /**/
    /**/
    -1, -1, -1, OpTypes::u6imm, 
    -1, -1, -1, OpTypes::u6imm, 
    -1, -1, -1, OpTypes::u6imm, 
    -1, -1, -1, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, -1, OpTypes::u6imm, OpTypes::u6imm, 
    -1, -1, -1, OpTypes::u5imm, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, -1, OpTypes::u5imm, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, -1, OpTypes::u5imm, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, -1, OpTypes::u5imm, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, -1, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, -1, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, -1, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, -1, OpTypes::u5imm, OpTypes::u5imm, 
    -1, -1, 
    OpTypes::i32imm, 
    -1, -1, -1, -1, OpTypes::i32imm, 
    -1, -1, -1, -1, OpTypes::i32imm, 
    -1, -1, -1, -1, OpTypes::i32imm, 
    -1, -1, -1, -1, OpTypes::i32imm, 
    -1, -1, -1, -1, OpTypes::i32imm, 
    -1, -1, -1, -1, OpTypes::i32imm, 
    -1, -1, -1, -1, OpTypes::i32imm, 
    -1, -1, -1, -1, OpTypes::i32imm, 
    -1, -1, -1, -1, OpTypes::i32imm, 
    -1, -1, -1, -1, OpTypes::i32imm, 
    -1, -1, -1, -1, OpTypes::i32imm, 
    -1, -1, -1, -1, OpTypes::i32imm, 
    -1, -1, -1, -1, OpTypes::i32imm, 
    -1, -1, -1, -1, OpTypes::i32imm, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, OpTypes::u2imm, 
    -1, -1, 
    /**/
    -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    /**/
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, -1, -1, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, OpTypes::u6imm, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, OpTypes::u5imm, 
    -1, -1, OpTypes::u5imm, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, -1, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, -1, OpTypes::u5imm, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    /**/
    -1, -1, OpTypes::u5imm, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    -1, -1, OpTypes::u5imm, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::dispRI, OpTypes::ptr_rc_nor0, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    OpTypes::ptr_rc_nor0, -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::tlsreg, 
    -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRIX, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::dispRIX16, OpTypes::ptr_rc_nor0, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, -1, 
    -1, OpTypes::ptr_rc_nor0, -1, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, OpTypes::ptr_rc_nor0, OpTypes::ptr_rc_idx, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, OpTypes::s16imm, 
    -1, -1, OpTypes::s16imm64, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    OpTypes::i32imm, 
    -1, 
    OpTypes::u5imm, -1, -1, 
    OpTypes::u5imm, -1, OpTypes::u5imm, 
    OpTypes::u5imm, -1, -1, 
    OpTypes::u5imm, -1, OpTypes::u5imm, 
    OpTypes::calltarget, 
    OpTypes::calltarget, 
    OpTypes::abscalltarget, 
    OpTypes::abscalltarget, 
    /**/
    /**/
    OpTypes::u1imm, 
    -1, OpTypes::u1imm, 
    -1, 
    -1, 
    OpTypes::abscalltarget, OpTypes::i32imm, 
    OpTypes::abscalltarget, OpTypes::i32imm, 
    OpTypes::calltarget, OpTypes::i32imm, 
    OpTypes::calltarget, OpTypes::i32imm, 
    -1, OpTypes::i32imm, 
    -1, OpTypes::i32imm, 
    OpTypes::u5imm, -1, -1, 
    OpTypes::u5imm, -1, OpTypes::s16imm, 
    OpTypes::u1imm, 
    /**/
    -1, -1, 
    -1, 
    -1, -1, 
    -1, 
    -1, 
    /**/
    -1, -1, OpTypes::i1imm, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    /**/
    /**/
    -1, -1, OpTypes::i1imm, 
    /**/
    /**/
    -1, 
    OpTypes::u1imm, 
    OpTypes::u5imm, -1, -1, 
    OpTypes::u5imm, -1, OpTypes::s16imm, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, OpTypes::u5imm, -1, 
    -1, -1, 
    -1, OpTypes::u5imm, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, OpTypes::u5imm, -1, 
    -1, -1, 
    -1, OpTypes::u5imm, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, OpTypes::u4imm, -1, 
    -1, OpTypes::u4imm, -1, 
    -1, OpTypes::u4imm, -1, 
    -1, OpTypes::u4imm, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, OpTypes::u4imm, -1, 
    -1, OpTypes::u4imm, -1, 
    -1, -1, OpTypes::u4imm, -1, 
    -1, OpTypes::u4imm, -1, 
    -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, OpTypes::u1imm, OpTypes::u4imm, 
    -1, -1, OpTypes::u1imm, OpTypes::u4imm, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, OpTypes::u4imm, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, OpTypes::u5imm, -1, 
    -1, OpTypes::u5imm, -1, 
    -1, OpTypes::u5imm, -1, 
    -1, OpTypes::u5imm, -1, 
    -1, OpTypes::s5imm, 
    -1, OpTypes::s5imm, 
    -1, OpTypes::s5imm, 
    -1, OpTypes::u5imm, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    OpTypes::i32imm, 
    -1, 
    OpTypes::i1imm, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, OpTypes::u16imm, 
    -1, -1, OpTypes::u16imm64, 
    -1, -1, OpTypes::u16imm, 
    -1, -1, OpTypes::u16imm64, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, OpTypes::u1imm, -1, OpTypes::u2imm, 
    -1, OpTypes::u1imm, -1, OpTypes::u2imm, 
    -1, OpTypes::u1imm, -1, OpTypes::u2imm, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, OpTypes::u7imm, -1, 
    -1, OpTypes::u7imm, -1, 
    -1, OpTypes::u7imm, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, OpTypes::u7imm, -1, 
    -1, OpTypes::u7imm, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, 
    -1, -1, OpTypes::u4imm, 
    -1, -1, -1, OpTypes::u4imm, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, 
    -1, 
    -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, 
    -1, -1, -1, OpTypes::u2imm, 
    -1, -1, OpTypes::u2imm, 
    -1, -1, -1, 
    -1, -1, -1, -1, 
    -1, -1, -1, OpTypes::u2imm, 
    -1, -1, OpTypes::u2imm, 
    -1, OpTypes::u8imm, 
    -1, -1, OpTypes::u2imm, 
    -1, -1, OpTypes::u2imm, 
    OpTypes::u5imm, -1, OpTypes::condbrtarget, 
    OpTypes::u5imm, -1, OpTypes::abscondbrtarget, 
    OpTypes::u5imm, OpTypes::atimm, -1, OpTypes::abscondbrtarget, 
    OpTypes::u5imm, -1, OpTypes::i32imm, 
    OpTypes::u5imm, -1, OpTypes::i32imm, 
    OpTypes::u5imm, -1, OpTypes::condbrtarget, 
    OpTypes::u5imm, -1, OpTypes::abscondbrtarget, 
    OpTypes::u5imm, OpTypes::atimm, -1, OpTypes::abscondbrtarget, 
    OpTypes::u5imm, -1, OpTypes::i32imm, 
    OpTypes::u5imm, -1, OpTypes::i32imm, 
    OpTypes::u5imm, OpTypes::atimm, -1, OpTypes::condbrtarget, 
    OpTypes::u5imm, OpTypes::atimm, -1, OpTypes::condbrtarget, 
  };
  return OpcodeOperandTypes[Offsets[Opcode] + OpIdx];
}
} // end namespace PPC
} // end namespace llvm
#endif //GET_INSTRINFO_OPERAND_TYPE

#ifdef GET_INSTRMAP_INFO
#undef GET_INSTRMAP_INFO
namespace llvm {

namespace PPC {

enum IsVSXFMAAlt {
	IsVSXFMAAlt_1
};

enum RC {
	RC_0,
	RC_1
};

// getAltVSXFMAOpcode
LLVM_READONLY
int getAltVSXFMAOpcode(uint16_t Opcode) {
static const uint16_t getAltVSXFMAOpcodeTable[][2] = {
  { PPC::XSMADDADP, PPC::XSMADDMDP },
  { PPC::XSMADDASP, PPC::XSMADDMSP },
  { PPC::XSMSUBADP, PPC::XSMSUBMDP },
  { PPC::XSMSUBASP, PPC::XSMSUBMSP },
  { PPC::XSNMADDADP, PPC::XSNMADDMDP },
  { PPC::XSNMADDASP, PPC::XSNMADDMSP },
  { PPC::XSNMSUBADP, PPC::XSNMSUBMDP },
  { PPC::XSNMSUBASP, PPC::XSNMSUBMSP },
  { PPC::XVMADDADP, PPC::XVMADDMDP },
  { PPC::XVMADDASP, PPC::XVMADDMSP },
  { PPC::XVMSUBADP, PPC::XVMSUBMDP },
  { PPC::XVMSUBASP, PPC::XVMSUBMSP },
  { PPC::XVNMADDADP, PPC::XVNMADDMDP },
  { PPC::XVNMADDASP, PPC::XVNMADDMSP },
  { PPC::XVNMSUBADP, PPC::XVNMSUBMDP },
  { PPC::XVNMSUBASP, PPC::XVNMSUBMSP },
}; // End of getAltVSXFMAOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 16;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getAltVSXFMAOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getAltVSXFMAOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getAltVSXFMAOpcodeTable[mid][1];
}

// getNonRecordFormOpcode
LLVM_READONLY
int getNonRecordFormOpcode(uint16_t Opcode) {
static const uint16_t getNonRecordFormOpcodeTable[][2] = {
  { PPC::ADD4Oo, PPC::ADD4O },
  { PPC::ADD4o, PPC::ADD4 },
  { PPC::ADD8Oo, PPC::ADD8O },
  { PPC::ADD8o, PPC::ADD8 },
  { PPC::ADDC8Oo, PPC::ADDC8O },
  { PPC::ADDC8o, PPC::ADDC8 },
  { PPC::ADDCOo, PPC::ADDCO },
  { PPC::ADDCo, PPC::ADDC },
  { PPC::ADDE8Oo, PPC::ADDE8O },
  { PPC::ADDE8o, PPC::ADDE8 },
  { PPC::ADDEOo, PPC::ADDEO },
  { PPC::ADDEo, PPC::ADDE },
  { PPC::ADDICo, PPC::ADDIC },
  { PPC::ADDME8Oo, PPC::ADDME8O },
  { PPC::ADDME8o, PPC::ADDME8 },
  { PPC::ADDMEOo, PPC::ADDMEO },
  { PPC::ADDMEo, PPC::ADDME },
  { PPC::ADDZE8Oo, PPC::ADDZE8O },
  { PPC::ADDZE8o, PPC::ADDZE8 },
  { PPC::ADDZEOo, PPC::ADDZEO },
  { PPC::ADDZEo, PPC::ADDZE },
  { PPC::AND8o, PPC::AND8 },
  { PPC::ANDC8o, PPC::ANDC8 },
  { PPC::ANDCo, PPC::ANDC },
  { PPC::ANDo, PPC::AND },
  { PPC::CNTLZDo, PPC::CNTLZD },
  { PPC::CNTLZW8o, PPC::CNTLZW8 },
  { PPC::CNTLZWo, PPC::CNTLZW },
  { PPC::CNTTZDo, PPC::CNTTZD },
  { PPC::CNTTZW8o, PPC::CNTTZW8 },
  { PPC::CNTTZWo, PPC::CNTTZW },
  { PPC::DIVDEOo, PPC::DIVDEO },
  { PPC::DIVDEUOo, PPC::DIVDEUO },
  { PPC::DIVDEUo, PPC::DIVDEU },
  { PPC::DIVDEo, PPC::DIVDE },
  { PPC::DIVDOo, PPC::DIVDO },
  { PPC::DIVDUOo, PPC::DIVDUO },
  { PPC::DIVDUo, PPC::DIVDU },
  { PPC::DIVDo, PPC::DIVD },
  { PPC::DIVWEOo, PPC::DIVWEO },
  { PPC::DIVWEUOo, PPC::DIVWEUO },
  { PPC::DIVWEUo, PPC::DIVWEU },
  { PPC::DIVWEo, PPC::DIVWE },
  { PPC::DIVWOo, PPC::DIVWO },
  { PPC::DIVWUOo, PPC::DIVWUO },
  { PPC::DIVWUo, PPC::DIVWU },
  { PPC::DIVWo, PPC::DIVW },
  { PPC::EQV8o, PPC::EQV8 },
  { PPC::EQVo, PPC::EQV },
  { PPC::EXTSB8o, PPC::EXTSB8 },
  { PPC::EXTSBo, PPC::EXTSB },
  { PPC::EXTSH8o, PPC::EXTSH8 },
  { PPC::EXTSHo, PPC::EXTSH },
  { PPC::EXTSWSLI_32_64o, PPC::EXTSWSLI_32_64 },
  { PPC::EXTSWSLIo, PPC::EXTSWSLI },
  { PPC::EXTSW_32_64o, PPC::EXTSW_32_64 },
  { PPC::EXTSWo, PPC::EXTSW },
  { PPC::FABSDo, PPC::FABSD },
  { PPC::FABSSo, PPC::FABSS },
  { PPC::FADDSo, PPC::FADDS },
  { PPC::FADDo, PPC::FADD },
  { PPC::FCFIDSo, PPC::FCFIDS },
  { PPC::FCFIDUSo, PPC::FCFIDUS },
  { PPC::FCFIDUo, PPC::FCFIDU },
  { PPC::FCFIDo, PPC::FCFID },
  { PPC::FCPSGNDo, PPC::FCPSGND },
  { PPC::FCPSGNSo, PPC::FCPSGNS },
  { PPC::FCTIDUZo, PPC::FCTIDUZ },
  { PPC::FCTIDUo, PPC::FCTIDU },
  { PPC::FCTIDZo, PPC::FCTIDZ },
  { PPC::FCTIDo, PPC::FCTID },
  { PPC::FCTIWUZo, PPC::FCTIWUZ },
  { PPC::FCTIWUo, PPC::FCTIWU },
  { PPC::FCTIWZo, PPC::FCTIWZ },
  { PPC::FCTIWo, PPC::FCTIW },
  { PPC::FDIVSo, PPC::FDIVS },
  { PPC::FDIVo, PPC::FDIV },
  { PPC::FMADDSo, PPC::FMADDS },
  { PPC::FMADDo, PPC::FMADD },
  { PPC::FMRo, PPC::FMR },
  { PPC::FMSUBSo, PPC::FMSUBS },
  { PPC::FMSUBo, PPC::FMSUB },
  { PPC::FMULSo, PPC::FMULS },
  { PPC::FMULo, PPC::FMUL },
  { PPC::FNABSDo, PPC::FNABSD },
  { PPC::FNABSSo, PPC::FNABSS },
  { PPC::FNEGDo, PPC::FNEGD },
  { PPC::FNEGSo, PPC::FNEGS },
  { PPC::FNMADDSo, PPC::FNMADDS },
  { PPC::FNMADDo, PPC::FNMADD },
  { PPC::FNMSUBSo, PPC::FNMSUBS },
  { PPC::FNMSUBo, PPC::FNMSUB },
  { PPC::FRESo, PPC::FRES },
  { PPC::FREo, PPC::FRE },
  { PPC::FRIMDo, PPC::FRIMD },
  { PPC::FRIMSo, PPC::FRIMS },
  { PPC::FRINDo, PPC::FRIND },
  { PPC::FRINSo, PPC::FRINS },
  { PPC::FRIPDo, PPC::FRIPD },
  { PPC::FRIPSo, PPC::FRIPS },
  { PPC::FRIZDo, PPC::FRIZD },
  { PPC::FRIZSo, PPC::FRIZS },
  { PPC::FRSPo, PPC::FRSP },
  { PPC::FRSQRTESo, PPC::FRSQRTES },
  { PPC::FRSQRTEo, PPC::FRSQRTE },
  { PPC::FSELDo, PPC::FSELD },
  { PPC::FSELSo, PPC::FSELS },
  { PPC::FSQRTSo, PPC::FSQRTS },
  { PPC::FSQRTo, PPC::FSQRT },
  { PPC::FSUBSo, PPC::FSUBS },
  { PPC::FSUBo, PPC::FSUB },
  { PPC::MULHDUo, PPC::MULHDU },
  { PPC::MULHDo, PPC::MULHD },
  { PPC::MULHWUo, PPC::MULHWU },
  { PPC::MULHWo, PPC::MULHW },
  { PPC::MULLDOo, PPC::MULLDO },
  { PPC::MULLDo, PPC::MULLD },
  { PPC::MULLWOo, PPC::MULLWO },
  { PPC::MULLWo, PPC::MULLW },
  { PPC::NAND8o, PPC::NAND8 },
  { PPC::NANDo, PPC::NAND },
  { PPC::NEG8Oo, PPC::NEG8O },
  { PPC::NEG8o, PPC::NEG8 },
  { PPC::NEGOo, PPC::NEGO },
  { PPC::NEGo, PPC::NEG },
  { PPC::NOR8o, PPC::NOR8 },
  { PPC::NORo, PPC::NOR },
  { PPC::OR8o, PPC::OR8 },
  { PPC::ORC8o, PPC::ORC8 },
  { PPC::ORCo, PPC::ORC },
  { PPC::ORo, PPC::OR },
  { PPC::RLDCLo, PPC::RLDCL },
  { PPC::RLDCRo, PPC::RLDCR },
  { PPC::RLDICL_32o, PPC::RLDICL_32 },
  { PPC::RLDICLo, PPC::RLDICL },
  { PPC::RLDICRo, PPC::RLDICR },
  { PPC::RLDICo, PPC::RLDIC },
  { PPC::RLDIMIo, PPC::RLDIMI },
  { PPC::RLWIMI8o, PPC::RLWIMI8 },
  { PPC::RLWIMIo, PPC::RLWIMI },
  { PPC::RLWINM8o, PPC::RLWINM8 },
  { PPC::RLWINMo, PPC::RLWINM },
  { PPC::RLWNM8o, PPC::RLWNM8 },
  { PPC::RLWNMo, PPC::RLWNM },
  { PPC::SLDo, PPC::SLD },
  { PPC::SLW8o, PPC::SLW8 },
  { PPC::SLWo, PPC::SLW },
  { PPC::SRADIo, PPC::SRADI },
  { PPC::SRADo, PPC::SRAD },
  { PPC::SRAWIo, PPC::SRAWI },
  { PPC::SRAWo, PPC::SRAW },
  { PPC::SRDo, PPC::SRD },
  { PPC::SRW8o, PPC::SRW8 },
  { PPC::SRWo, PPC::SRW },
  { PPC::SUBF8Oo, PPC::SUBF8O },
  { PPC::SUBF8o, PPC::SUBF8 },
  { PPC::SUBFC8Oo, PPC::SUBFC8O },
  { PPC::SUBFC8o, PPC::SUBFC8 },
  { PPC::SUBFCOo, PPC::SUBFCO },
  { PPC::SUBFCo, PPC::SUBFC },
  { PPC::SUBFE8Oo, PPC::SUBFE8O },
  { PPC::SUBFE8o, PPC::SUBFE8 },
  { PPC::SUBFEOo, PPC::SUBFEO },
  { PPC::SUBFEo, PPC::SUBFE },
  { PPC::SUBFME8Oo, PPC::SUBFME8O },
  { PPC::SUBFME8o, PPC::SUBFME8 },
  { PPC::SUBFMEOo, PPC::SUBFMEO },
  { PPC::SUBFMEo, PPC::SUBFME },
  { PPC::SUBFOo, PPC::SUBFO },
  { PPC::SUBFZE8Oo, PPC::SUBFZE8O },
  { PPC::SUBFZE8o, PPC::SUBFZE8 },
  { PPC::SUBFZEOo, PPC::SUBFZEO },
  { PPC::SUBFZEo, PPC::SUBFZE },
  { PPC::SUBFo, PPC::SUBF },
  { PPC::XOR8o, PPC::XOR8 },
  { PPC::XORo, PPC::XOR },
}; // End of getNonRecordFormOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 176;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getNonRecordFormOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getNonRecordFormOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getNonRecordFormOpcodeTable[mid][1];
}

// getRecordFormOpcode
LLVM_READONLY
int getRecordFormOpcode(uint16_t Opcode) {
static const uint16_t getRecordFormOpcodeTable[][2] = {
  { PPC::ADD4, PPC::ADD4o },
  { PPC::ADD4O, PPC::ADD4Oo },
  { PPC::ADD8, PPC::ADD8o },
  { PPC::ADD8O, PPC::ADD8Oo },
  { PPC::ADDC, PPC::ADDCo },
  { PPC::ADDC8, PPC::ADDC8o },
  { PPC::ADDC8O, PPC::ADDC8Oo },
  { PPC::ADDCO, PPC::ADDCOo },
  { PPC::ADDE, PPC::ADDEo },
  { PPC::ADDE8, PPC::ADDE8o },
  { PPC::ADDE8O, PPC::ADDE8Oo },
  { PPC::ADDEO, PPC::ADDEOo },
  { PPC::ADDIC, PPC::ADDICo },
  { PPC::ADDME, PPC::ADDMEo },
  { PPC::ADDME8, PPC::ADDME8o },
  { PPC::ADDME8O, PPC::ADDME8Oo },
  { PPC::ADDMEO, PPC::ADDMEOo },
  { PPC::ADDZE, PPC::ADDZEo },
  { PPC::ADDZE8, PPC::ADDZE8o },
  { PPC::ADDZE8O, PPC::ADDZE8Oo },
  { PPC::ADDZEO, PPC::ADDZEOo },
  { PPC::AND, PPC::ANDo },
  { PPC::AND8, PPC::AND8o },
  { PPC::ANDC, PPC::ANDCo },
  { PPC::ANDC8, PPC::ANDC8o },
  { PPC::CNTLZD, PPC::CNTLZDo },
  { PPC::CNTLZW, PPC::CNTLZWo },
  { PPC::CNTLZW8, PPC::CNTLZW8o },
  { PPC::CNTTZD, PPC::CNTTZDo },
  { PPC::CNTTZW, PPC::CNTTZWo },
  { PPC::CNTTZW8, PPC::CNTTZW8o },
  { PPC::DIVD, PPC::DIVDo },
  { PPC::DIVDE, PPC::DIVDEo },
  { PPC::DIVDEO, PPC::DIVDEOo },
  { PPC::DIVDEU, PPC::DIVDEUo },
  { PPC::DIVDEUO, PPC::DIVDEUOo },
  { PPC::DIVDO, PPC::DIVDOo },
  { PPC::DIVDU, PPC::DIVDUo },
  { PPC::DIVDUO, PPC::DIVDUOo },
  { PPC::DIVW, PPC::DIVWo },
  { PPC::DIVWE, PPC::DIVWEo },
  { PPC::DIVWEO, PPC::DIVWEOo },
  { PPC::DIVWEU, PPC::DIVWEUo },
  { PPC::DIVWEUO, PPC::DIVWEUOo },
  { PPC::DIVWO, PPC::DIVWOo },
  { PPC::DIVWU, PPC::DIVWUo },
  { PPC::DIVWUO, PPC::DIVWUOo },
  { PPC::EQV, PPC::EQVo },
  { PPC::EQV8, PPC::EQV8o },
  { PPC::EXTSB, PPC::EXTSBo },
  { PPC::EXTSB8, PPC::EXTSB8o },
  { PPC::EXTSH, PPC::EXTSHo },
  { PPC::EXTSH8, PPC::EXTSH8o },
  { PPC::EXTSW, PPC::EXTSWo },
  { PPC::EXTSWSLI, PPC::EXTSWSLIo },
  { PPC::EXTSWSLI_32_64, PPC::EXTSWSLI_32_64o },
  { PPC::EXTSW_32_64, PPC::EXTSW_32_64o },
  { PPC::FABSD, PPC::FABSDo },
  { PPC::FABSS, PPC::FABSSo },
  { PPC::FADD, PPC::FADDo },
  { PPC::FADDS, PPC::FADDSo },
  { PPC::FCFID, PPC::FCFIDo },
  { PPC::FCFIDS, PPC::FCFIDSo },
  { PPC::FCFIDU, PPC::FCFIDUo },
  { PPC::FCFIDUS, PPC::FCFIDUSo },
  { PPC::FCPSGND, PPC::FCPSGNDo },
  { PPC::FCPSGNS, PPC::FCPSGNSo },
  { PPC::FCTID, PPC::FCTIDo },
  { PPC::FCTIDU, PPC::FCTIDUo },
  { PPC::FCTIDUZ, PPC::FCTIDUZo },
  { PPC::FCTIDZ, PPC::FCTIDZo },
  { PPC::FCTIW, PPC::FCTIWo },
  { PPC::FCTIWU, PPC::FCTIWUo },
  { PPC::FCTIWUZ, PPC::FCTIWUZo },
  { PPC::FCTIWZ, PPC::FCTIWZo },
  { PPC::FDIV, PPC::FDIVo },
  { PPC::FDIVS, PPC::FDIVSo },
  { PPC::FMADD, PPC::FMADDo },
  { PPC::FMADDS, PPC::FMADDSo },
  { PPC::FMR, PPC::FMRo },
  { PPC::FMSUB, PPC::FMSUBo },
  { PPC::FMSUBS, PPC::FMSUBSo },
  { PPC::FMUL, PPC::FMULo },
  { PPC::FMULS, PPC::FMULSo },
  { PPC::FNABSD, PPC::FNABSDo },
  { PPC::FNABSS, PPC::FNABSSo },
  { PPC::FNEGD, PPC::FNEGDo },
  { PPC::FNEGS, PPC::FNEGSo },
  { PPC::FNMADD, PPC::FNMADDo },
  { PPC::FNMADDS, PPC::FNMADDSo },
  { PPC::FNMSUB, PPC::FNMSUBo },
  { PPC::FNMSUBS, PPC::FNMSUBSo },
  { PPC::FRE, PPC::FREo },
  { PPC::FRES, PPC::FRESo },
  { PPC::FRIMD, PPC::FRIMDo },
  { PPC::FRIMS, PPC::FRIMSo },
  { PPC::FRIND, PPC::FRINDo },
  { PPC::FRINS, PPC::FRINSo },
  { PPC::FRIPD, PPC::FRIPDo },
  { PPC::FRIPS, PPC::FRIPSo },
  { PPC::FRIZD, PPC::FRIZDo },
  { PPC::FRIZS, PPC::FRIZSo },
  { PPC::FRSP, PPC::FRSPo },
  { PPC::FRSQRTE, PPC::FRSQRTEo },
  { PPC::FRSQRTES, PPC::FRSQRTESo },
  { PPC::FSELD, PPC::FSELDo },
  { PPC::FSELS, PPC::FSELSo },
  { PPC::FSQRT, PPC::FSQRTo },
  { PPC::FSQRTS, PPC::FSQRTSo },
  { PPC::FSUB, PPC::FSUBo },
  { PPC::FSUBS, PPC::FSUBSo },
  { PPC::MULHD, PPC::MULHDo },
  { PPC::MULHDU, PPC::MULHDUo },
  { PPC::MULHW, PPC::MULHWo },
  { PPC::MULHWU, PPC::MULHWUo },
  { PPC::MULLD, PPC::MULLDo },
  { PPC::MULLDO, PPC::MULLDOo },
  { PPC::MULLW, PPC::MULLWo },
  { PPC::MULLWO, PPC::MULLWOo },
  { PPC::NAND, PPC::NANDo },
  { PPC::NAND8, PPC::NAND8o },
  { PPC::NEG, PPC::NEGo },
  { PPC::NEG8, PPC::NEG8o },
  { PPC::NEG8O, PPC::NEG8Oo },
  { PPC::NEGO, PPC::NEGOo },
  { PPC::NOR, PPC::NORo },
  { PPC::NOR8, PPC::NOR8o },
  { PPC::OR, PPC::ORo },
  { PPC::OR8, PPC::OR8o },
  { PPC::ORC, PPC::ORCo },
  { PPC::ORC8, PPC::ORC8o },
  { PPC::RLDCL, PPC::RLDCLo },
  { PPC::RLDCR, PPC::RLDCRo },
  { PPC::RLDIC, PPC::RLDICo },
  { PPC::RLDICL, PPC::RLDICLo },
  { PPC::RLDICL_32, PPC::RLDICL_32o },
  { PPC::RLDICR, PPC::RLDICRo },
  { PPC::RLDIMI, PPC::RLDIMIo },
  { PPC::RLWIMI, PPC::RLWIMIo },
  { PPC::RLWIMI8, PPC::RLWIMI8o },
  { PPC::RLWINM, PPC::RLWINMo },
  { PPC::RLWINM8, PPC::RLWINM8o },
  { PPC::RLWNM, PPC::RLWNMo },
  { PPC::RLWNM8, PPC::RLWNM8o },
  { PPC::SLD, PPC::SLDo },
  { PPC::SLW, PPC::SLWo },
  { PPC::SLW8, PPC::SLW8o },
  { PPC::SRAD, PPC::SRADo },
  { PPC::SRADI, PPC::SRADIo },
  { PPC::SRAW, PPC::SRAWo },
  { PPC::SRAWI, PPC::SRAWIo },
  { PPC::SRD, PPC::SRDo },
  { PPC::SRW, PPC::SRWo },
  { PPC::SRW8, PPC::SRW8o },
  { PPC::SUBF, PPC::SUBFo },
  { PPC::SUBF8, PPC::SUBF8o },
  { PPC::SUBF8O, PPC::SUBF8Oo },
  { PPC::SUBFC, PPC::SUBFCo },
  { PPC::SUBFC8, PPC::SUBFC8o },
  { PPC::SUBFC8O, PPC::SUBFC8Oo },
  { PPC::SUBFCO, PPC::SUBFCOo },
  { PPC::SUBFE, PPC::SUBFEo },
  { PPC::SUBFE8, PPC::SUBFE8o },
  { PPC::SUBFE8O, PPC::SUBFE8Oo },
  { PPC::SUBFEO, PPC::SUBFEOo },
  { PPC::SUBFME, PPC::SUBFMEo },
  { PPC::SUBFME8, PPC::SUBFME8o },
  { PPC::SUBFME8O, PPC::SUBFME8Oo },
  { PPC::SUBFMEO, PPC::SUBFMEOo },
  { PPC::SUBFO, PPC::SUBFOo },
  { PPC::SUBFZE, PPC::SUBFZEo },
  { PPC::SUBFZE8, PPC::SUBFZE8o },
  { PPC::SUBFZE8O, PPC::SUBFZE8Oo },
  { PPC::SUBFZEO, PPC::SUBFZEOo },
  { PPC::XOR, PPC::XORo },
  { PPC::XOR8, PPC::XOR8o },
}; // End of getRecordFormOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 176;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getRecordFormOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getRecordFormOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getRecordFormOpcodeTable[mid][1];
}

} // End PPC namespace
} // End llvm namespace
#endif // GET_INSTRMAP_INFO

